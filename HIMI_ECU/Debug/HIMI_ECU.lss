
HIMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003eec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ec  00800060  00003eec  00003f80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080014c  0080014c  0000406c  2**0
                  ALLOC
  3 .stab         000033e4  00000000  00000000  0000406c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001307  00000000  00000000  00007450  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008757  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008897  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008a07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a650  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b53b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c2e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c448  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c6d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cea3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 f1 1c 	jmp	0x39e2	; 0x39e2 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 be 1c 	jmp	0x397c	; 0x397c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ee       	ldi	r30, 0xEC	; 236
      68:	fe e3       	ldi	r31, 0x3E	; 62
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 34       	cpi	r26, 0x4C	; 76
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e4       	ldi	r26, 0x4C	; 76
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 35       	cpi	r26, 0x52	; 82
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b3 1c 	call	0x3966	; 0x3966 <main>
      8a:	0c 94 74 1f 	jmp	0x3ee8	; 0x3ee8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f8 1e 	jmp	0x3df0	; 0x3df0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e3       	ldi	r26, 0x36	; 54
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 14 1f 	jmp	0x3e28	; 0x3e28 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 04 1f 	jmp	0x3e08	; 0x3e08 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 20 1f 	jmp	0x3e40	; 0x3e40 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 04 1f 	jmp	0x3e08	; 0x3e08 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 20 1f 	jmp	0x3e40	; 0x3e40 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f8 1e 	jmp	0x3df0	; 0x3df0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e3       	ldi	r24, 0x36	; 54
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 14 1f 	jmp	0x3e28	; 0x3e28 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 04 1f 	jmp	0x3e08	; 0x3e08 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 20 1f 	jmp	0x3e40	; 0x3e40 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 04 1f 	jmp	0x3e08	; 0x3e08 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 20 1f 	jmp	0x3e40	; 0x3e40 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 04 1f 	jmp	0x3e08	; 0x3e08 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 20 1f 	jmp	0x3e40	; 0x3e40 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 08 1f 	jmp	0x3e10	; 0x3e10 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 24 1f 	jmp	0x3e48	; 0x3e48 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <KEYPAD_getPressedKey+0x6>
     b4c:	0f 92       	push	r0
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
     b52:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
     b54:	1b 82       	std	Y+3, r1	; 0x03
     b56:	43 c0       	rjmp	.+134    	; 0xbde <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
     b58:	82 e0       	ldi	r24, 0x02	; 2
     b5a:	60 e0       	ldi	r22, 0x00	; 0
     b5c:	0e 94 0c 09 	call	0x1218	; 0x1218 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
     b60:	8b 81       	ldd	r24, Y+3	; 0x03
     b62:	98 2f       	mov	r25, r24
     b64:	9c 5f       	subi	r25, 0xFC	; 252
     b66:	82 e0       	ldi	r24, 0x02	; 2
     b68:	69 2f       	mov	r22, r25
     b6a:	41 e0       	ldi	r20, 0x01	; 1
     b6c:	0e 94 9b 06 	call	0xd36	; 0xd36 <GPIO_setupPinDirection>

#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
     b70:	8b 81       	ldd	r24, Y+3	; 0x03
     b72:	88 2f       	mov	r24, r24
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	9c 01       	movw	r18, r24
     b78:	2c 5f       	subi	r18, 0xFC	; 252
     b7a:	3f 4f       	sbci	r19, 0xFF	; 255
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	02 c0       	rjmp	.+4      	; 0xb86 <KEYPAD_getPressedKey+0x40>
     b82:	88 0f       	add	r24, r24
     b84:	99 1f       	adc	r25, r25
     b86:	2a 95       	dec	r18
     b88:	e2 f7       	brpl	.-8      	; 0xb82 <KEYPAD_getPressedKey+0x3c>
     b8a:	80 95       	com	r24
     b8c:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
     b8e:	82 e0       	ldi	r24, 0x02	; 2
     b90:	69 81       	ldd	r22, Y+1	; 0x01
     b92:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
     b96:	1a 82       	std	Y+2, r1	; 0x02
     b98:	1c c0       	rjmp	.+56     	; 0xbd2 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
     b9a:	82 e0       	ldi	r24, 0x02	; 2
     b9c:	6a 81       	ldd	r22, Y+2	; 0x02
     b9e:	0e 94 71 08 	call	0x10e2	; 0x10e2 <GPIO_readPin>
     ba2:	88 23       	and	r24, r24
     ba4:	99 f4       	brne	.+38     	; 0xbcc <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
     ba6:	8a 81       	ldd	r24, Y+2	; 0x02
     ba8:	88 2f       	mov	r24, r24
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	88 0f       	add	r24, r24
     bae:	99 1f       	adc	r25, r25
     bb0:	88 0f       	add	r24, r24
     bb2:	99 1f       	adc	r25, r25
     bb4:	98 2f       	mov	r25, r24
     bb6:	8b 81       	ldd	r24, Y+3	; 0x03
     bb8:	89 0f       	add	r24, r25
     bba:	8f 5f       	subi	r24, 0xFF	; 255
     bbc:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
     bc0:	0f 90       	pop	r0
     bc2:	0f 90       	pop	r0
     bc4:	0f 90       	pop	r0
     bc6:	cf 91       	pop	r28
     bc8:	df 91       	pop	r29
     bca:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
     bcc:	8a 81       	ldd	r24, Y+2	; 0x02
     bce:	8f 5f       	subi	r24, 0xFF	; 255
     bd0:	8a 83       	std	Y+2, r24	; 0x02
     bd2:	8a 81       	ldd	r24, Y+2	; 0x02
     bd4:	84 30       	cpi	r24, 0x04	; 4
     bd6:	08 f3       	brcs	.-62     	; 0xb9a <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
     bd8:	8b 81       	ldd	r24, Y+3	; 0x03
     bda:	8f 5f       	subi	r24, 0xFF	; 255
     bdc:	8b 83       	std	Y+3, r24	; 0x03
     bde:	8b 81       	ldd	r24, Y+3	; 0x03
     be0:	84 30       	cpi	r24, 0x04	; 4
     be2:	08 f4       	brcc	.+2      	; 0xbe6 <KEYPAD_getPressedKey+0xa0>
     be4:	b9 cf       	rjmp	.-142    	; 0xb58 <KEYPAD_getPressedKey+0x12>
     be6:	b6 cf       	rjmp	.-148    	; 0xb54 <KEYPAD_getPressedKey+0xe>

00000be8 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
     be8:	df 93       	push	r29
     bea:	cf 93       	push	r28
     bec:	00 d0       	rcall	.+0      	; 0xbee <KEYPAD_4x4_adjustKeyNumber+0x6>
     bee:	00 d0       	rcall	.+0      	; 0xbf0 <KEYPAD_4x4_adjustKeyNumber+0x8>
     bf0:	cd b7       	in	r28, 0x3d	; 61
     bf2:	de b7       	in	r29, 0x3e	; 62
     bf4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
     bf6:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
     bf8:	8a 81       	ldd	r24, Y+2	; 0x02
     bfa:	28 2f       	mov	r18, r24
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	3c 83       	std	Y+4, r19	; 0x04
     c00:	2b 83       	std	Y+3, r18	; 0x03
     c02:	8b 81       	ldd	r24, Y+3	; 0x03
     c04:	9c 81       	ldd	r25, Y+4	; 0x04
     c06:	88 30       	cpi	r24, 0x08	; 8
     c08:	91 05       	cpc	r25, r1
     c0a:	09 f4       	brne	.+2      	; 0xc0e <KEYPAD_4x4_adjustKeyNumber+0x26>
     c0c:	70 c0       	rjmp	.+224    	; 0xcee <KEYPAD_4x4_adjustKeyNumber+0x106>
     c0e:	2b 81       	ldd	r18, Y+3	; 0x03
     c10:	3c 81       	ldd	r19, Y+4	; 0x04
     c12:	29 30       	cpi	r18, 0x09	; 9
     c14:	31 05       	cpc	r19, r1
     c16:	5c f5       	brge	.+86     	; 0xc6e <KEYPAD_4x4_adjustKeyNumber+0x86>
     c18:	8b 81       	ldd	r24, Y+3	; 0x03
     c1a:	9c 81       	ldd	r25, Y+4	; 0x04
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	91 05       	cpc	r25, r1
     c20:	09 f4       	brne	.+2      	; 0xc24 <KEYPAD_4x4_adjustKeyNumber+0x3c>
     c22:	59 c0       	rjmp	.+178    	; 0xcd6 <KEYPAD_4x4_adjustKeyNumber+0xee>
     c24:	2b 81       	ldd	r18, Y+3	; 0x03
     c26:	3c 81       	ldd	r19, Y+4	; 0x04
     c28:	25 30       	cpi	r18, 0x05	; 5
     c2a:	31 05       	cpc	r19, r1
     c2c:	9c f4       	brge	.+38     	; 0xc54 <KEYPAD_4x4_adjustKeyNumber+0x6c>
     c2e:	8b 81       	ldd	r24, Y+3	; 0x03
     c30:	9c 81       	ldd	r25, Y+4	; 0x04
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	91 05       	cpc	r25, r1
     c36:	09 f4       	brne	.+2      	; 0xc3a <KEYPAD_4x4_adjustKeyNumber+0x52>
     c38:	48 c0       	rjmp	.+144    	; 0xcca <KEYPAD_4x4_adjustKeyNumber+0xe2>
     c3a:	2b 81       	ldd	r18, Y+3	; 0x03
     c3c:	3c 81       	ldd	r19, Y+4	; 0x04
     c3e:	23 30       	cpi	r18, 0x03	; 3
     c40:	31 05       	cpc	r19, r1
     c42:	0c f0       	brlt	.+2      	; 0xc46 <KEYPAD_4x4_adjustKeyNumber+0x5e>
     c44:	45 c0       	rjmp	.+138    	; 0xcd0 <KEYPAD_4x4_adjustKeyNumber+0xe8>
     c46:	8b 81       	ldd	r24, Y+3	; 0x03
     c48:	9c 81       	ldd	r25, Y+4	; 0x04
     c4a:	81 30       	cpi	r24, 0x01	; 1
     c4c:	91 05       	cpc	r25, r1
     c4e:	09 f4       	brne	.+2      	; 0xc52 <KEYPAD_4x4_adjustKeyNumber+0x6a>
     c50:	39 c0       	rjmp	.+114    	; 0xcc4 <KEYPAD_4x4_adjustKeyNumber+0xdc>
     c52:	67 c0       	rjmp	.+206    	; 0xd22 <KEYPAD_4x4_adjustKeyNumber+0x13a>
     c54:	2b 81       	ldd	r18, Y+3	; 0x03
     c56:	3c 81       	ldd	r19, Y+4	; 0x04
     c58:	26 30       	cpi	r18, 0x06	; 6
     c5a:	31 05       	cpc	r19, r1
     c5c:	09 f4       	brne	.+2      	; 0xc60 <KEYPAD_4x4_adjustKeyNumber+0x78>
     c5e:	41 c0       	rjmp	.+130    	; 0xce2 <KEYPAD_4x4_adjustKeyNumber+0xfa>
     c60:	8b 81       	ldd	r24, Y+3	; 0x03
     c62:	9c 81       	ldd	r25, Y+4	; 0x04
     c64:	87 30       	cpi	r24, 0x07	; 7
     c66:	91 05       	cpc	r25, r1
     c68:	0c f0       	brlt	.+2      	; 0xc6c <KEYPAD_4x4_adjustKeyNumber+0x84>
     c6a:	3e c0       	rjmp	.+124    	; 0xce8 <KEYPAD_4x4_adjustKeyNumber+0x100>
     c6c:	37 c0       	rjmp	.+110    	; 0xcdc <KEYPAD_4x4_adjustKeyNumber+0xf4>
     c6e:	2b 81       	ldd	r18, Y+3	; 0x03
     c70:	3c 81       	ldd	r19, Y+4	; 0x04
     c72:	2c 30       	cpi	r18, 0x0C	; 12
     c74:	31 05       	cpc	r19, r1
     c76:	09 f4       	brne	.+2      	; 0xc7a <KEYPAD_4x4_adjustKeyNumber+0x92>
     c78:	46 c0       	rjmp	.+140    	; 0xd06 <KEYPAD_4x4_adjustKeyNumber+0x11e>
     c7a:	8b 81       	ldd	r24, Y+3	; 0x03
     c7c:	9c 81       	ldd	r25, Y+4	; 0x04
     c7e:	8d 30       	cpi	r24, 0x0D	; 13
     c80:	91 05       	cpc	r25, r1
     c82:	5c f4       	brge	.+22     	; 0xc9a <KEYPAD_4x4_adjustKeyNumber+0xb2>
     c84:	2b 81       	ldd	r18, Y+3	; 0x03
     c86:	3c 81       	ldd	r19, Y+4	; 0x04
     c88:	2a 30       	cpi	r18, 0x0A	; 10
     c8a:	31 05       	cpc	r19, r1
     c8c:	b1 f1       	breq	.+108    	; 0xcfa <KEYPAD_4x4_adjustKeyNumber+0x112>
     c8e:	8b 81       	ldd	r24, Y+3	; 0x03
     c90:	9c 81       	ldd	r25, Y+4	; 0x04
     c92:	8b 30       	cpi	r24, 0x0B	; 11
     c94:	91 05       	cpc	r25, r1
     c96:	a4 f5       	brge	.+104    	; 0xd00 <KEYPAD_4x4_adjustKeyNumber+0x118>
     c98:	2d c0       	rjmp	.+90     	; 0xcf4 <KEYPAD_4x4_adjustKeyNumber+0x10c>
     c9a:	2b 81       	ldd	r18, Y+3	; 0x03
     c9c:	3c 81       	ldd	r19, Y+4	; 0x04
     c9e:	2e 30       	cpi	r18, 0x0E	; 14
     ca0:	31 05       	cpc	r19, r1
     ca2:	b9 f1       	breq	.+110    	; 0xd12 <KEYPAD_4x4_adjustKeyNumber+0x12a>
     ca4:	8b 81       	ldd	r24, Y+3	; 0x03
     ca6:	9c 81       	ldd	r25, Y+4	; 0x04
     ca8:	8e 30       	cpi	r24, 0x0E	; 14
     caa:	91 05       	cpc	r25, r1
     cac:	7c f1       	brlt	.+94     	; 0xd0c <KEYPAD_4x4_adjustKeyNumber+0x124>
     cae:	2b 81       	ldd	r18, Y+3	; 0x03
     cb0:	3c 81       	ldd	r19, Y+4	; 0x04
     cb2:	2f 30       	cpi	r18, 0x0F	; 15
     cb4:	31 05       	cpc	r19, r1
     cb6:	79 f1       	breq	.+94     	; 0xd16 <KEYPAD_4x4_adjustKeyNumber+0x12e>
     cb8:	8b 81       	ldd	r24, Y+3	; 0x03
     cba:	9c 81       	ldd	r25, Y+4	; 0x04
     cbc:	80 31       	cpi	r24, 0x10	; 16
     cbe:	91 05       	cpc	r25, r1
     cc0:	69 f1       	breq	.+90     	; 0xd1c <KEYPAD_4x4_adjustKeyNumber+0x134>
     cc2:	2f c0       	rjmp	.+94     	; 0xd22 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
     cc4:	87 e0       	ldi	r24, 0x07	; 7
     cc6:	89 83       	std	Y+1, r24	; 0x01
     cc8:	2e c0       	rjmp	.+92     	; 0xd26 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
     cca:	88 e0       	ldi	r24, 0x08	; 8
     ccc:	89 83       	std	Y+1, r24	; 0x01
     cce:	2b c0       	rjmp	.+86     	; 0xd26 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
     cd0:	89 e0       	ldi	r24, 0x09	; 9
     cd2:	89 83       	std	Y+1, r24	; 0x01
     cd4:	28 c0       	rjmp	.+80     	; 0xd26 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
     cd6:	85 e2       	ldi	r24, 0x25	; 37
     cd8:	89 83       	std	Y+1, r24	; 0x01
     cda:	25 c0       	rjmp	.+74     	; 0xd26 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
     cdc:	84 e0       	ldi	r24, 0x04	; 4
     cde:	89 83       	std	Y+1, r24	; 0x01
     ce0:	22 c0       	rjmp	.+68     	; 0xd26 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
     ce2:	85 e0       	ldi	r24, 0x05	; 5
     ce4:	89 83       	std	Y+1, r24	; 0x01
     ce6:	1f c0       	rjmp	.+62     	; 0xd26 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
     ce8:	86 e0       	ldi	r24, 0x06	; 6
     cea:	89 83       	std	Y+1, r24	; 0x01
     cec:	1c c0       	rjmp	.+56     	; 0xd26 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
     cee:	8a e2       	ldi	r24, 0x2A	; 42
     cf0:	89 83       	std	Y+1, r24	; 0x01
     cf2:	19 c0       	rjmp	.+50     	; 0xd26 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	89 83       	std	Y+1, r24	; 0x01
     cf8:	16 c0       	rjmp	.+44     	; 0xd26 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
     cfa:	82 e0       	ldi	r24, 0x02	; 2
     cfc:	89 83       	std	Y+1, r24	; 0x01
     cfe:	13 c0       	rjmp	.+38     	; 0xd26 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
     d00:	83 e0       	ldi	r24, 0x03	; 3
     d02:	89 83       	std	Y+1, r24	; 0x01
     d04:	10 c0       	rjmp	.+32     	; 0xd26 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
     d06:	8d e2       	ldi	r24, 0x2D	; 45
     d08:	89 83       	std	Y+1, r24	; 0x01
     d0a:	0d c0       	rjmp	.+26     	; 0xd26 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
     d0c:	8d e0       	ldi	r24, 0x0D	; 13
     d0e:	89 83       	std	Y+1, r24	; 0x01
     d10:	0a c0       	rjmp	.+20     	; 0xd26 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
     d12:	19 82       	std	Y+1, r1	; 0x01
     d14:	08 c0       	rjmp	.+16     	; 0xd26 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
     d16:	8d e3       	ldi	r24, 0x3D	; 61
     d18:	89 83       	std	Y+1, r24	; 0x01
     d1a:	05 c0       	rjmp	.+10     	; 0xd26 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
     d1c:	8b e2       	ldi	r24, 0x2B	; 43
     d1e:	89 83       	std	Y+1, r24	; 0x01
     d20:	02 c0       	rjmp	.+4      	; 0xd26 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
     d22:	8a 81       	ldd	r24, Y+2	; 0x02
     d24:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
     d26:	89 81       	ldd	r24, Y+1	; 0x01
} 
     d28:	0f 90       	pop	r0
     d2a:	0f 90       	pop	r0
     d2c:	0f 90       	pop	r0
     d2e:	0f 90       	pop	r0
     d30:	cf 91       	pop	r28
     d32:	df 91       	pop	r29
     d34:	08 95       	ret

00000d36 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     d36:	df 93       	push	r29
     d38:	cf 93       	push	r28
     d3a:	00 d0       	rcall	.+0      	; 0xd3c <GPIO_setupPinDirection+0x6>
     d3c:	00 d0       	rcall	.+0      	; 0xd3e <GPIO_setupPinDirection+0x8>
     d3e:	0f 92       	push	r0
     d40:	cd b7       	in	r28, 0x3d	; 61
     d42:	de b7       	in	r29, 0x3e	; 62
     d44:	89 83       	std	Y+1, r24	; 0x01
     d46:	6a 83       	std	Y+2, r22	; 0x02
     d48:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d4a:	8a 81       	ldd	r24, Y+2	; 0x02
     d4c:	88 30       	cpi	r24, 0x08	; 8
     d4e:	08 f0       	brcs	.+2      	; 0xd52 <GPIO_setupPinDirection+0x1c>
     d50:	d5 c0       	rjmp	.+426    	; 0xefc <GPIO_setupPinDirection+0x1c6>
     d52:	89 81       	ldd	r24, Y+1	; 0x01
     d54:	84 30       	cpi	r24, 0x04	; 4
     d56:	08 f0       	brcs	.+2      	; 0xd5a <GPIO_setupPinDirection+0x24>
     d58:	d1 c0       	rjmp	.+418    	; 0xefc <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     d5a:	89 81       	ldd	r24, Y+1	; 0x01
     d5c:	28 2f       	mov	r18, r24
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	3d 83       	std	Y+5, r19	; 0x05
     d62:	2c 83       	std	Y+4, r18	; 0x04
     d64:	8c 81       	ldd	r24, Y+4	; 0x04
     d66:	9d 81       	ldd	r25, Y+5	; 0x05
     d68:	81 30       	cpi	r24, 0x01	; 1
     d6a:	91 05       	cpc	r25, r1
     d6c:	09 f4       	brne	.+2      	; 0xd70 <GPIO_setupPinDirection+0x3a>
     d6e:	43 c0       	rjmp	.+134    	; 0xdf6 <GPIO_setupPinDirection+0xc0>
     d70:	2c 81       	ldd	r18, Y+4	; 0x04
     d72:	3d 81       	ldd	r19, Y+5	; 0x05
     d74:	22 30       	cpi	r18, 0x02	; 2
     d76:	31 05       	cpc	r19, r1
     d78:	2c f4       	brge	.+10     	; 0xd84 <GPIO_setupPinDirection+0x4e>
     d7a:	8c 81       	ldd	r24, Y+4	; 0x04
     d7c:	9d 81       	ldd	r25, Y+5	; 0x05
     d7e:	00 97       	sbiw	r24, 0x00	; 0
     d80:	71 f0       	breq	.+28     	; 0xd9e <GPIO_setupPinDirection+0x68>
     d82:	bc c0       	rjmp	.+376    	; 0xefc <GPIO_setupPinDirection+0x1c6>
     d84:	2c 81       	ldd	r18, Y+4	; 0x04
     d86:	3d 81       	ldd	r19, Y+5	; 0x05
     d88:	22 30       	cpi	r18, 0x02	; 2
     d8a:	31 05       	cpc	r19, r1
     d8c:	09 f4       	brne	.+2      	; 0xd90 <GPIO_setupPinDirection+0x5a>
     d8e:	5f c0       	rjmp	.+190    	; 0xe4e <GPIO_setupPinDirection+0x118>
     d90:	8c 81       	ldd	r24, Y+4	; 0x04
     d92:	9d 81       	ldd	r25, Y+5	; 0x05
     d94:	83 30       	cpi	r24, 0x03	; 3
     d96:	91 05       	cpc	r25, r1
     d98:	09 f4       	brne	.+2      	; 0xd9c <GPIO_setupPinDirection+0x66>
     d9a:	85 c0       	rjmp	.+266    	; 0xea6 <GPIO_setupPinDirection+0x170>
     d9c:	af c0       	rjmp	.+350    	; 0xefc <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     d9e:	8b 81       	ldd	r24, Y+3	; 0x03
     da0:	81 30       	cpi	r24, 0x01	; 1
     da2:	a1 f4       	brne	.+40     	; 0xdcc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     da4:	aa e3       	ldi	r26, 0x3A	; 58
     da6:	b0 e0       	ldi	r27, 0x00	; 0
     da8:	ea e3       	ldi	r30, 0x3A	; 58
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	48 2f       	mov	r20, r24
     db0:	8a 81       	ldd	r24, Y+2	; 0x02
     db2:	28 2f       	mov	r18, r24
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	02 2e       	mov	r0, r18
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <GPIO_setupPinDirection+0x8c>
     dbe:	88 0f       	add	r24, r24
     dc0:	99 1f       	adc	r25, r25
     dc2:	0a 94       	dec	r0
     dc4:	e2 f7       	brpl	.-8      	; 0xdbe <GPIO_setupPinDirection+0x88>
     dc6:	84 2b       	or	r24, r20
     dc8:	8c 93       	st	X, r24
     dca:	98 c0       	rjmp	.+304    	; 0xefc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     dcc:	aa e3       	ldi	r26, 0x3A	; 58
     dce:	b0 e0       	ldi	r27, 0x00	; 0
     dd0:	ea e3       	ldi	r30, 0x3A	; 58
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
     dd6:	48 2f       	mov	r20, r24
     dd8:	8a 81       	ldd	r24, Y+2	; 0x02
     dda:	28 2f       	mov	r18, r24
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	02 2e       	mov	r0, r18
     de4:	02 c0       	rjmp	.+4      	; 0xdea <GPIO_setupPinDirection+0xb4>
     de6:	88 0f       	add	r24, r24
     de8:	99 1f       	adc	r25, r25
     dea:	0a 94       	dec	r0
     dec:	e2 f7       	brpl	.-8      	; 0xde6 <GPIO_setupPinDirection+0xb0>
     dee:	80 95       	com	r24
     df0:	84 23       	and	r24, r20
     df2:	8c 93       	st	X, r24
     df4:	83 c0       	rjmp	.+262    	; 0xefc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     df6:	8b 81       	ldd	r24, Y+3	; 0x03
     df8:	81 30       	cpi	r24, 0x01	; 1
     dfa:	a1 f4       	brne	.+40     	; 0xe24 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     dfc:	a7 e3       	ldi	r26, 0x37	; 55
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	e7 e3       	ldi	r30, 0x37	; 55
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	48 2f       	mov	r20, r24
     e08:	8a 81       	ldd	r24, Y+2	; 0x02
     e0a:	28 2f       	mov	r18, r24
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	02 2e       	mov	r0, r18
     e14:	02 c0       	rjmp	.+4      	; 0xe1a <GPIO_setupPinDirection+0xe4>
     e16:	88 0f       	add	r24, r24
     e18:	99 1f       	adc	r25, r25
     e1a:	0a 94       	dec	r0
     e1c:	e2 f7       	brpl	.-8      	; 0xe16 <GPIO_setupPinDirection+0xe0>
     e1e:	84 2b       	or	r24, r20
     e20:	8c 93       	st	X, r24
     e22:	6c c0       	rjmp	.+216    	; 0xefc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     e24:	a7 e3       	ldi	r26, 0x37	; 55
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	e7 e3       	ldi	r30, 0x37	; 55
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	48 2f       	mov	r20, r24
     e30:	8a 81       	ldd	r24, Y+2	; 0x02
     e32:	28 2f       	mov	r18, r24
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	02 2e       	mov	r0, r18
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <GPIO_setupPinDirection+0x10c>
     e3e:	88 0f       	add	r24, r24
     e40:	99 1f       	adc	r25, r25
     e42:	0a 94       	dec	r0
     e44:	e2 f7       	brpl	.-8      	; 0xe3e <GPIO_setupPinDirection+0x108>
     e46:	80 95       	com	r24
     e48:	84 23       	and	r24, r20
     e4a:	8c 93       	st	X, r24
     e4c:	57 c0       	rjmp	.+174    	; 0xefc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     e4e:	8b 81       	ldd	r24, Y+3	; 0x03
     e50:	81 30       	cpi	r24, 0x01	; 1
     e52:	a1 f4       	brne	.+40     	; 0xe7c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     e54:	a4 e3       	ldi	r26, 0x34	; 52
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	e4 e3       	ldi	r30, 0x34	; 52
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	48 2f       	mov	r20, r24
     e60:	8a 81       	ldd	r24, Y+2	; 0x02
     e62:	28 2f       	mov	r18, r24
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	02 2e       	mov	r0, r18
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <GPIO_setupPinDirection+0x13c>
     e6e:	88 0f       	add	r24, r24
     e70:	99 1f       	adc	r25, r25
     e72:	0a 94       	dec	r0
     e74:	e2 f7       	brpl	.-8      	; 0xe6e <GPIO_setupPinDirection+0x138>
     e76:	84 2b       	or	r24, r20
     e78:	8c 93       	st	X, r24
     e7a:	40 c0       	rjmp	.+128    	; 0xefc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     e7c:	a4 e3       	ldi	r26, 0x34	; 52
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e4 e3       	ldi	r30, 0x34	; 52
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	48 2f       	mov	r20, r24
     e88:	8a 81       	ldd	r24, Y+2	; 0x02
     e8a:	28 2f       	mov	r18, r24
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	02 2e       	mov	r0, r18
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <GPIO_setupPinDirection+0x164>
     e96:	88 0f       	add	r24, r24
     e98:	99 1f       	adc	r25, r25
     e9a:	0a 94       	dec	r0
     e9c:	e2 f7       	brpl	.-8      	; 0xe96 <GPIO_setupPinDirection+0x160>
     e9e:	80 95       	com	r24
     ea0:	84 23       	and	r24, r20
     ea2:	8c 93       	st	X, r24
     ea4:	2b c0       	rjmp	.+86     	; 0xefc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     ea6:	8b 81       	ldd	r24, Y+3	; 0x03
     ea8:	81 30       	cpi	r24, 0x01	; 1
     eaa:	a1 f4       	brne	.+40     	; 0xed4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     eac:	a1 e3       	ldi	r26, 0x31	; 49
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	e1 e3       	ldi	r30, 0x31	; 49
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	48 2f       	mov	r20, r24
     eb8:	8a 81       	ldd	r24, Y+2	; 0x02
     eba:	28 2f       	mov	r18, r24
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	02 2e       	mov	r0, r18
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <GPIO_setupPinDirection+0x194>
     ec6:	88 0f       	add	r24, r24
     ec8:	99 1f       	adc	r25, r25
     eca:	0a 94       	dec	r0
     ecc:	e2 f7       	brpl	.-8      	; 0xec6 <GPIO_setupPinDirection+0x190>
     ece:	84 2b       	or	r24, r20
     ed0:	8c 93       	st	X, r24
     ed2:	14 c0       	rjmp	.+40     	; 0xefc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     ed4:	a1 e3       	ldi	r26, 0x31	; 49
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	e1 e3       	ldi	r30, 0x31	; 49
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	48 2f       	mov	r20, r24
     ee0:	8a 81       	ldd	r24, Y+2	; 0x02
     ee2:	28 2f       	mov	r18, r24
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	02 2e       	mov	r0, r18
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <GPIO_setupPinDirection+0x1bc>
     eee:	88 0f       	add	r24, r24
     ef0:	99 1f       	adc	r25, r25
     ef2:	0a 94       	dec	r0
     ef4:	e2 f7       	brpl	.-8      	; 0xeee <GPIO_setupPinDirection+0x1b8>
     ef6:	80 95       	com	r24
     ef8:	84 23       	and	r24, r20
     efa:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	0f 90       	pop	r0
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	cf 91       	pop	r28
     f08:	df 91       	pop	r29
     f0a:	08 95       	ret

00000f0c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     f0c:	df 93       	push	r29
     f0e:	cf 93       	push	r28
     f10:	00 d0       	rcall	.+0      	; 0xf12 <GPIO_writePin+0x6>
     f12:	00 d0       	rcall	.+0      	; 0xf14 <GPIO_writePin+0x8>
     f14:	0f 92       	push	r0
     f16:	cd b7       	in	r28, 0x3d	; 61
     f18:	de b7       	in	r29, 0x3e	; 62
     f1a:	89 83       	std	Y+1, r24	; 0x01
     f1c:	6a 83       	std	Y+2, r22	; 0x02
     f1e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f20:	8a 81       	ldd	r24, Y+2	; 0x02
     f22:	88 30       	cpi	r24, 0x08	; 8
     f24:	08 f0       	brcs	.+2      	; 0xf28 <GPIO_writePin+0x1c>
     f26:	d5 c0       	rjmp	.+426    	; 0x10d2 <GPIO_writePin+0x1c6>
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	84 30       	cpi	r24, 0x04	; 4
     f2c:	08 f0       	brcs	.+2      	; 0xf30 <GPIO_writePin+0x24>
     f2e:	d1 c0       	rjmp	.+418    	; 0x10d2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     f30:	89 81       	ldd	r24, Y+1	; 0x01
     f32:	28 2f       	mov	r18, r24
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	3d 83       	std	Y+5, r19	; 0x05
     f38:	2c 83       	std	Y+4, r18	; 0x04
     f3a:	8c 81       	ldd	r24, Y+4	; 0x04
     f3c:	9d 81       	ldd	r25, Y+5	; 0x05
     f3e:	81 30       	cpi	r24, 0x01	; 1
     f40:	91 05       	cpc	r25, r1
     f42:	09 f4       	brne	.+2      	; 0xf46 <GPIO_writePin+0x3a>
     f44:	43 c0       	rjmp	.+134    	; 0xfcc <GPIO_writePin+0xc0>
     f46:	2c 81       	ldd	r18, Y+4	; 0x04
     f48:	3d 81       	ldd	r19, Y+5	; 0x05
     f4a:	22 30       	cpi	r18, 0x02	; 2
     f4c:	31 05       	cpc	r19, r1
     f4e:	2c f4       	brge	.+10     	; 0xf5a <GPIO_writePin+0x4e>
     f50:	8c 81       	ldd	r24, Y+4	; 0x04
     f52:	9d 81       	ldd	r25, Y+5	; 0x05
     f54:	00 97       	sbiw	r24, 0x00	; 0
     f56:	71 f0       	breq	.+28     	; 0xf74 <GPIO_writePin+0x68>
     f58:	bc c0       	rjmp	.+376    	; 0x10d2 <GPIO_writePin+0x1c6>
     f5a:	2c 81       	ldd	r18, Y+4	; 0x04
     f5c:	3d 81       	ldd	r19, Y+5	; 0x05
     f5e:	22 30       	cpi	r18, 0x02	; 2
     f60:	31 05       	cpc	r19, r1
     f62:	09 f4       	brne	.+2      	; 0xf66 <GPIO_writePin+0x5a>
     f64:	5f c0       	rjmp	.+190    	; 0x1024 <GPIO_writePin+0x118>
     f66:	8c 81       	ldd	r24, Y+4	; 0x04
     f68:	9d 81       	ldd	r25, Y+5	; 0x05
     f6a:	83 30       	cpi	r24, 0x03	; 3
     f6c:	91 05       	cpc	r25, r1
     f6e:	09 f4       	brne	.+2      	; 0xf72 <GPIO_writePin+0x66>
     f70:	85 c0       	rjmp	.+266    	; 0x107c <GPIO_writePin+0x170>
     f72:	af c0       	rjmp	.+350    	; 0x10d2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     f74:	8b 81       	ldd	r24, Y+3	; 0x03
     f76:	81 30       	cpi	r24, 0x01	; 1
     f78:	a1 f4       	brne	.+40     	; 0xfa2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     f7a:	ab e3       	ldi	r26, 0x3B	; 59
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	eb e3       	ldi	r30, 0x3B	; 59
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	48 2f       	mov	r20, r24
     f86:	8a 81       	ldd	r24, Y+2	; 0x02
     f88:	28 2f       	mov	r18, r24
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	02 2e       	mov	r0, r18
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <GPIO_writePin+0x8c>
     f94:	88 0f       	add	r24, r24
     f96:	99 1f       	adc	r25, r25
     f98:	0a 94       	dec	r0
     f9a:	e2 f7       	brpl	.-8      	; 0xf94 <GPIO_writePin+0x88>
     f9c:	84 2b       	or	r24, r20
     f9e:	8c 93       	st	X, r24
     fa0:	98 c0       	rjmp	.+304    	; 0x10d2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     fa2:	ab e3       	ldi	r26, 0x3B	; 59
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	eb e3       	ldi	r30, 0x3B	; 59
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	48 2f       	mov	r20, r24
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	02 2e       	mov	r0, r18
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <GPIO_writePin+0xb4>
     fbc:	88 0f       	add	r24, r24
     fbe:	99 1f       	adc	r25, r25
     fc0:	0a 94       	dec	r0
     fc2:	e2 f7       	brpl	.-8      	; 0xfbc <GPIO_writePin+0xb0>
     fc4:	80 95       	com	r24
     fc6:	84 23       	and	r24, r20
     fc8:	8c 93       	st	X, r24
     fca:	83 c0       	rjmp	.+262    	; 0x10d2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     fcc:	8b 81       	ldd	r24, Y+3	; 0x03
     fce:	81 30       	cpi	r24, 0x01	; 1
     fd0:	a1 f4       	brne	.+40     	; 0xffa <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     fd2:	a8 e3       	ldi	r26, 0x38	; 56
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e8 e3       	ldi	r30, 0x38	; 56
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	48 2f       	mov	r20, r24
     fde:	8a 81       	ldd	r24, Y+2	; 0x02
     fe0:	28 2f       	mov	r18, r24
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	02 2e       	mov	r0, r18
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <GPIO_writePin+0xe4>
     fec:	88 0f       	add	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	0a 94       	dec	r0
     ff2:	e2 f7       	brpl	.-8      	; 0xfec <GPIO_writePin+0xe0>
     ff4:	84 2b       	or	r24, r20
     ff6:	8c 93       	st	X, r24
     ff8:	6c c0       	rjmp	.+216    	; 0x10d2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     ffa:	a8 e3       	ldi	r26, 0x38	; 56
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e8 e3       	ldi	r30, 0x38	; 56
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	48 2f       	mov	r20, r24
    1006:	8a 81       	ldd	r24, Y+2	; 0x02
    1008:	28 2f       	mov	r18, r24
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	02 2e       	mov	r0, r18
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <GPIO_writePin+0x10c>
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	0a 94       	dec	r0
    101a:	e2 f7       	brpl	.-8      	; 0x1014 <GPIO_writePin+0x108>
    101c:	80 95       	com	r24
    101e:	84 23       	and	r24, r20
    1020:	8c 93       	st	X, r24
    1022:	57 c0       	rjmp	.+174    	; 0x10d2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1024:	8b 81       	ldd	r24, Y+3	; 0x03
    1026:	81 30       	cpi	r24, 0x01	; 1
    1028:	a1 f4       	brne	.+40     	; 0x1052 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    102a:	a5 e3       	ldi	r26, 0x35	; 53
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	e5 e3       	ldi	r30, 0x35	; 53
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	48 2f       	mov	r20, r24
    1036:	8a 81       	ldd	r24, Y+2	; 0x02
    1038:	28 2f       	mov	r18, r24
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	02 2e       	mov	r0, r18
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <GPIO_writePin+0x13c>
    1044:	88 0f       	add	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	0a 94       	dec	r0
    104a:	e2 f7       	brpl	.-8      	; 0x1044 <GPIO_writePin+0x138>
    104c:	84 2b       	or	r24, r20
    104e:	8c 93       	st	X, r24
    1050:	40 c0       	rjmp	.+128    	; 0x10d2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1052:	a5 e3       	ldi	r26, 0x35	; 53
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	e5 e3       	ldi	r30, 0x35	; 53
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	48 2f       	mov	r20, r24
    105e:	8a 81       	ldd	r24, Y+2	; 0x02
    1060:	28 2f       	mov	r18, r24
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	02 2e       	mov	r0, r18
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <GPIO_writePin+0x164>
    106c:	88 0f       	add	r24, r24
    106e:	99 1f       	adc	r25, r25
    1070:	0a 94       	dec	r0
    1072:	e2 f7       	brpl	.-8      	; 0x106c <GPIO_writePin+0x160>
    1074:	80 95       	com	r24
    1076:	84 23       	and	r24, r20
    1078:	8c 93       	st	X, r24
    107a:	2b c0       	rjmp	.+86     	; 0x10d2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    107c:	8b 81       	ldd	r24, Y+3	; 0x03
    107e:	81 30       	cpi	r24, 0x01	; 1
    1080:	a1 f4       	brne	.+40     	; 0x10aa <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1082:	a2 e3       	ldi	r26, 0x32	; 50
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e2 e3       	ldi	r30, 0x32	; 50
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	48 2f       	mov	r20, r24
    108e:	8a 81       	ldd	r24, Y+2	; 0x02
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	02 2e       	mov	r0, r18
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <GPIO_writePin+0x194>
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	0a 94       	dec	r0
    10a2:	e2 f7       	brpl	.-8      	; 0x109c <GPIO_writePin+0x190>
    10a4:	84 2b       	or	r24, r20
    10a6:	8c 93       	st	X, r24
    10a8:	14 c0       	rjmp	.+40     	; 0x10d2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    10aa:	a2 e3       	ldi	r26, 0x32	; 50
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	e2 e3       	ldi	r30, 0x32	; 50
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	48 2f       	mov	r20, r24
    10b6:	8a 81       	ldd	r24, Y+2	; 0x02
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	02 2e       	mov	r0, r18
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <GPIO_writePin+0x1bc>
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	0a 94       	dec	r0
    10ca:	e2 f7       	brpl	.-8      	; 0x10c4 <GPIO_writePin+0x1b8>
    10cc:	80 95       	com	r24
    10ce:	84 23       	and	r24, r20
    10d0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    10d2:	0f 90       	pop	r0
    10d4:	0f 90       	pop	r0
    10d6:	0f 90       	pop	r0
    10d8:	0f 90       	pop	r0
    10da:	0f 90       	pop	r0
    10dc:	cf 91       	pop	r28
    10de:	df 91       	pop	r29
    10e0:	08 95       	ret

000010e2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    10e2:	df 93       	push	r29
    10e4:	cf 93       	push	r28
    10e6:	00 d0       	rcall	.+0      	; 0x10e8 <GPIO_readPin+0x6>
    10e8:	00 d0       	rcall	.+0      	; 0x10ea <GPIO_readPin+0x8>
    10ea:	0f 92       	push	r0
    10ec:	cd b7       	in	r28, 0x3d	; 61
    10ee:	de b7       	in	r29, 0x3e	; 62
    10f0:	8a 83       	std	Y+2, r24	; 0x02
    10f2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    10f4:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    10f6:	8b 81       	ldd	r24, Y+3	; 0x03
    10f8:	88 30       	cpi	r24, 0x08	; 8
    10fa:	08 f0       	brcs	.+2      	; 0x10fe <GPIO_readPin+0x1c>
    10fc:	84 c0       	rjmp	.+264    	; 0x1206 <GPIO_readPin+0x124>
    10fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1100:	84 30       	cpi	r24, 0x04	; 4
    1102:	08 f0       	brcs	.+2      	; 0x1106 <GPIO_readPin+0x24>
    1104:	80 c0       	rjmp	.+256    	; 0x1206 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1106:	8a 81       	ldd	r24, Y+2	; 0x02
    1108:	28 2f       	mov	r18, r24
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	3d 83       	std	Y+5, r19	; 0x05
    110e:	2c 83       	std	Y+4, r18	; 0x04
    1110:	4c 81       	ldd	r20, Y+4	; 0x04
    1112:	5d 81       	ldd	r21, Y+5	; 0x05
    1114:	41 30       	cpi	r20, 0x01	; 1
    1116:	51 05       	cpc	r21, r1
    1118:	79 f1       	breq	.+94     	; 0x1178 <GPIO_readPin+0x96>
    111a:	8c 81       	ldd	r24, Y+4	; 0x04
    111c:	9d 81       	ldd	r25, Y+5	; 0x05
    111e:	82 30       	cpi	r24, 0x02	; 2
    1120:	91 05       	cpc	r25, r1
    1122:	34 f4       	brge	.+12     	; 0x1130 <GPIO_readPin+0x4e>
    1124:	2c 81       	ldd	r18, Y+4	; 0x04
    1126:	3d 81       	ldd	r19, Y+5	; 0x05
    1128:	21 15       	cp	r18, r1
    112a:	31 05       	cpc	r19, r1
    112c:	69 f0       	breq	.+26     	; 0x1148 <GPIO_readPin+0x66>
    112e:	6b c0       	rjmp	.+214    	; 0x1206 <GPIO_readPin+0x124>
    1130:	4c 81       	ldd	r20, Y+4	; 0x04
    1132:	5d 81       	ldd	r21, Y+5	; 0x05
    1134:	42 30       	cpi	r20, 0x02	; 2
    1136:	51 05       	cpc	r21, r1
    1138:	b9 f1       	breq	.+110    	; 0x11a8 <GPIO_readPin+0xc6>
    113a:	8c 81       	ldd	r24, Y+4	; 0x04
    113c:	9d 81       	ldd	r25, Y+5	; 0x05
    113e:	83 30       	cpi	r24, 0x03	; 3
    1140:	91 05       	cpc	r25, r1
    1142:	09 f4       	brne	.+2      	; 0x1146 <GPIO_readPin+0x64>
    1144:	49 c0       	rjmp	.+146    	; 0x11d8 <GPIO_readPin+0xf6>
    1146:	5f c0       	rjmp	.+190    	; 0x1206 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1148:	e9 e3       	ldi	r30, 0x39	; 57
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	28 2f       	mov	r18, r24
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	8b 81       	ldd	r24, Y+3	; 0x03
    1154:	88 2f       	mov	r24, r24
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	a9 01       	movw	r20, r18
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <GPIO_readPin+0x7e>
    115c:	55 95       	asr	r21
    115e:	47 95       	ror	r20
    1160:	8a 95       	dec	r24
    1162:	e2 f7       	brpl	.-8      	; 0x115c <GPIO_readPin+0x7a>
    1164:	ca 01       	movw	r24, r20
    1166:	81 70       	andi	r24, 0x01	; 1
    1168:	90 70       	andi	r25, 0x00	; 0
    116a:	88 23       	and	r24, r24
    116c:	19 f0       	breq	.+6      	; 0x1174 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	89 83       	std	Y+1, r24	; 0x01
    1172:	49 c0       	rjmp	.+146    	; 0x1206 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1174:	19 82       	std	Y+1, r1	; 0x01
    1176:	47 c0       	rjmp	.+142    	; 0x1206 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1178:	e6 e3       	ldi	r30, 0x36	; 54
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	28 2f       	mov	r18, r24
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	8b 81       	ldd	r24, Y+3	; 0x03
    1184:	88 2f       	mov	r24, r24
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	a9 01       	movw	r20, r18
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <GPIO_readPin+0xae>
    118c:	55 95       	asr	r21
    118e:	47 95       	ror	r20
    1190:	8a 95       	dec	r24
    1192:	e2 f7       	brpl	.-8      	; 0x118c <GPIO_readPin+0xaa>
    1194:	ca 01       	movw	r24, r20
    1196:	81 70       	andi	r24, 0x01	; 1
    1198:	90 70       	andi	r25, 0x00	; 0
    119a:	88 23       	and	r24, r24
    119c:	19 f0       	breq	.+6      	; 0x11a4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	89 83       	std	Y+1, r24	; 0x01
    11a2:	31 c0       	rjmp	.+98     	; 0x1206 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    11a4:	19 82       	std	Y+1, r1	; 0x01
    11a6:	2f c0       	rjmp	.+94     	; 0x1206 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    11a8:	e3 e3       	ldi	r30, 0x33	; 51
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	28 2f       	mov	r18, r24
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	8b 81       	ldd	r24, Y+3	; 0x03
    11b4:	88 2f       	mov	r24, r24
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	a9 01       	movw	r20, r18
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <GPIO_readPin+0xde>
    11bc:	55 95       	asr	r21
    11be:	47 95       	ror	r20
    11c0:	8a 95       	dec	r24
    11c2:	e2 f7       	brpl	.-8      	; 0x11bc <GPIO_readPin+0xda>
    11c4:	ca 01       	movw	r24, r20
    11c6:	81 70       	andi	r24, 0x01	; 1
    11c8:	90 70       	andi	r25, 0x00	; 0
    11ca:	88 23       	and	r24, r24
    11cc:	19 f0       	breq	.+6      	; 0x11d4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	89 83       	std	Y+1, r24	; 0x01
    11d2:	19 c0       	rjmp	.+50     	; 0x1206 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    11d4:	19 82       	std	Y+1, r1	; 0x01
    11d6:	17 c0       	rjmp	.+46     	; 0x1206 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    11d8:	e0 e3       	ldi	r30, 0x30	; 48
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	28 2f       	mov	r18, r24
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	8b 81       	ldd	r24, Y+3	; 0x03
    11e4:	88 2f       	mov	r24, r24
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	a9 01       	movw	r20, r18
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <GPIO_readPin+0x10e>
    11ec:	55 95       	asr	r21
    11ee:	47 95       	ror	r20
    11f0:	8a 95       	dec	r24
    11f2:	e2 f7       	brpl	.-8      	; 0x11ec <GPIO_readPin+0x10a>
    11f4:	ca 01       	movw	r24, r20
    11f6:	81 70       	andi	r24, 0x01	; 1
    11f8:	90 70       	andi	r25, 0x00	; 0
    11fa:	88 23       	and	r24, r24
    11fc:	19 f0       	breq	.+6      	; 0x1204 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	89 83       	std	Y+1, r24	; 0x01
    1202:	01 c0       	rjmp	.+2      	; 0x1206 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1204:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1206:	89 81       	ldd	r24, Y+1	; 0x01
}
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	cf 91       	pop	r28
    1214:	df 91       	pop	r29
    1216:	08 95       	ret

00001218 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1218:	df 93       	push	r29
    121a:	cf 93       	push	r28
    121c:	00 d0       	rcall	.+0      	; 0x121e <GPIO_setupPortDirection+0x6>
    121e:	00 d0       	rcall	.+0      	; 0x1220 <GPIO_setupPortDirection+0x8>
    1220:	cd b7       	in	r28, 0x3d	; 61
    1222:	de b7       	in	r29, 0x3e	; 62
    1224:	89 83       	std	Y+1, r24	; 0x01
    1226:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1228:	89 81       	ldd	r24, Y+1	; 0x01
    122a:	84 30       	cpi	r24, 0x04	; 4
    122c:	90 f5       	brcc	.+100    	; 0x1292 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    122e:	89 81       	ldd	r24, Y+1	; 0x01
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	3c 83       	std	Y+4, r19	; 0x04
    1236:	2b 83       	std	Y+3, r18	; 0x03
    1238:	8b 81       	ldd	r24, Y+3	; 0x03
    123a:	9c 81       	ldd	r25, Y+4	; 0x04
    123c:	81 30       	cpi	r24, 0x01	; 1
    123e:	91 05       	cpc	r25, r1
    1240:	d1 f0       	breq	.+52     	; 0x1276 <GPIO_setupPortDirection+0x5e>
    1242:	2b 81       	ldd	r18, Y+3	; 0x03
    1244:	3c 81       	ldd	r19, Y+4	; 0x04
    1246:	22 30       	cpi	r18, 0x02	; 2
    1248:	31 05       	cpc	r19, r1
    124a:	2c f4       	brge	.+10     	; 0x1256 <GPIO_setupPortDirection+0x3e>
    124c:	8b 81       	ldd	r24, Y+3	; 0x03
    124e:	9c 81       	ldd	r25, Y+4	; 0x04
    1250:	00 97       	sbiw	r24, 0x00	; 0
    1252:	61 f0       	breq	.+24     	; 0x126c <GPIO_setupPortDirection+0x54>
    1254:	1e c0       	rjmp	.+60     	; 0x1292 <GPIO_setupPortDirection+0x7a>
    1256:	2b 81       	ldd	r18, Y+3	; 0x03
    1258:	3c 81       	ldd	r19, Y+4	; 0x04
    125a:	22 30       	cpi	r18, 0x02	; 2
    125c:	31 05       	cpc	r19, r1
    125e:	81 f0       	breq	.+32     	; 0x1280 <GPIO_setupPortDirection+0x68>
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	9c 81       	ldd	r25, Y+4	; 0x04
    1264:	83 30       	cpi	r24, 0x03	; 3
    1266:	91 05       	cpc	r25, r1
    1268:	81 f0       	breq	.+32     	; 0x128a <GPIO_setupPortDirection+0x72>
    126a:	13 c0       	rjmp	.+38     	; 0x1292 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    126c:	ea e3       	ldi	r30, 0x3A	; 58
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	8a 81       	ldd	r24, Y+2	; 0x02
    1272:	80 83       	st	Z, r24
    1274:	0e c0       	rjmp	.+28     	; 0x1292 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1276:	e7 e3       	ldi	r30, 0x37	; 55
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	80 83       	st	Z, r24
    127e:	09 c0       	rjmp	.+18     	; 0x1292 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1280:	e4 e3       	ldi	r30, 0x34	; 52
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	8a 81       	ldd	r24, Y+2	; 0x02
    1286:	80 83       	st	Z, r24
    1288:	04 c0       	rjmp	.+8      	; 0x1292 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    128a:	e1 e3       	ldi	r30, 0x31	; 49
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	80 83       	st	Z, r24
			break;
		}
	}
}
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
    1296:	0f 90       	pop	r0
    1298:	0f 90       	pop	r0
    129a:	cf 91       	pop	r28
    129c:	df 91       	pop	r29
    129e:	08 95       	ret

000012a0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    12a0:	df 93       	push	r29
    12a2:	cf 93       	push	r28
    12a4:	00 d0       	rcall	.+0      	; 0x12a6 <GPIO_writePort+0x6>
    12a6:	00 d0       	rcall	.+0      	; 0x12a8 <GPIO_writePort+0x8>
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62
    12ac:	89 83       	std	Y+1, r24	; 0x01
    12ae:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
    12b2:	84 30       	cpi	r24, 0x04	; 4
    12b4:	90 f5       	brcc	.+100    	; 0x131a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    12b6:	89 81       	ldd	r24, Y+1	; 0x01
    12b8:	28 2f       	mov	r18, r24
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	3c 83       	std	Y+4, r19	; 0x04
    12be:	2b 83       	std	Y+3, r18	; 0x03
    12c0:	8b 81       	ldd	r24, Y+3	; 0x03
    12c2:	9c 81       	ldd	r25, Y+4	; 0x04
    12c4:	81 30       	cpi	r24, 0x01	; 1
    12c6:	91 05       	cpc	r25, r1
    12c8:	d1 f0       	breq	.+52     	; 0x12fe <GPIO_writePort+0x5e>
    12ca:	2b 81       	ldd	r18, Y+3	; 0x03
    12cc:	3c 81       	ldd	r19, Y+4	; 0x04
    12ce:	22 30       	cpi	r18, 0x02	; 2
    12d0:	31 05       	cpc	r19, r1
    12d2:	2c f4       	brge	.+10     	; 0x12de <GPIO_writePort+0x3e>
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	9c 81       	ldd	r25, Y+4	; 0x04
    12d8:	00 97       	sbiw	r24, 0x00	; 0
    12da:	61 f0       	breq	.+24     	; 0x12f4 <GPIO_writePort+0x54>
    12dc:	1e c0       	rjmp	.+60     	; 0x131a <GPIO_writePort+0x7a>
    12de:	2b 81       	ldd	r18, Y+3	; 0x03
    12e0:	3c 81       	ldd	r19, Y+4	; 0x04
    12e2:	22 30       	cpi	r18, 0x02	; 2
    12e4:	31 05       	cpc	r19, r1
    12e6:	81 f0       	breq	.+32     	; 0x1308 <GPIO_writePort+0x68>
    12e8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ea:	9c 81       	ldd	r25, Y+4	; 0x04
    12ec:	83 30       	cpi	r24, 0x03	; 3
    12ee:	91 05       	cpc	r25, r1
    12f0:	81 f0       	breq	.+32     	; 0x1312 <GPIO_writePort+0x72>
    12f2:	13 c0       	rjmp	.+38     	; 0x131a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    12f4:	eb e3       	ldi	r30, 0x3B	; 59
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	8a 81       	ldd	r24, Y+2	; 0x02
    12fa:	80 83       	st	Z, r24
    12fc:	0e c0       	rjmp	.+28     	; 0x131a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    12fe:	e8 e3       	ldi	r30, 0x38	; 56
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	8a 81       	ldd	r24, Y+2	; 0x02
    1304:	80 83       	st	Z, r24
    1306:	09 c0       	rjmp	.+18     	; 0x131a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1308:	e5 e3       	ldi	r30, 0x35	; 53
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	80 83       	st	Z, r24
    1310:	04 c0       	rjmp	.+8      	; 0x131a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1312:	e2 e3       	ldi	r30, 0x32	; 50
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	8a 81       	ldd	r24, Y+2	; 0x02
    1318:	80 83       	st	Z, r24
			break;
		}
	}
}
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	0f 90       	pop	r0
    1322:	cf 91       	pop	r28
    1324:	df 91       	pop	r29
    1326:	08 95       	ret

00001328 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1328:	df 93       	push	r29
    132a:	cf 93       	push	r28
    132c:	00 d0       	rcall	.+0      	; 0x132e <GPIO_readPort+0x6>
    132e:	00 d0       	rcall	.+0      	; 0x1330 <GPIO_readPort+0x8>
    1330:	cd b7       	in	r28, 0x3d	; 61
    1332:	de b7       	in	r29, 0x3e	; 62
    1334:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1336:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	84 30       	cpi	r24, 0x04	; 4
    133c:	90 f5       	brcc	.+100    	; 0x13a2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    133e:	8a 81       	ldd	r24, Y+2	; 0x02
    1340:	28 2f       	mov	r18, r24
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	3c 83       	std	Y+4, r19	; 0x04
    1346:	2b 83       	std	Y+3, r18	; 0x03
    1348:	8b 81       	ldd	r24, Y+3	; 0x03
    134a:	9c 81       	ldd	r25, Y+4	; 0x04
    134c:	81 30       	cpi	r24, 0x01	; 1
    134e:	91 05       	cpc	r25, r1
    1350:	d1 f0       	breq	.+52     	; 0x1386 <GPIO_readPort+0x5e>
    1352:	2b 81       	ldd	r18, Y+3	; 0x03
    1354:	3c 81       	ldd	r19, Y+4	; 0x04
    1356:	22 30       	cpi	r18, 0x02	; 2
    1358:	31 05       	cpc	r19, r1
    135a:	2c f4       	brge	.+10     	; 0x1366 <GPIO_readPort+0x3e>
    135c:	8b 81       	ldd	r24, Y+3	; 0x03
    135e:	9c 81       	ldd	r25, Y+4	; 0x04
    1360:	00 97       	sbiw	r24, 0x00	; 0
    1362:	61 f0       	breq	.+24     	; 0x137c <GPIO_readPort+0x54>
    1364:	1e c0       	rjmp	.+60     	; 0x13a2 <GPIO_readPort+0x7a>
    1366:	2b 81       	ldd	r18, Y+3	; 0x03
    1368:	3c 81       	ldd	r19, Y+4	; 0x04
    136a:	22 30       	cpi	r18, 0x02	; 2
    136c:	31 05       	cpc	r19, r1
    136e:	81 f0       	breq	.+32     	; 0x1390 <GPIO_readPort+0x68>
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	9c 81       	ldd	r25, Y+4	; 0x04
    1374:	83 30       	cpi	r24, 0x03	; 3
    1376:	91 05       	cpc	r25, r1
    1378:	81 f0       	breq	.+32     	; 0x139a <GPIO_readPort+0x72>
    137a:	13 c0       	rjmp	.+38     	; 0x13a2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    137c:	e9 e3       	ldi	r30, 0x39	; 57
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	89 83       	std	Y+1, r24	; 0x01
    1384:	0e c0       	rjmp	.+28     	; 0x13a2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1386:	e6 e3       	ldi	r30, 0x36	; 54
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	89 83       	std	Y+1, r24	; 0x01
    138e:	09 c0       	rjmp	.+18     	; 0x13a2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1390:	e3 e3       	ldi	r30, 0x33	; 51
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	89 83       	std	Y+1, r24	; 0x01
    1398:	04 c0       	rjmp	.+8      	; 0x13a2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    139a:	e0 e3       	ldi	r30, 0x30	; 48
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    13a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    13a4:	0f 90       	pop	r0
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	cf 91       	pop	r28
    13ae:	df 91       	pop	r29
    13b0:	08 95       	ret

000013b2 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    13b2:	df 93       	push	r29
    13b4:	cf 93       	push	r28
    13b6:	cd b7       	in	r28, 0x3d	; 61
    13b8:	de b7       	in	r29, 0x3e	; 62
    13ba:	2e 97       	sbiw	r28, 0x0e	; 14
    13bc:	0f b6       	in	r0, 0x3f	; 63
    13be:	f8 94       	cli
    13c0:	de bf       	out	0x3e, r29	; 62
    13c2:	0f be       	out	0x3f, r0	; 63
    13c4:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS , E,RW pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	60 e0       	ldi	r22, 0x00	; 0
    13ca:	41 e0       	ldi	r20, 0x01	; 1
    13cc:	0e 94 9b 06 	call	0xd36	; 0xd36 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	61 e0       	ldi	r22, 0x01	; 1
    13d4:	41 e0       	ldi	r20, 0x01	; 1
    13d6:	0e 94 9b 06 	call	0xd36	; 0xd36 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	62 e0       	ldi	r22, 0x02	; 2
    13de:	41 e0       	ldi	r20, 0x01	; 1
    13e0:	0e 94 9b 06 	call	0xd36	; 0xd36 <GPIO_setupPinDirection>
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	a0 ea       	ldi	r26, 0xA0	; 160
    13ea:	b1 e4       	ldi	r27, 0x41	; 65
    13ec:	8b 87       	std	Y+11, r24	; 0x0b
    13ee:	9c 87       	std	Y+12, r25	; 0x0c
    13f0:	ad 87       	std	Y+13, r26	; 0x0d
    13f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    13f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    13f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    13fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	4a ef       	ldi	r20, 0xFA	; 250
    1402:	54 e4       	ldi	r21, 0x44	; 68
    1404:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1408:	dc 01       	movw	r26, r24
    140a:	cb 01       	movw	r24, r22
    140c:	8f 83       	std	Y+7, r24	; 0x07
    140e:	98 87       	std	Y+8, r25	; 0x08
    1410:	a9 87       	std	Y+9, r26	; 0x09
    1412:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1414:	6f 81       	ldd	r22, Y+7	; 0x07
    1416:	78 85       	ldd	r23, Y+8	; 0x08
    1418:	89 85       	ldd	r24, Y+9	; 0x09
    141a:	9a 85       	ldd	r25, Y+10	; 0x0a
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	40 e8       	ldi	r20, 0x80	; 128
    1422:	5f e3       	ldi	r21, 0x3F	; 63
    1424:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1428:	88 23       	and	r24, r24
    142a:	2c f4       	brge	.+10     	; 0x1436 <LCD_init+0x84>
		__ticks = 1;
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	9e 83       	std	Y+6, r25	; 0x06
    1432:	8d 83       	std	Y+5, r24	; 0x05
    1434:	3f c0       	rjmp	.+126    	; 0x14b4 <LCD_init+0x102>
	else if (__tmp > 65535)
    1436:	6f 81       	ldd	r22, Y+7	; 0x07
    1438:	78 85       	ldd	r23, Y+8	; 0x08
    143a:	89 85       	ldd	r24, Y+9	; 0x09
    143c:	9a 85       	ldd	r25, Y+10	; 0x0a
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	3f ef       	ldi	r19, 0xFF	; 255
    1442:	4f e7       	ldi	r20, 0x7F	; 127
    1444:	57 e4       	ldi	r21, 0x47	; 71
    1446:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    144a:	18 16       	cp	r1, r24
    144c:	4c f5       	brge	.+82     	; 0x14a0 <LCD_init+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    144e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1450:	7c 85       	ldd	r23, Y+12	; 0x0c
    1452:	8d 85       	ldd	r24, Y+13	; 0x0d
    1454:	9e 85       	ldd	r25, Y+14	; 0x0e
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	40 e2       	ldi	r20, 0x20	; 32
    145c:	51 e4       	ldi	r21, 0x41	; 65
    145e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	bc 01       	movw	r22, r24
    1468:	cd 01       	movw	r24, r26
    146a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    146e:	dc 01       	movw	r26, r24
    1470:	cb 01       	movw	r24, r22
    1472:	9e 83       	std	Y+6, r25	; 0x06
    1474:	8d 83       	std	Y+5, r24	; 0x05
    1476:	0f c0       	rjmp	.+30     	; 0x1496 <LCD_init+0xe4>
    1478:	88 ec       	ldi	r24, 0xC8	; 200
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	9c 83       	std	Y+4, r25	; 0x04
    147e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1480:	8b 81       	ldd	r24, Y+3	; 0x03
    1482:	9c 81       	ldd	r25, Y+4	; 0x04
    1484:	01 97       	sbiw	r24, 0x01	; 1
    1486:	f1 f7       	brne	.-4      	; 0x1484 <LCD_init+0xd2>
    1488:	9c 83       	std	Y+4, r25	; 0x04
    148a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    148c:	8d 81       	ldd	r24, Y+5	; 0x05
    148e:	9e 81       	ldd	r25, Y+6	; 0x06
    1490:	01 97       	sbiw	r24, 0x01	; 1
    1492:	9e 83       	std	Y+6, r25	; 0x06
    1494:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1496:	8d 81       	ldd	r24, Y+5	; 0x05
    1498:	9e 81       	ldd	r25, Y+6	; 0x06
    149a:	00 97       	sbiw	r24, 0x00	; 0
    149c:	69 f7       	brne	.-38     	; 0x1478 <LCD_init+0xc6>
    149e:	14 c0       	rjmp	.+40     	; 0x14c8 <LCD_init+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14a0:	6f 81       	ldd	r22, Y+7	; 0x07
    14a2:	78 85       	ldd	r23, Y+8	; 0x08
    14a4:	89 85       	ldd	r24, Y+9	; 0x09
    14a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ac:	dc 01       	movw	r26, r24
    14ae:	cb 01       	movw	r24, r22
    14b0:	9e 83       	std	Y+6, r25	; 0x06
    14b2:	8d 83       	std	Y+5, r24	; 0x05
    14b4:	8d 81       	ldd	r24, Y+5	; 0x05
    14b6:	9e 81       	ldd	r25, Y+6	; 0x06
    14b8:	9a 83       	std	Y+2, r25	; 0x02
    14ba:	89 83       	std	Y+1, r24	; 0x01
    14bc:	89 81       	ldd	r24, Y+1	; 0x01
    14be:	9a 81       	ldd	r25, Y+2	; 0x02
    14c0:	01 97       	sbiw	r24, 0x01	; 1
    14c2:	f1 f7       	brne	.-4      	; 0x14c0 <LCD_init+0x10e>
    14c4:	9a 83       	std	Y+2, r25	; 0x02
    14c6:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    14c8:	80 e0       	ldi	r24, 0x00	; 0
    14ca:	6f ef       	ldi	r22, 0xFF	; 255
    14cc:	0e 94 0c 09 	call	0x1218	; 0x1218 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    14d0:	88 e3       	ldi	r24, 0x38	; 56
    14d2:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    14d6:	8c e0       	ldi	r24, 0x0C	; 12
    14d8:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <LCD_sendCommand>
}
    14e2:	2e 96       	adiw	r28, 0x0e	; 14
    14e4:	0f b6       	in	r0, 0x3f	; 63
    14e6:	f8 94       	cli
    14e8:	de bf       	out	0x3e, r29	; 62
    14ea:	0f be       	out	0x3f, r0	; 63
    14ec:	cd bf       	out	0x3d, r28	; 61
    14ee:	cf 91       	pop	r28
    14f0:	df 91       	pop	r29
    14f2:	08 95       	ret

000014f4 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    14f4:	df 93       	push	r29
    14f6:	cf 93       	push	r28
    14f8:	cd b7       	in	r28, 0x3d	; 61
    14fa:	de b7       	in	r29, 0x3e	; 62
    14fc:	e9 97       	sbiw	r28, 0x39	; 57
    14fe:	0f b6       	in	r0, 0x3f	; 63
    1500:	f8 94       	cli
    1502:	de bf       	out	0x3e, r29	; 62
    1504:	0f be       	out	0x3f, r0	; 63
    1506:	cd bf       	out	0x3d, r28	; 61
    1508:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	60 e0       	ldi	r22, 0x00	; 0
    150e:	40 e0       	ldi	r20, 0x00	; 0
    1510:	0e 94 86 07 	call	0xf0c	; 0xf0c <GPIO_writePin>
    1514:	80 e0       	ldi	r24, 0x00	; 0
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	a0 e8       	ldi	r26, 0x80	; 128
    151a:	bf e3       	ldi	r27, 0x3F	; 63
    151c:	8d ab       	std	Y+53, r24	; 0x35
    151e:	9e ab       	std	Y+54, r25	; 0x36
    1520:	af ab       	std	Y+55, r26	; 0x37
    1522:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1524:	6d a9       	ldd	r22, Y+53	; 0x35
    1526:	7e a9       	ldd	r23, Y+54	; 0x36
    1528:	8f a9       	ldd	r24, Y+55	; 0x37
    152a:	98 ad       	ldd	r25, Y+56	; 0x38
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	4a ef       	ldi	r20, 0xFA	; 250
    1532:	54 e4       	ldi	r21, 0x44	; 68
    1534:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1538:	dc 01       	movw	r26, r24
    153a:	cb 01       	movw	r24, r22
    153c:	89 ab       	std	Y+49, r24	; 0x31
    153e:	9a ab       	std	Y+50, r25	; 0x32
    1540:	ab ab       	std	Y+51, r26	; 0x33
    1542:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1544:	69 a9       	ldd	r22, Y+49	; 0x31
    1546:	7a a9       	ldd	r23, Y+50	; 0x32
    1548:	8b a9       	ldd	r24, Y+51	; 0x33
    154a:	9c a9       	ldd	r25, Y+52	; 0x34
    154c:	20 e0       	ldi	r18, 0x00	; 0
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	40 e8       	ldi	r20, 0x80	; 128
    1552:	5f e3       	ldi	r21, 0x3F	; 63
    1554:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1558:	88 23       	and	r24, r24
    155a:	2c f4       	brge	.+10     	; 0x1566 <LCD_sendCommand+0x72>
		__ticks = 1;
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	98 ab       	std	Y+48, r25	; 0x30
    1562:	8f a7       	std	Y+47, r24	; 0x2f
    1564:	3f c0       	rjmp	.+126    	; 0x15e4 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1566:	69 a9       	ldd	r22, Y+49	; 0x31
    1568:	7a a9       	ldd	r23, Y+50	; 0x32
    156a:	8b a9       	ldd	r24, Y+51	; 0x33
    156c:	9c a9       	ldd	r25, Y+52	; 0x34
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	3f ef       	ldi	r19, 0xFF	; 255
    1572:	4f e7       	ldi	r20, 0x7F	; 127
    1574:	57 e4       	ldi	r21, 0x47	; 71
    1576:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    157a:	18 16       	cp	r1, r24
    157c:	4c f5       	brge	.+82     	; 0x15d0 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    157e:	6d a9       	ldd	r22, Y+53	; 0x35
    1580:	7e a9       	ldd	r23, Y+54	; 0x36
    1582:	8f a9       	ldd	r24, Y+55	; 0x37
    1584:	98 ad       	ldd	r25, Y+56	; 0x38
    1586:	20 e0       	ldi	r18, 0x00	; 0
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	40 e2       	ldi	r20, 0x20	; 32
    158c:	51 e4       	ldi	r21, 0x41	; 65
    158e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1592:	dc 01       	movw	r26, r24
    1594:	cb 01       	movw	r24, r22
    1596:	bc 01       	movw	r22, r24
    1598:	cd 01       	movw	r24, r26
    159a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    159e:	dc 01       	movw	r26, r24
    15a0:	cb 01       	movw	r24, r22
    15a2:	98 ab       	std	Y+48, r25	; 0x30
    15a4:	8f a7       	std	Y+47, r24	; 0x2f
    15a6:	0f c0       	rjmp	.+30     	; 0x15c6 <LCD_sendCommand+0xd2>
    15a8:	88 ec       	ldi	r24, 0xC8	; 200
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	9e a7       	std	Y+46, r25	; 0x2e
    15ae:	8d a7       	std	Y+45, r24	; 0x2d
    15b0:	8d a5       	ldd	r24, Y+45	; 0x2d
    15b2:	9e a5       	ldd	r25, Y+46	; 0x2e
    15b4:	01 97       	sbiw	r24, 0x01	; 1
    15b6:	f1 f7       	brne	.-4      	; 0x15b4 <LCD_sendCommand+0xc0>
    15b8:	9e a7       	std	Y+46, r25	; 0x2e
    15ba:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    15be:	98 a9       	ldd	r25, Y+48	; 0x30
    15c0:	01 97       	sbiw	r24, 0x01	; 1
    15c2:	98 ab       	std	Y+48, r25	; 0x30
    15c4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    15c8:	98 a9       	ldd	r25, Y+48	; 0x30
    15ca:	00 97       	sbiw	r24, 0x00	; 0
    15cc:	69 f7       	brne	.-38     	; 0x15a8 <LCD_sendCommand+0xb4>
    15ce:	14 c0       	rjmp	.+40     	; 0x15f8 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15d0:	69 a9       	ldd	r22, Y+49	; 0x31
    15d2:	7a a9       	ldd	r23, Y+50	; 0x32
    15d4:	8b a9       	ldd	r24, Y+51	; 0x33
    15d6:	9c a9       	ldd	r25, Y+52	; 0x34
    15d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15dc:	dc 01       	movw	r26, r24
    15de:	cb 01       	movw	r24, r22
    15e0:	98 ab       	std	Y+48, r25	; 0x30
    15e2:	8f a7       	std	Y+47, r24	; 0x2f
    15e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    15e6:	98 a9       	ldd	r25, Y+48	; 0x30
    15e8:	9c a7       	std	Y+44, r25	; 0x2c
    15ea:	8b a7       	std	Y+43, r24	; 0x2b
    15ec:	8b a5       	ldd	r24, Y+43	; 0x2b
    15ee:	9c a5       	ldd	r25, Y+44	; 0x2c
    15f0:	01 97       	sbiw	r24, 0x01	; 1
    15f2:	f1 f7       	brne	.-4      	; 0x15f0 <LCD_sendCommand+0xfc>
    15f4:	9c a7       	std	Y+44, r25	; 0x2c
    15f6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	62 e0       	ldi	r22, 0x02	; 2
    15fc:	41 e0       	ldi	r20, 0x01	; 1
    15fe:	0e 94 86 07 	call	0xf0c	; 0xf0c <GPIO_writePin>
    1602:	80 e0       	ldi	r24, 0x00	; 0
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	a0 e8       	ldi	r26, 0x80	; 128
    1608:	bf e3       	ldi	r27, 0x3F	; 63
    160a:	8f a3       	std	Y+39, r24	; 0x27
    160c:	98 a7       	std	Y+40, r25	; 0x28
    160e:	a9 a7       	std	Y+41, r26	; 0x29
    1610:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1612:	6f a1       	ldd	r22, Y+39	; 0x27
    1614:	78 a5       	ldd	r23, Y+40	; 0x28
    1616:	89 a5       	ldd	r24, Y+41	; 0x29
    1618:	9a a5       	ldd	r25, Y+42	; 0x2a
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	4a ef       	ldi	r20, 0xFA	; 250
    1620:	54 e4       	ldi	r21, 0x44	; 68
    1622:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1626:	dc 01       	movw	r26, r24
    1628:	cb 01       	movw	r24, r22
    162a:	8b a3       	std	Y+35, r24	; 0x23
    162c:	9c a3       	std	Y+36, r25	; 0x24
    162e:	ad a3       	std	Y+37, r26	; 0x25
    1630:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1632:	6b a1       	ldd	r22, Y+35	; 0x23
    1634:	7c a1       	ldd	r23, Y+36	; 0x24
    1636:	8d a1       	ldd	r24, Y+37	; 0x25
    1638:	9e a1       	ldd	r25, Y+38	; 0x26
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	40 e8       	ldi	r20, 0x80	; 128
    1640:	5f e3       	ldi	r21, 0x3F	; 63
    1642:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1646:	88 23       	and	r24, r24
    1648:	2c f4       	brge	.+10     	; 0x1654 <LCD_sendCommand+0x160>
		__ticks = 1;
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	9a a3       	std	Y+34, r25	; 0x22
    1650:	89 a3       	std	Y+33, r24	; 0x21
    1652:	3f c0       	rjmp	.+126    	; 0x16d2 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1654:	6b a1       	ldd	r22, Y+35	; 0x23
    1656:	7c a1       	ldd	r23, Y+36	; 0x24
    1658:	8d a1       	ldd	r24, Y+37	; 0x25
    165a:	9e a1       	ldd	r25, Y+38	; 0x26
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	3f ef       	ldi	r19, 0xFF	; 255
    1660:	4f e7       	ldi	r20, 0x7F	; 127
    1662:	57 e4       	ldi	r21, 0x47	; 71
    1664:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1668:	18 16       	cp	r1, r24
    166a:	4c f5       	brge	.+82     	; 0x16be <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    166c:	6f a1       	ldd	r22, Y+39	; 0x27
    166e:	78 a5       	ldd	r23, Y+40	; 0x28
    1670:	89 a5       	ldd	r24, Y+41	; 0x29
    1672:	9a a5       	ldd	r25, Y+42	; 0x2a
    1674:	20 e0       	ldi	r18, 0x00	; 0
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	40 e2       	ldi	r20, 0x20	; 32
    167a:	51 e4       	ldi	r21, 0x41	; 65
    167c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1680:	dc 01       	movw	r26, r24
    1682:	cb 01       	movw	r24, r22
    1684:	bc 01       	movw	r22, r24
    1686:	cd 01       	movw	r24, r26
    1688:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    168c:	dc 01       	movw	r26, r24
    168e:	cb 01       	movw	r24, r22
    1690:	9a a3       	std	Y+34, r25	; 0x22
    1692:	89 a3       	std	Y+33, r24	; 0x21
    1694:	0f c0       	rjmp	.+30     	; 0x16b4 <LCD_sendCommand+0x1c0>
    1696:	88 ec       	ldi	r24, 0xC8	; 200
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	98 a3       	std	Y+32, r25	; 0x20
    169c:	8f 8f       	std	Y+31, r24	; 0x1f
    169e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    16a0:	98 a1       	ldd	r25, Y+32	; 0x20
    16a2:	01 97       	sbiw	r24, 0x01	; 1
    16a4:	f1 f7       	brne	.-4      	; 0x16a2 <LCD_sendCommand+0x1ae>
    16a6:	98 a3       	std	Y+32, r25	; 0x20
    16a8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16aa:	89 a1       	ldd	r24, Y+33	; 0x21
    16ac:	9a a1       	ldd	r25, Y+34	; 0x22
    16ae:	01 97       	sbiw	r24, 0x01	; 1
    16b0:	9a a3       	std	Y+34, r25	; 0x22
    16b2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16b4:	89 a1       	ldd	r24, Y+33	; 0x21
    16b6:	9a a1       	ldd	r25, Y+34	; 0x22
    16b8:	00 97       	sbiw	r24, 0x00	; 0
    16ba:	69 f7       	brne	.-38     	; 0x1696 <LCD_sendCommand+0x1a2>
    16bc:	14 c0       	rjmp	.+40     	; 0x16e6 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16be:	6b a1       	ldd	r22, Y+35	; 0x23
    16c0:	7c a1       	ldd	r23, Y+36	; 0x24
    16c2:	8d a1       	ldd	r24, Y+37	; 0x25
    16c4:	9e a1       	ldd	r25, Y+38	; 0x26
    16c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ca:	dc 01       	movw	r26, r24
    16cc:	cb 01       	movw	r24, r22
    16ce:	9a a3       	std	Y+34, r25	; 0x22
    16d0:	89 a3       	std	Y+33, r24	; 0x21
    16d2:	89 a1       	ldd	r24, Y+33	; 0x21
    16d4:	9a a1       	ldd	r25, Y+34	; 0x22
    16d6:	9e 8f       	std	Y+30, r25	; 0x1e
    16d8:	8d 8f       	std	Y+29, r24	; 0x1d
    16da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16dc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16de:	01 97       	sbiw	r24, 0x01	; 1
    16e0:	f1 f7       	brne	.-4      	; 0x16de <LCD_sendCommand+0x1ea>
    16e2:	9e 8f       	std	Y+30, r25	; 0x1e
    16e4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    16e6:	80 e0       	ldi	r24, 0x00	; 0
    16e8:	69 ad       	ldd	r22, Y+57	; 0x39
    16ea:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePort>
    16ee:	80 e0       	ldi	r24, 0x00	; 0
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	a0 e8       	ldi	r26, 0x80	; 128
    16f4:	bf e3       	ldi	r27, 0x3F	; 63
    16f6:	89 8f       	std	Y+25, r24	; 0x19
    16f8:	9a 8f       	std	Y+26, r25	; 0x1a
    16fa:	ab 8f       	std	Y+27, r26	; 0x1b
    16fc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16fe:	69 8d       	ldd	r22, Y+25	; 0x19
    1700:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1702:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1704:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1706:	20 e0       	ldi	r18, 0x00	; 0
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	4a ef       	ldi	r20, 0xFA	; 250
    170c:	54 e4       	ldi	r21, 0x44	; 68
    170e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1712:	dc 01       	movw	r26, r24
    1714:	cb 01       	movw	r24, r22
    1716:	8d 8b       	std	Y+21, r24	; 0x15
    1718:	9e 8b       	std	Y+22, r25	; 0x16
    171a:	af 8b       	std	Y+23, r26	; 0x17
    171c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    171e:	6d 89       	ldd	r22, Y+21	; 0x15
    1720:	7e 89       	ldd	r23, Y+22	; 0x16
    1722:	8f 89       	ldd	r24, Y+23	; 0x17
    1724:	98 8d       	ldd	r25, Y+24	; 0x18
    1726:	20 e0       	ldi	r18, 0x00	; 0
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	40 e8       	ldi	r20, 0x80	; 128
    172c:	5f e3       	ldi	r21, 0x3F	; 63
    172e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1732:	88 23       	and	r24, r24
    1734:	2c f4       	brge	.+10     	; 0x1740 <LCD_sendCommand+0x24c>
		__ticks = 1;
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	9c 8b       	std	Y+20, r25	; 0x14
    173c:	8b 8b       	std	Y+19, r24	; 0x13
    173e:	3f c0       	rjmp	.+126    	; 0x17be <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1740:	6d 89       	ldd	r22, Y+21	; 0x15
    1742:	7e 89       	ldd	r23, Y+22	; 0x16
    1744:	8f 89       	ldd	r24, Y+23	; 0x17
    1746:	98 8d       	ldd	r25, Y+24	; 0x18
    1748:	20 e0       	ldi	r18, 0x00	; 0
    174a:	3f ef       	ldi	r19, 0xFF	; 255
    174c:	4f e7       	ldi	r20, 0x7F	; 127
    174e:	57 e4       	ldi	r21, 0x47	; 71
    1750:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1754:	18 16       	cp	r1, r24
    1756:	4c f5       	brge	.+82     	; 0x17aa <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1758:	69 8d       	ldd	r22, Y+25	; 0x19
    175a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    175c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    175e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1760:	20 e0       	ldi	r18, 0x00	; 0
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	40 e2       	ldi	r20, 0x20	; 32
    1766:	51 e4       	ldi	r21, 0x41	; 65
    1768:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    176c:	dc 01       	movw	r26, r24
    176e:	cb 01       	movw	r24, r22
    1770:	bc 01       	movw	r22, r24
    1772:	cd 01       	movw	r24, r26
    1774:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1778:	dc 01       	movw	r26, r24
    177a:	cb 01       	movw	r24, r22
    177c:	9c 8b       	std	Y+20, r25	; 0x14
    177e:	8b 8b       	std	Y+19, r24	; 0x13
    1780:	0f c0       	rjmp	.+30     	; 0x17a0 <LCD_sendCommand+0x2ac>
    1782:	88 ec       	ldi	r24, 0xC8	; 200
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	9a 8b       	std	Y+18, r25	; 0x12
    1788:	89 8b       	std	Y+17, r24	; 0x11
    178a:	89 89       	ldd	r24, Y+17	; 0x11
    178c:	9a 89       	ldd	r25, Y+18	; 0x12
    178e:	01 97       	sbiw	r24, 0x01	; 1
    1790:	f1 f7       	brne	.-4      	; 0x178e <LCD_sendCommand+0x29a>
    1792:	9a 8b       	std	Y+18, r25	; 0x12
    1794:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1796:	8b 89       	ldd	r24, Y+19	; 0x13
    1798:	9c 89       	ldd	r25, Y+20	; 0x14
    179a:	01 97       	sbiw	r24, 0x01	; 1
    179c:	9c 8b       	std	Y+20, r25	; 0x14
    179e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17a0:	8b 89       	ldd	r24, Y+19	; 0x13
    17a2:	9c 89       	ldd	r25, Y+20	; 0x14
    17a4:	00 97       	sbiw	r24, 0x00	; 0
    17a6:	69 f7       	brne	.-38     	; 0x1782 <LCD_sendCommand+0x28e>
    17a8:	14 c0       	rjmp	.+40     	; 0x17d2 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17aa:	6d 89       	ldd	r22, Y+21	; 0x15
    17ac:	7e 89       	ldd	r23, Y+22	; 0x16
    17ae:	8f 89       	ldd	r24, Y+23	; 0x17
    17b0:	98 8d       	ldd	r25, Y+24	; 0x18
    17b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17b6:	dc 01       	movw	r26, r24
    17b8:	cb 01       	movw	r24, r22
    17ba:	9c 8b       	std	Y+20, r25	; 0x14
    17bc:	8b 8b       	std	Y+19, r24	; 0x13
    17be:	8b 89       	ldd	r24, Y+19	; 0x13
    17c0:	9c 89       	ldd	r25, Y+20	; 0x14
    17c2:	98 8b       	std	Y+16, r25	; 0x10
    17c4:	8f 87       	std	Y+15, r24	; 0x0f
    17c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    17c8:	98 89       	ldd	r25, Y+16	; 0x10
    17ca:	01 97       	sbiw	r24, 0x01	; 1
    17cc:	f1 f7       	brne	.-4      	; 0x17ca <LCD_sendCommand+0x2d6>
    17ce:	98 8b       	std	Y+16, r25	; 0x10
    17d0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	62 e0       	ldi	r22, 0x02	; 2
    17d6:	40 e0       	ldi	r20, 0x00	; 0
    17d8:	0e 94 86 07 	call	0xf0c	; 0xf0c <GPIO_writePin>
    17dc:	80 e0       	ldi	r24, 0x00	; 0
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	a0 e8       	ldi	r26, 0x80	; 128
    17e2:	bf e3       	ldi	r27, 0x3F	; 63
    17e4:	8b 87       	std	Y+11, r24	; 0x0b
    17e6:	9c 87       	std	Y+12, r25	; 0x0c
    17e8:	ad 87       	std	Y+13, r26	; 0x0d
    17ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    17ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    17f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    17f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	4a ef       	ldi	r20, 0xFA	; 250
    17fa:	54 e4       	ldi	r21, 0x44	; 68
    17fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1800:	dc 01       	movw	r26, r24
    1802:	cb 01       	movw	r24, r22
    1804:	8f 83       	std	Y+7, r24	; 0x07
    1806:	98 87       	std	Y+8, r25	; 0x08
    1808:	a9 87       	std	Y+9, r26	; 0x09
    180a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    180c:	6f 81       	ldd	r22, Y+7	; 0x07
    180e:	78 85       	ldd	r23, Y+8	; 0x08
    1810:	89 85       	ldd	r24, Y+9	; 0x09
    1812:	9a 85       	ldd	r25, Y+10	; 0x0a
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	40 e8       	ldi	r20, 0x80	; 128
    181a:	5f e3       	ldi	r21, 0x3F	; 63
    181c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1820:	88 23       	and	r24, r24
    1822:	2c f4       	brge	.+10     	; 0x182e <LCD_sendCommand+0x33a>
		__ticks = 1;
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	9e 83       	std	Y+6, r25	; 0x06
    182a:	8d 83       	std	Y+5, r24	; 0x05
    182c:	3f c0       	rjmp	.+126    	; 0x18ac <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    182e:	6f 81       	ldd	r22, Y+7	; 0x07
    1830:	78 85       	ldd	r23, Y+8	; 0x08
    1832:	89 85       	ldd	r24, Y+9	; 0x09
    1834:	9a 85       	ldd	r25, Y+10	; 0x0a
    1836:	20 e0       	ldi	r18, 0x00	; 0
    1838:	3f ef       	ldi	r19, 0xFF	; 255
    183a:	4f e7       	ldi	r20, 0x7F	; 127
    183c:	57 e4       	ldi	r21, 0x47	; 71
    183e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1842:	18 16       	cp	r1, r24
    1844:	4c f5       	brge	.+82     	; 0x1898 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1846:	6b 85       	ldd	r22, Y+11	; 0x0b
    1848:	7c 85       	ldd	r23, Y+12	; 0x0c
    184a:	8d 85       	ldd	r24, Y+13	; 0x0d
    184c:	9e 85       	ldd	r25, Y+14	; 0x0e
    184e:	20 e0       	ldi	r18, 0x00	; 0
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	40 e2       	ldi	r20, 0x20	; 32
    1854:	51 e4       	ldi	r21, 0x41	; 65
    1856:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    185a:	dc 01       	movw	r26, r24
    185c:	cb 01       	movw	r24, r22
    185e:	bc 01       	movw	r22, r24
    1860:	cd 01       	movw	r24, r26
    1862:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1866:	dc 01       	movw	r26, r24
    1868:	cb 01       	movw	r24, r22
    186a:	9e 83       	std	Y+6, r25	; 0x06
    186c:	8d 83       	std	Y+5, r24	; 0x05
    186e:	0f c0       	rjmp	.+30     	; 0x188e <LCD_sendCommand+0x39a>
    1870:	88 ec       	ldi	r24, 0xC8	; 200
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	9c 83       	std	Y+4, r25	; 0x04
    1876:	8b 83       	std	Y+3, r24	; 0x03
    1878:	8b 81       	ldd	r24, Y+3	; 0x03
    187a:	9c 81       	ldd	r25, Y+4	; 0x04
    187c:	01 97       	sbiw	r24, 0x01	; 1
    187e:	f1 f7       	brne	.-4      	; 0x187c <LCD_sendCommand+0x388>
    1880:	9c 83       	std	Y+4, r25	; 0x04
    1882:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1884:	8d 81       	ldd	r24, Y+5	; 0x05
    1886:	9e 81       	ldd	r25, Y+6	; 0x06
    1888:	01 97       	sbiw	r24, 0x01	; 1
    188a:	9e 83       	std	Y+6, r25	; 0x06
    188c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    188e:	8d 81       	ldd	r24, Y+5	; 0x05
    1890:	9e 81       	ldd	r25, Y+6	; 0x06
    1892:	00 97       	sbiw	r24, 0x00	; 0
    1894:	69 f7       	brne	.-38     	; 0x1870 <LCD_sendCommand+0x37c>
    1896:	14 c0       	rjmp	.+40     	; 0x18c0 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1898:	6f 81       	ldd	r22, Y+7	; 0x07
    189a:	78 85       	ldd	r23, Y+8	; 0x08
    189c:	89 85       	ldd	r24, Y+9	; 0x09
    189e:	9a 85       	ldd	r25, Y+10	; 0x0a
    18a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a4:	dc 01       	movw	r26, r24
    18a6:	cb 01       	movw	r24, r22
    18a8:	9e 83       	std	Y+6, r25	; 0x06
    18aa:	8d 83       	std	Y+5, r24	; 0x05
    18ac:	8d 81       	ldd	r24, Y+5	; 0x05
    18ae:	9e 81       	ldd	r25, Y+6	; 0x06
    18b0:	9a 83       	std	Y+2, r25	; 0x02
    18b2:	89 83       	std	Y+1, r24	; 0x01
    18b4:	89 81       	ldd	r24, Y+1	; 0x01
    18b6:	9a 81       	ldd	r25, Y+2	; 0x02
    18b8:	01 97       	sbiw	r24, 0x01	; 1
    18ba:	f1 f7       	brne	.-4      	; 0x18b8 <LCD_sendCommand+0x3c4>
    18bc:	9a 83       	std	Y+2, r25	; 0x02
    18be:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    18c0:	e9 96       	adiw	r28, 0x39	; 57
    18c2:	0f b6       	in	r0, 0x3f	; 63
    18c4:	f8 94       	cli
    18c6:	de bf       	out	0x3e, r29	; 62
    18c8:	0f be       	out	0x3f, r0	; 63
    18ca:	cd bf       	out	0x3d, r28	; 61
    18cc:	cf 91       	pop	r28
    18ce:	df 91       	pop	r29
    18d0:	08 95       	ret

000018d2 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    18d2:	df 93       	push	r29
    18d4:	cf 93       	push	r28
    18d6:	cd b7       	in	r28, 0x3d	; 61
    18d8:	de b7       	in	r29, 0x3e	; 62
    18da:	e9 97       	sbiw	r28, 0x39	; 57
    18dc:	0f b6       	in	r0, 0x3f	; 63
    18de:	f8 94       	cli
    18e0:	de bf       	out	0x3e, r29	; 62
    18e2:	0f be       	out	0x3f, r0	; 63
    18e4:	cd bf       	out	0x3d, r28	; 61
    18e6:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	60 e0       	ldi	r22, 0x00	; 0
    18ec:	41 e0       	ldi	r20, 0x01	; 1
    18ee:	0e 94 86 07 	call	0xf0c	; 0xf0c <GPIO_writePin>
    18f2:	80 e0       	ldi	r24, 0x00	; 0
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	a0 e8       	ldi	r26, 0x80	; 128
    18f8:	bf e3       	ldi	r27, 0x3F	; 63
    18fa:	8d ab       	std	Y+53, r24	; 0x35
    18fc:	9e ab       	std	Y+54, r25	; 0x36
    18fe:	af ab       	std	Y+55, r26	; 0x37
    1900:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1902:	6d a9       	ldd	r22, Y+53	; 0x35
    1904:	7e a9       	ldd	r23, Y+54	; 0x36
    1906:	8f a9       	ldd	r24, Y+55	; 0x37
    1908:	98 ad       	ldd	r25, Y+56	; 0x38
    190a:	20 e0       	ldi	r18, 0x00	; 0
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	4a ef       	ldi	r20, 0xFA	; 250
    1910:	54 e4       	ldi	r21, 0x44	; 68
    1912:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1916:	dc 01       	movw	r26, r24
    1918:	cb 01       	movw	r24, r22
    191a:	89 ab       	std	Y+49, r24	; 0x31
    191c:	9a ab       	std	Y+50, r25	; 0x32
    191e:	ab ab       	std	Y+51, r26	; 0x33
    1920:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1922:	69 a9       	ldd	r22, Y+49	; 0x31
    1924:	7a a9       	ldd	r23, Y+50	; 0x32
    1926:	8b a9       	ldd	r24, Y+51	; 0x33
    1928:	9c a9       	ldd	r25, Y+52	; 0x34
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	40 e8       	ldi	r20, 0x80	; 128
    1930:	5f e3       	ldi	r21, 0x3F	; 63
    1932:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1936:	88 23       	and	r24, r24
    1938:	2c f4       	brge	.+10     	; 0x1944 <LCD_displayCharacter+0x72>
		__ticks = 1;
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	98 ab       	std	Y+48, r25	; 0x30
    1940:	8f a7       	std	Y+47, r24	; 0x2f
    1942:	3f c0       	rjmp	.+126    	; 0x19c2 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1944:	69 a9       	ldd	r22, Y+49	; 0x31
    1946:	7a a9       	ldd	r23, Y+50	; 0x32
    1948:	8b a9       	ldd	r24, Y+51	; 0x33
    194a:	9c a9       	ldd	r25, Y+52	; 0x34
    194c:	20 e0       	ldi	r18, 0x00	; 0
    194e:	3f ef       	ldi	r19, 0xFF	; 255
    1950:	4f e7       	ldi	r20, 0x7F	; 127
    1952:	57 e4       	ldi	r21, 0x47	; 71
    1954:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1958:	18 16       	cp	r1, r24
    195a:	4c f5       	brge	.+82     	; 0x19ae <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    195c:	6d a9       	ldd	r22, Y+53	; 0x35
    195e:	7e a9       	ldd	r23, Y+54	; 0x36
    1960:	8f a9       	ldd	r24, Y+55	; 0x37
    1962:	98 ad       	ldd	r25, Y+56	; 0x38
    1964:	20 e0       	ldi	r18, 0x00	; 0
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	40 e2       	ldi	r20, 0x20	; 32
    196a:	51 e4       	ldi	r21, 0x41	; 65
    196c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1970:	dc 01       	movw	r26, r24
    1972:	cb 01       	movw	r24, r22
    1974:	bc 01       	movw	r22, r24
    1976:	cd 01       	movw	r24, r26
    1978:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    197c:	dc 01       	movw	r26, r24
    197e:	cb 01       	movw	r24, r22
    1980:	98 ab       	std	Y+48, r25	; 0x30
    1982:	8f a7       	std	Y+47, r24	; 0x2f
    1984:	0f c0       	rjmp	.+30     	; 0x19a4 <LCD_displayCharacter+0xd2>
    1986:	88 ec       	ldi	r24, 0xC8	; 200
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	9e a7       	std	Y+46, r25	; 0x2e
    198c:	8d a7       	std	Y+45, r24	; 0x2d
    198e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1990:	9e a5       	ldd	r25, Y+46	; 0x2e
    1992:	01 97       	sbiw	r24, 0x01	; 1
    1994:	f1 f7       	brne	.-4      	; 0x1992 <LCD_displayCharacter+0xc0>
    1996:	9e a7       	std	Y+46, r25	; 0x2e
    1998:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    199a:	8f a5       	ldd	r24, Y+47	; 0x2f
    199c:	98 a9       	ldd	r25, Y+48	; 0x30
    199e:	01 97       	sbiw	r24, 0x01	; 1
    19a0:	98 ab       	std	Y+48, r25	; 0x30
    19a2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    19a6:	98 a9       	ldd	r25, Y+48	; 0x30
    19a8:	00 97       	sbiw	r24, 0x00	; 0
    19aa:	69 f7       	brne	.-38     	; 0x1986 <LCD_displayCharacter+0xb4>
    19ac:	14 c0       	rjmp	.+40     	; 0x19d6 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ae:	69 a9       	ldd	r22, Y+49	; 0x31
    19b0:	7a a9       	ldd	r23, Y+50	; 0x32
    19b2:	8b a9       	ldd	r24, Y+51	; 0x33
    19b4:	9c a9       	ldd	r25, Y+52	; 0x34
    19b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ba:	dc 01       	movw	r26, r24
    19bc:	cb 01       	movw	r24, r22
    19be:	98 ab       	std	Y+48, r25	; 0x30
    19c0:	8f a7       	std	Y+47, r24	; 0x2f
    19c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    19c4:	98 a9       	ldd	r25, Y+48	; 0x30
    19c6:	9c a7       	std	Y+44, r25	; 0x2c
    19c8:	8b a7       	std	Y+43, r24	; 0x2b
    19ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    19cc:	9c a5       	ldd	r25, Y+44	; 0x2c
    19ce:	01 97       	sbiw	r24, 0x01	; 1
    19d0:	f1 f7       	brne	.-4      	; 0x19ce <LCD_displayCharacter+0xfc>
    19d2:	9c a7       	std	Y+44, r25	; 0x2c
    19d4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	62 e0       	ldi	r22, 0x02	; 2
    19da:	41 e0       	ldi	r20, 0x01	; 1
    19dc:	0e 94 86 07 	call	0xf0c	; 0xf0c <GPIO_writePin>
    19e0:	80 e0       	ldi	r24, 0x00	; 0
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	a0 e8       	ldi	r26, 0x80	; 128
    19e6:	bf e3       	ldi	r27, 0x3F	; 63
    19e8:	8f a3       	std	Y+39, r24	; 0x27
    19ea:	98 a7       	std	Y+40, r25	; 0x28
    19ec:	a9 a7       	std	Y+41, r26	; 0x29
    19ee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19f0:	6f a1       	ldd	r22, Y+39	; 0x27
    19f2:	78 a5       	ldd	r23, Y+40	; 0x28
    19f4:	89 a5       	ldd	r24, Y+41	; 0x29
    19f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    19f8:	20 e0       	ldi	r18, 0x00	; 0
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	4a ef       	ldi	r20, 0xFA	; 250
    19fe:	54 e4       	ldi	r21, 0x44	; 68
    1a00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a04:	dc 01       	movw	r26, r24
    1a06:	cb 01       	movw	r24, r22
    1a08:	8b a3       	std	Y+35, r24	; 0x23
    1a0a:	9c a3       	std	Y+36, r25	; 0x24
    1a0c:	ad a3       	std	Y+37, r26	; 0x25
    1a0e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a10:	6b a1       	ldd	r22, Y+35	; 0x23
    1a12:	7c a1       	ldd	r23, Y+36	; 0x24
    1a14:	8d a1       	ldd	r24, Y+37	; 0x25
    1a16:	9e a1       	ldd	r25, Y+38	; 0x26
    1a18:	20 e0       	ldi	r18, 0x00	; 0
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	40 e8       	ldi	r20, 0x80	; 128
    1a1e:	5f e3       	ldi	r21, 0x3F	; 63
    1a20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a24:	88 23       	and	r24, r24
    1a26:	2c f4       	brge	.+10     	; 0x1a32 <LCD_displayCharacter+0x160>
		__ticks = 1;
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	9a a3       	std	Y+34, r25	; 0x22
    1a2e:	89 a3       	std	Y+33, r24	; 0x21
    1a30:	3f c0       	rjmp	.+126    	; 0x1ab0 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1a32:	6b a1       	ldd	r22, Y+35	; 0x23
    1a34:	7c a1       	ldd	r23, Y+36	; 0x24
    1a36:	8d a1       	ldd	r24, Y+37	; 0x25
    1a38:	9e a1       	ldd	r25, Y+38	; 0x26
    1a3a:	20 e0       	ldi	r18, 0x00	; 0
    1a3c:	3f ef       	ldi	r19, 0xFF	; 255
    1a3e:	4f e7       	ldi	r20, 0x7F	; 127
    1a40:	57 e4       	ldi	r21, 0x47	; 71
    1a42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a46:	18 16       	cp	r1, r24
    1a48:	4c f5       	brge	.+82     	; 0x1a9c <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a4a:	6f a1       	ldd	r22, Y+39	; 0x27
    1a4c:	78 a5       	ldd	r23, Y+40	; 0x28
    1a4e:	89 a5       	ldd	r24, Y+41	; 0x29
    1a50:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	40 e2       	ldi	r20, 0x20	; 32
    1a58:	51 e4       	ldi	r21, 0x41	; 65
    1a5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a5e:	dc 01       	movw	r26, r24
    1a60:	cb 01       	movw	r24, r22
    1a62:	bc 01       	movw	r22, r24
    1a64:	cd 01       	movw	r24, r26
    1a66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	9a a3       	std	Y+34, r25	; 0x22
    1a70:	89 a3       	std	Y+33, r24	; 0x21
    1a72:	0f c0       	rjmp	.+30     	; 0x1a92 <LCD_displayCharacter+0x1c0>
    1a74:	88 ec       	ldi	r24, 0xC8	; 200
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	98 a3       	std	Y+32, r25	; 0x20
    1a7a:	8f 8f       	std	Y+31, r24	; 0x1f
    1a7c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a7e:	98 a1       	ldd	r25, Y+32	; 0x20
    1a80:	01 97       	sbiw	r24, 0x01	; 1
    1a82:	f1 f7       	brne	.-4      	; 0x1a80 <LCD_displayCharacter+0x1ae>
    1a84:	98 a3       	std	Y+32, r25	; 0x20
    1a86:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a88:	89 a1       	ldd	r24, Y+33	; 0x21
    1a8a:	9a a1       	ldd	r25, Y+34	; 0x22
    1a8c:	01 97       	sbiw	r24, 0x01	; 1
    1a8e:	9a a3       	std	Y+34, r25	; 0x22
    1a90:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a92:	89 a1       	ldd	r24, Y+33	; 0x21
    1a94:	9a a1       	ldd	r25, Y+34	; 0x22
    1a96:	00 97       	sbiw	r24, 0x00	; 0
    1a98:	69 f7       	brne	.-38     	; 0x1a74 <LCD_displayCharacter+0x1a2>
    1a9a:	14 c0       	rjmp	.+40     	; 0x1ac4 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a9c:	6b a1       	ldd	r22, Y+35	; 0x23
    1a9e:	7c a1       	ldd	r23, Y+36	; 0x24
    1aa0:	8d a1       	ldd	r24, Y+37	; 0x25
    1aa2:	9e a1       	ldd	r25, Y+38	; 0x26
    1aa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa8:	dc 01       	movw	r26, r24
    1aaa:	cb 01       	movw	r24, r22
    1aac:	9a a3       	std	Y+34, r25	; 0x22
    1aae:	89 a3       	std	Y+33, r24	; 0x21
    1ab0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ab2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ab4:	9e 8f       	std	Y+30, r25	; 0x1e
    1ab6:	8d 8f       	std	Y+29, r24	; 0x1d
    1ab8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1aba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1abc:	01 97       	sbiw	r24, 0x01	; 1
    1abe:	f1 f7       	brne	.-4      	; 0x1abc <LCD_displayCharacter+0x1ea>
    1ac0:	9e 8f       	std	Y+30, r25	; 0x1e
    1ac2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	69 ad       	ldd	r22, Y+57	; 0x39
    1ac8:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePort>
    1acc:	80 e0       	ldi	r24, 0x00	; 0
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	a0 e8       	ldi	r26, 0x80	; 128
    1ad2:	bf e3       	ldi	r27, 0x3F	; 63
    1ad4:	89 8f       	std	Y+25, r24	; 0x19
    1ad6:	9a 8f       	std	Y+26, r25	; 0x1a
    1ad8:	ab 8f       	std	Y+27, r26	; 0x1b
    1ada:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1adc:	69 8d       	ldd	r22, Y+25	; 0x19
    1ade:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ae0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ae2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	4a ef       	ldi	r20, 0xFA	; 250
    1aea:	54 e4       	ldi	r21, 0x44	; 68
    1aec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	8d 8b       	std	Y+21, r24	; 0x15
    1af6:	9e 8b       	std	Y+22, r25	; 0x16
    1af8:	af 8b       	std	Y+23, r26	; 0x17
    1afa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1afc:	6d 89       	ldd	r22, Y+21	; 0x15
    1afe:	7e 89       	ldd	r23, Y+22	; 0x16
    1b00:	8f 89       	ldd	r24, Y+23	; 0x17
    1b02:	98 8d       	ldd	r25, Y+24	; 0x18
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	40 e8       	ldi	r20, 0x80	; 128
    1b0a:	5f e3       	ldi	r21, 0x3F	; 63
    1b0c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b10:	88 23       	and	r24, r24
    1b12:	2c f4       	brge	.+10     	; 0x1b1e <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	9c 8b       	std	Y+20, r25	; 0x14
    1b1a:	8b 8b       	std	Y+19, r24	; 0x13
    1b1c:	3f c0       	rjmp	.+126    	; 0x1b9c <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1b1e:	6d 89       	ldd	r22, Y+21	; 0x15
    1b20:	7e 89       	ldd	r23, Y+22	; 0x16
    1b22:	8f 89       	ldd	r24, Y+23	; 0x17
    1b24:	98 8d       	ldd	r25, Y+24	; 0x18
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	3f ef       	ldi	r19, 0xFF	; 255
    1b2a:	4f e7       	ldi	r20, 0x7F	; 127
    1b2c:	57 e4       	ldi	r21, 0x47	; 71
    1b2e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b32:	18 16       	cp	r1, r24
    1b34:	4c f5       	brge	.+82     	; 0x1b88 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b36:	69 8d       	ldd	r22, Y+25	; 0x19
    1b38:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	40 e2       	ldi	r20, 0x20	; 32
    1b44:	51 e4       	ldi	r21, 0x41	; 65
    1b46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b4a:	dc 01       	movw	r26, r24
    1b4c:	cb 01       	movw	r24, r22
    1b4e:	bc 01       	movw	r22, r24
    1b50:	cd 01       	movw	r24, r26
    1b52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b56:	dc 01       	movw	r26, r24
    1b58:	cb 01       	movw	r24, r22
    1b5a:	9c 8b       	std	Y+20, r25	; 0x14
    1b5c:	8b 8b       	std	Y+19, r24	; 0x13
    1b5e:	0f c0       	rjmp	.+30     	; 0x1b7e <LCD_displayCharacter+0x2ac>
    1b60:	88 ec       	ldi	r24, 0xC8	; 200
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	9a 8b       	std	Y+18, r25	; 0x12
    1b66:	89 8b       	std	Y+17, r24	; 0x11
    1b68:	89 89       	ldd	r24, Y+17	; 0x11
    1b6a:	9a 89       	ldd	r25, Y+18	; 0x12
    1b6c:	01 97       	sbiw	r24, 0x01	; 1
    1b6e:	f1 f7       	brne	.-4      	; 0x1b6c <LCD_displayCharacter+0x29a>
    1b70:	9a 8b       	std	Y+18, r25	; 0x12
    1b72:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b74:	8b 89       	ldd	r24, Y+19	; 0x13
    1b76:	9c 89       	ldd	r25, Y+20	; 0x14
    1b78:	01 97       	sbiw	r24, 0x01	; 1
    1b7a:	9c 8b       	std	Y+20, r25	; 0x14
    1b7c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b7e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b80:	9c 89       	ldd	r25, Y+20	; 0x14
    1b82:	00 97       	sbiw	r24, 0x00	; 0
    1b84:	69 f7       	brne	.-38     	; 0x1b60 <LCD_displayCharacter+0x28e>
    1b86:	14 c0       	rjmp	.+40     	; 0x1bb0 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b88:	6d 89       	ldd	r22, Y+21	; 0x15
    1b8a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b8c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b8e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b94:	dc 01       	movw	r26, r24
    1b96:	cb 01       	movw	r24, r22
    1b98:	9c 8b       	std	Y+20, r25	; 0x14
    1b9a:	8b 8b       	std	Y+19, r24	; 0x13
    1b9c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b9e:	9c 89       	ldd	r25, Y+20	; 0x14
    1ba0:	98 8b       	std	Y+16, r25	; 0x10
    1ba2:	8f 87       	std	Y+15, r24	; 0x0f
    1ba4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ba6:	98 89       	ldd	r25, Y+16	; 0x10
    1ba8:	01 97       	sbiw	r24, 0x01	; 1
    1baa:	f1 f7       	brne	.-4      	; 0x1ba8 <LCD_displayCharacter+0x2d6>
    1bac:	98 8b       	std	Y+16, r25	; 0x10
    1bae:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	62 e0       	ldi	r22, 0x02	; 2
    1bb4:	40 e0       	ldi	r20, 0x00	; 0
    1bb6:	0e 94 86 07 	call	0xf0c	; 0xf0c <GPIO_writePin>
    1bba:	80 e0       	ldi	r24, 0x00	; 0
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	a0 e8       	ldi	r26, 0x80	; 128
    1bc0:	bf e3       	ldi	r27, 0x3F	; 63
    1bc2:	8b 87       	std	Y+11, r24	; 0x0b
    1bc4:	9c 87       	std	Y+12, r25	; 0x0c
    1bc6:	ad 87       	std	Y+13, r26	; 0x0d
    1bc8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bca:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bce:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	4a ef       	ldi	r20, 0xFA	; 250
    1bd8:	54 e4       	ldi	r21, 0x44	; 68
    1bda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bde:	dc 01       	movw	r26, r24
    1be0:	cb 01       	movw	r24, r22
    1be2:	8f 83       	std	Y+7, r24	; 0x07
    1be4:	98 87       	std	Y+8, r25	; 0x08
    1be6:	a9 87       	std	Y+9, r26	; 0x09
    1be8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bea:	6f 81       	ldd	r22, Y+7	; 0x07
    1bec:	78 85       	ldd	r23, Y+8	; 0x08
    1bee:	89 85       	ldd	r24, Y+9	; 0x09
    1bf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	40 e8       	ldi	r20, 0x80	; 128
    1bf8:	5f e3       	ldi	r21, 0x3F	; 63
    1bfa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bfe:	88 23       	and	r24, r24
    1c00:	2c f4       	brge	.+10     	; 0x1c0c <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	9e 83       	std	Y+6, r25	; 0x06
    1c08:	8d 83       	std	Y+5, r24	; 0x05
    1c0a:	3f c0       	rjmp	.+126    	; 0x1c8a <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1c0c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c0e:	78 85       	ldd	r23, Y+8	; 0x08
    1c10:	89 85       	ldd	r24, Y+9	; 0x09
    1c12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	3f ef       	ldi	r19, 0xFF	; 255
    1c18:	4f e7       	ldi	r20, 0x7F	; 127
    1c1a:	57 e4       	ldi	r21, 0x47	; 71
    1c1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c20:	18 16       	cp	r1, r24
    1c22:	4c f5       	brge	.+82     	; 0x1c76 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c24:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c26:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c28:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c2c:	20 e0       	ldi	r18, 0x00	; 0
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	40 e2       	ldi	r20, 0x20	; 32
    1c32:	51 e4       	ldi	r21, 0x41	; 65
    1c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	bc 01       	movw	r22, r24
    1c3e:	cd 01       	movw	r24, r26
    1c40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c44:	dc 01       	movw	r26, r24
    1c46:	cb 01       	movw	r24, r22
    1c48:	9e 83       	std	Y+6, r25	; 0x06
    1c4a:	8d 83       	std	Y+5, r24	; 0x05
    1c4c:	0f c0       	rjmp	.+30     	; 0x1c6c <LCD_displayCharacter+0x39a>
    1c4e:	88 ec       	ldi	r24, 0xC8	; 200
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	9c 83       	std	Y+4, r25	; 0x04
    1c54:	8b 83       	std	Y+3, r24	; 0x03
    1c56:	8b 81       	ldd	r24, Y+3	; 0x03
    1c58:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5a:	01 97       	sbiw	r24, 0x01	; 1
    1c5c:	f1 f7       	brne	.-4      	; 0x1c5a <LCD_displayCharacter+0x388>
    1c5e:	9c 83       	std	Y+4, r25	; 0x04
    1c60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c62:	8d 81       	ldd	r24, Y+5	; 0x05
    1c64:	9e 81       	ldd	r25, Y+6	; 0x06
    1c66:	01 97       	sbiw	r24, 0x01	; 1
    1c68:	9e 83       	std	Y+6, r25	; 0x06
    1c6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c70:	00 97       	sbiw	r24, 0x00	; 0
    1c72:	69 f7       	brne	.-38     	; 0x1c4e <LCD_displayCharacter+0x37c>
    1c74:	14 c0       	rjmp	.+40     	; 0x1c9e <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c76:	6f 81       	ldd	r22, Y+7	; 0x07
    1c78:	78 85       	ldd	r23, Y+8	; 0x08
    1c7a:	89 85       	ldd	r24, Y+9	; 0x09
    1c7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	9e 83       	std	Y+6, r25	; 0x06
    1c88:	8d 83       	std	Y+5, r24	; 0x05
    1c8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c8e:	9a 83       	std	Y+2, r25	; 0x02
    1c90:	89 83       	std	Y+1, r24	; 0x01
    1c92:	89 81       	ldd	r24, Y+1	; 0x01
    1c94:	9a 81       	ldd	r25, Y+2	; 0x02
    1c96:	01 97       	sbiw	r24, 0x01	; 1
    1c98:	f1 f7       	brne	.-4      	; 0x1c96 <LCD_displayCharacter+0x3c4>
    1c9a:	9a 83       	std	Y+2, r25	; 0x02
    1c9c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1c9e:	e9 96       	adiw	r28, 0x39	; 57
    1ca0:	0f b6       	in	r0, 0x3f	; 63
    1ca2:	f8 94       	cli
    1ca4:	de bf       	out	0x3e, r29	; 62
    1ca6:	0f be       	out	0x3f, r0	; 63
    1ca8:	cd bf       	out	0x3d, r28	; 61
    1caa:	cf 91       	pop	r28
    1cac:	df 91       	pop	r29
    1cae:	08 95       	ret

00001cb0 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1cb0:	df 93       	push	r29
    1cb2:	cf 93       	push	r28
    1cb4:	00 d0       	rcall	.+0      	; 0x1cb6 <LCD_displayString+0x6>
    1cb6:	0f 92       	push	r0
    1cb8:	cd b7       	in	r28, 0x3d	; 61
    1cba:	de b7       	in	r29, 0x3e	; 62
    1cbc:	9b 83       	std	Y+3, r25	; 0x03
    1cbe:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1cc0:	19 82       	std	Y+1, r1	; 0x01
    1cc2:	0e c0       	rjmp	.+28     	; 0x1ce0 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1cc4:	89 81       	ldd	r24, Y+1	; 0x01
    1cc6:	28 2f       	mov	r18, r24
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ccc:	9b 81       	ldd	r25, Y+3	; 0x03
    1cce:	fc 01       	movw	r30, r24
    1cd0:	e2 0f       	add	r30, r18
    1cd2:	f3 1f       	adc	r31, r19
    1cd4:	80 81       	ld	r24, Z
    1cd6:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <LCD_displayCharacter>
		i++;
    1cda:	89 81       	ldd	r24, Y+1	; 0x01
    1cdc:	8f 5f       	subi	r24, 0xFF	; 255
    1cde:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1ce0:	89 81       	ldd	r24, Y+1	; 0x01
    1ce2:	28 2f       	mov	r18, r24
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce8:	9b 81       	ldd	r25, Y+3	; 0x03
    1cea:	fc 01       	movw	r30, r24
    1cec:	e2 0f       	add	r30, r18
    1cee:	f3 1f       	adc	r31, r19
    1cf0:	80 81       	ld	r24, Z
    1cf2:	88 23       	and	r24, r24
    1cf4:	39 f7       	brne	.-50     	; 0x1cc4 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1cf6:	0f 90       	pop	r0
    1cf8:	0f 90       	pop	r0
    1cfa:	0f 90       	pop	r0
    1cfc:	cf 91       	pop	r28
    1cfe:	df 91       	pop	r29
    1d00:	08 95       	ret

00001d02 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1d02:	df 93       	push	r29
    1d04:	cf 93       	push	r28
    1d06:	00 d0       	rcall	.+0      	; 0x1d08 <LCD_moveCursor+0x6>
    1d08:	00 d0       	rcall	.+0      	; 0x1d0a <LCD_moveCursor+0x8>
    1d0a:	0f 92       	push	r0
    1d0c:	cd b7       	in	r28, 0x3d	; 61
    1d0e:	de b7       	in	r29, 0x3e	; 62
    1d10:	8a 83       	std	Y+2, r24	; 0x02
    1d12:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1d14:	8a 81       	ldd	r24, Y+2	; 0x02
    1d16:	28 2f       	mov	r18, r24
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	3d 83       	std	Y+5, r19	; 0x05
    1d1c:	2c 83       	std	Y+4, r18	; 0x04
    1d1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d20:	9d 81       	ldd	r25, Y+5	; 0x05
    1d22:	81 30       	cpi	r24, 0x01	; 1
    1d24:	91 05       	cpc	r25, r1
    1d26:	c1 f0       	breq	.+48     	; 0x1d58 <LCD_moveCursor+0x56>
    1d28:	2c 81       	ldd	r18, Y+4	; 0x04
    1d2a:	3d 81       	ldd	r19, Y+5	; 0x05
    1d2c:	22 30       	cpi	r18, 0x02	; 2
    1d2e:	31 05       	cpc	r19, r1
    1d30:	2c f4       	brge	.+10     	; 0x1d3c <LCD_moveCursor+0x3a>
    1d32:	8c 81       	ldd	r24, Y+4	; 0x04
    1d34:	9d 81       	ldd	r25, Y+5	; 0x05
    1d36:	00 97       	sbiw	r24, 0x00	; 0
    1d38:	61 f0       	breq	.+24     	; 0x1d52 <LCD_moveCursor+0x50>
    1d3a:	19 c0       	rjmp	.+50     	; 0x1d6e <LCD_moveCursor+0x6c>
    1d3c:	2c 81       	ldd	r18, Y+4	; 0x04
    1d3e:	3d 81       	ldd	r19, Y+5	; 0x05
    1d40:	22 30       	cpi	r18, 0x02	; 2
    1d42:	31 05       	cpc	r19, r1
    1d44:	69 f0       	breq	.+26     	; 0x1d60 <LCD_moveCursor+0x5e>
    1d46:	8c 81       	ldd	r24, Y+4	; 0x04
    1d48:	9d 81       	ldd	r25, Y+5	; 0x05
    1d4a:	83 30       	cpi	r24, 0x03	; 3
    1d4c:	91 05       	cpc	r25, r1
    1d4e:	61 f0       	breq	.+24     	; 0x1d68 <LCD_moveCursor+0x66>
    1d50:	0e c0       	rjmp	.+28     	; 0x1d6e <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1d52:	8b 81       	ldd	r24, Y+3	; 0x03
    1d54:	89 83       	std	Y+1, r24	; 0x01
    1d56:	0b c0       	rjmp	.+22     	; 0x1d6e <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1d58:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5a:	80 5c       	subi	r24, 0xC0	; 192
    1d5c:	89 83       	std	Y+1, r24	; 0x01
    1d5e:	07 c0       	rjmp	.+14     	; 0x1d6e <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    1d60:	8b 81       	ldd	r24, Y+3	; 0x03
    1d62:	80 5f       	subi	r24, 0xF0	; 240
    1d64:	89 83       	std	Y+1, r24	; 0x01
    1d66:	03 c0       	rjmp	.+6      	; 0x1d6e <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1d68:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6a:	80 5b       	subi	r24, 0xB0	; 176
    1d6c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1d6e:	89 81       	ldd	r24, Y+1	; 0x01
    1d70:	80 68       	ori	r24, 0x80	; 128
    1d72:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <LCD_sendCommand>
}
    1d76:	0f 90       	pop	r0
    1d78:	0f 90       	pop	r0
    1d7a:	0f 90       	pop	r0
    1d7c:	0f 90       	pop	r0
    1d7e:	0f 90       	pop	r0
    1d80:	cf 91       	pop	r28
    1d82:	df 91       	pop	r29
    1d84:	08 95       	ret

00001d86 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1d86:	df 93       	push	r29
    1d88:	cf 93       	push	r28
    1d8a:	00 d0       	rcall	.+0      	; 0x1d8c <LCD_displayStringRowColumn+0x6>
    1d8c:	00 d0       	rcall	.+0      	; 0x1d8e <LCD_displayStringRowColumn+0x8>
    1d8e:	cd b7       	in	r28, 0x3d	; 61
    1d90:	de b7       	in	r29, 0x3e	; 62
    1d92:	89 83       	std	Y+1, r24	; 0x01
    1d94:	6a 83       	std	Y+2, r22	; 0x02
    1d96:	5c 83       	std	Y+4, r21	; 0x04
    1d98:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1d9a:	89 81       	ldd	r24, Y+1	; 0x01
    1d9c:	6a 81       	ldd	r22, Y+2	; 0x02
    1d9e:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    1da2:	8b 81       	ldd	r24, Y+3	; 0x03
    1da4:	9c 81       	ldd	r25, Y+4	; 0x04
    1da6:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <LCD_displayString>
}
    1daa:	0f 90       	pop	r0
    1dac:	0f 90       	pop	r0
    1dae:	0f 90       	pop	r0
    1db0:	0f 90       	pop	r0
    1db2:	cf 91       	pop	r28
    1db4:	df 91       	pop	r29
    1db6:	08 95       	ret

00001db8 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    1db8:	df 93       	push	r29
    1dba:	cf 93       	push	r28
    1dbc:	cd b7       	in	r28, 0x3d	; 61
    1dbe:	de b7       	in	r29, 0x3e	; 62
    1dc0:	62 97       	sbiw	r28, 0x12	; 18
    1dc2:	0f b6       	in	r0, 0x3f	; 63
    1dc4:	f8 94       	cli
    1dc6:	de bf       	out	0x3e, r29	; 62
    1dc8:	0f be       	out	0x3f, r0	; 63
    1dca:	cd bf       	out	0x3d, r28	; 61
    1dcc:	9a 8b       	std	Y+18, r25	; 0x12
    1dce:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1dd0:	89 89       	ldd	r24, Y+17	; 0x11
    1dd2:	9a 89       	ldd	r25, Y+18	; 0x12
    1dd4:	9e 01       	movw	r18, r28
    1dd6:	2f 5f       	subi	r18, 0xFF	; 255
    1dd8:	3f 4f       	sbci	r19, 0xFF	; 255
    1dda:	b9 01       	movw	r22, r18
    1ddc:	4a e0       	ldi	r20, 0x0A	; 10
    1dde:	50 e0       	ldi	r21, 0x00	; 0
    1de0:	0e 94 2f 1f 	call	0x3e5e	; 0x3e5e <itoa>
   LCD_displayString(buff); /* Display the string */
    1de4:	ce 01       	movw	r24, r28
    1de6:	01 96       	adiw	r24, 0x01	; 1
    1de8:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <LCD_displayString>
}
    1dec:	62 96       	adiw	r28, 0x12	; 18
    1dee:	0f b6       	in	r0, 0x3f	; 63
    1df0:	f8 94       	cli
    1df2:	de bf       	out	0x3e, r29	; 62
    1df4:	0f be       	out	0x3f, r0	; 63
    1df6:	cd bf       	out	0x3d, r28	; 61
    1df8:	cf 91       	pop	r28
    1dfa:	df 91       	pop	r29
    1dfc:	08 95       	ret

00001dfe <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    1dfe:	df 93       	push	r29
    1e00:	cf 93       	push	r28
    1e02:	cd b7       	in	r28, 0x3d	; 61
    1e04:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <LCD_sendCommand>
}
    1e0c:	cf 91       	pop	r28
    1e0e:	df 91       	pop	r29
    1e10:	08 95       	ret

00001e12 <start>:
 *                      Functions Definitions                                  *
 *******************************************************************************/
/*
 * description the function that will be included in the main
 */
void start(void){
    1e12:	0f 93       	push	r16
    1e14:	1f 93       	push	r17
    1e16:	df 93       	push	r29
    1e18:	cf 93       	push	r28
    1e1a:	cd b7       	in	r28, 0x3d	; 61
    1e1c:	de b7       	in	r29, 0x3e	; 62
    1e1e:	ce 5e       	subi	r28, 0xEE	; 238
    1e20:	d0 40       	sbci	r29, 0x00	; 0
    1e22:	0f b6       	in	r0, 0x3f	; 63
    1e24:	f8 94       	cli
    1e26:	de bf       	out	0x3e, r29	; 62
    1e28:	0f be       	out	0x3f, r0	; 63
    1e2a:	cd bf       	out	0x3d, r28	; 61
	//Enable I-bit
	SREG|=(1<<7);
    1e2c:	af e5       	ldi	r26, 0x5F	; 95
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	ef e5       	ldi	r30, 0x5F	; 95
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	80 81       	ld	r24, Z
    1e36:	80 68       	ori	r24, 0x80	; 128
    1e38:	8c 93       	st	X, r24
	//initialize the LCD
	LCD_init();
    1e3a:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <LCD_init>
	//initialize the UART
	UART_init(&Config);
    1e3e:	8e e3       	ldi	r24, 0x3E	; 62
    1e40:	91 e0       	ldi	r25, 0x01	; 1
    1e42:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <UART_init>
    1e46:	ba c3       	rjmp	.+1908   	; 0x25bc <start+0x7aa>
	uint8 password[5] , confirmPassword[5] , passwordVerified , command ;
	while(passwordVerified == 0)
	{
		LCD_clearScreen();
    1e48:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <LCD_clearScreen>
		LCD_displayString("Plz enter pass");
    1e4c:	80 e6       	ldi	r24, 0x60	; 96
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <LCD_displayString>


		enterPassword(password);
    1e54:	ce 01       	movw	r24, r28
    1e56:	8b 51       	subi	r24, 0x1B	; 27
    1e58:	9f 4f       	sbci	r25, 0xFF	; 255
    1e5a:	0e 94 31 1a 	call	0x3462	; 0x3462 <enterPassword>
    1e5e:	fe 01       	movw	r30, r28
    1e60:	e3 52       	subi	r30, 0x23	; 35
    1e62:	ff 4f       	sbci	r31, 0xFF	; 255
    1e64:	80 e0       	ldi	r24, 0x00	; 0
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	a8 e4       	ldi	r26, 0x48	; 72
    1e6a:	b2 e4       	ldi	r27, 0x42	; 66
    1e6c:	80 83       	st	Z, r24
    1e6e:	91 83       	std	Z+1, r25	; 0x01
    1e70:	a2 83       	std	Z+2, r26	; 0x02
    1e72:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e74:	8e 01       	movw	r16, r28
    1e76:	07 52       	subi	r16, 0x27	; 39
    1e78:	1f 4f       	sbci	r17, 0xFF	; 255
    1e7a:	fe 01       	movw	r30, r28
    1e7c:	e3 52       	subi	r30, 0x23	; 35
    1e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e80:	60 81       	ld	r22, Z
    1e82:	71 81       	ldd	r23, Z+1	; 0x01
    1e84:	82 81       	ldd	r24, Z+2	; 0x02
    1e86:	93 81       	ldd	r25, Z+3	; 0x03
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	4a ef       	ldi	r20, 0xFA	; 250
    1e8e:	54 e4       	ldi	r21, 0x44	; 68
    1e90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	f8 01       	movw	r30, r16
    1e9a:	80 83       	st	Z, r24
    1e9c:	91 83       	std	Z+1, r25	; 0x01
    1e9e:	a2 83       	std	Z+2, r26	; 0x02
    1ea0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ea2:	fe 01       	movw	r30, r28
    1ea4:	e7 52       	subi	r30, 0x27	; 39
    1ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea8:	60 81       	ld	r22, Z
    1eaa:	71 81       	ldd	r23, Z+1	; 0x01
    1eac:	82 81       	ldd	r24, Z+2	; 0x02
    1eae:	93 81       	ldd	r25, Z+3	; 0x03
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	40 e8       	ldi	r20, 0x80	; 128
    1eb6:	5f e3       	ldi	r21, 0x3F	; 63
    1eb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ebc:	88 23       	and	r24, r24
    1ebe:	44 f4       	brge	.+16     	; 0x1ed0 <start+0xbe>
		__ticks = 1;
    1ec0:	fe 01       	movw	r30, r28
    1ec2:	e9 52       	subi	r30, 0x29	; 41
    1ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec6:	81 e0       	ldi	r24, 0x01	; 1
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	91 83       	std	Z+1, r25	; 0x01
    1ecc:	80 83       	st	Z, r24
    1ece:	64 c0       	rjmp	.+200    	; 0x1f98 <start+0x186>
	else if (__tmp > 65535)
    1ed0:	fe 01       	movw	r30, r28
    1ed2:	e7 52       	subi	r30, 0x27	; 39
    1ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed6:	60 81       	ld	r22, Z
    1ed8:	71 81       	ldd	r23, Z+1	; 0x01
    1eda:	82 81       	ldd	r24, Z+2	; 0x02
    1edc:	93 81       	ldd	r25, Z+3	; 0x03
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	3f ef       	ldi	r19, 0xFF	; 255
    1ee2:	4f e7       	ldi	r20, 0x7F	; 127
    1ee4:	57 e4       	ldi	r21, 0x47	; 71
    1ee6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eea:	18 16       	cp	r1, r24
    1eec:	0c f0       	brlt	.+2      	; 0x1ef0 <start+0xde>
    1eee:	43 c0       	rjmp	.+134    	; 0x1f76 <start+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ef0:	fe 01       	movw	r30, r28
    1ef2:	e3 52       	subi	r30, 0x23	; 35
    1ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef6:	60 81       	ld	r22, Z
    1ef8:	71 81       	ldd	r23, Z+1	; 0x01
    1efa:	82 81       	ldd	r24, Z+2	; 0x02
    1efc:	93 81       	ldd	r25, Z+3	; 0x03
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	40 e2       	ldi	r20, 0x20	; 32
    1f04:	51 e4       	ldi	r21, 0x41	; 65
    1f06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	8e 01       	movw	r16, r28
    1f10:	09 52       	subi	r16, 0x29	; 41
    1f12:	1f 4f       	sbci	r17, 0xFF	; 255
    1f14:	bc 01       	movw	r22, r24
    1f16:	cd 01       	movw	r24, r26
    1f18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	cb 01       	movw	r24, r22
    1f20:	f8 01       	movw	r30, r16
    1f22:	91 83       	std	Z+1, r25	; 0x01
    1f24:	80 83       	st	Z, r24
    1f26:	1f c0       	rjmp	.+62     	; 0x1f66 <start+0x154>
    1f28:	fe 01       	movw	r30, r28
    1f2a:	eb 52       	subi	r30, 0x2B	; 43
    1f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2e:	88 ec       	ldi	r24, 0xC8	; 200
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	91 83       	std	Z+1, r25	; 0x01
    1f34:	80 83       	st	Z, r24
    1f36:	fe 01       	movw	r30, r28
    1f38:	eb 52       	subi	r30, 0x2B	; 43
    1f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3c:	80 81       	ld	r24, Z
    1f3e:	91 81       	ldd	r25, Z+1	; 0x01
    1f40:	01 97       	sbiw	r24, 0x01	; 1
    1f42:	f1 f7       	brne	.-4      	; 0x1f40 <start+0x12e>
    1f44:	fe 01       	movw	r30, r28
    1f46:	eb 52       	subi	r30, 0x2B	; 43
    1f48:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4a:	91 83       	std	Z+1, r25	; 0x01
    1f4c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f4e:	de 01       	movw	r26, r28
    1f50:	a9 52       	subi	r26, 0x29	; 41
    1f52:	bf 4f       	sbci	r27, 0xFF	; 255
    1f54:	fe 01       	movw	r30, r28
    1f56:	e9 52       	subi	r30, 0x29	; 41
    1f58:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5a:	80 81       	ld	r24, Z
    1f5c:	91 81       	ldd	r25, Z+1	; 0x01
    1f5e:	01 97       	sbiw	r24, 0x01	; 1
    1f60:	11 96       	adiw	r26, 0x01	; 1
    1f62:	9c 93       	st	X, r25
    1f64:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f66:	fe 01       	movw	r30, r28
    1f68:	e9 52       	subi	r30, 0x29	; 41
    1f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6c:	80 81       	ld	r24, Z
    1f6e:	91 81       	ldd	r25, Z+1	; 0x01
    1f70:	00 97       	sbiw	r24, 0x00	; 0
    1f72:	d1 f6       	brne	.-76     	; 0x1f28 <start+0x116>
    1f74:	27 c0       	rjmp	.+78     	; 0x1fc4 <start+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f76:	8e 01       	movw	r16, r28
    1f78:	09 52       	subi	r16, 0x29	; 41
    1f7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f7c:	fe 01       	movw	r30, r28
    1f7e:	e7 52       	subi	r30, 0x27	; 39
    1f80:	ff 4f       	sbci	r31, 0xFF	; 255
    1f82:	60 81       	ld	r22, Z
    1f84:	71 81       	ldd	r23, Z+1	; 0x01
    1f86:	82 81       	ldd	r24, Z+2	; 0x02
    1f88:	93 81       	ldd	r25, Z+3	; 0x03
    1f8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f8e:	dc 01       	movw	r26, r24
    1f90:	cb 01       	movw	r24, r22
    1f92:	f8 01       	movw	r30, r16
    1f94:	91 83       	std	Z+1, r25	; 0x01
    1f96:	80 83       	st	Z, r24
    1f98:	de 01       	movw	r26, r28
    1f9a:	ad 52       	subi	r26, 0x2D	; 45
    1f9c:	bf 4f       	sbci	r27, 0xFF	; 255
    1f9e:	fe 01       	movw	r30, r28
    1fa0:	e9 52       	subi	r30, 0x29	; 41
    1fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa4:	80 81       	ld	r24, Z
    1fa6:	91 81       	ldd	r25, Z+1	; 0x01
    1fa8:	8d 93       	st	X+, r24
    1faa:	9c 93       	st	X, r25
    1fac:	fe 01       	movw	r30, r28
    1fae:	ed 52       	subi	r30, 0x2D	; 45
    1fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb2:	80 81       	ld	r24, Z
    1fb4:	91 81       	ldd	r25, Z+1	; 0x01
    1fb6:	01 97       	sbiw	r24, 0x01	; 1
    1fb8:	f1 f7       	brne	.-4      	; 0x1fb6 <start+0x1a4>
    1fba:	fe 01       	movw	r30, r28
    1fbc:	ed 52       	subi	r30, 0x2D	; 45
    1fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc0:	91 83       	std	Z+1, r25	; 0x01
    1fc2:	80 83       	st	Z, r24
		_delay_ms(UART_DELAY);
		sendPassword(password);
    1fc4:	ce 01       	movw	r24, r28
    1fc6:	8b 51       	subi	r24, 0x1B	; 27
    1fc8:	9f 4f       	sbci	r25, 0xFF	; 255
    1fca:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <sendPassword>

		LCD_clearScreen();
    1fce:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <LCD_clearScreen>
		LCD_displayString("Confirm Pass");
    1fd2:	8f e6       	ldi	r24, 0x6F	; 111
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <LCD_displayString>
		enterPassword( confirmPassword );
    1fda:	ce 01       	movw	r24, r28
    1fdc:	86 51       	subi	r24, 0x16	; 22
    1fde:	9f 4f       	sbci	r25, 0xFF	; 255
    1fe0:	0e 94 31 1a 	call	0x3462	; 0x3462 <enterPassword>
    1fe4:	fe 01       	movw	r30, r28
    1fe6:	e1 53       	subi	r30, 0x31	; 49
    1fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fea:	80 e0       	ldi	r24, 0x00	; 0
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	a8 e4       	ldi	r26, 0x48	; 72
    1ff0:	b2 e4       	ldi	r27, 0x42	; 66
    1ff2:	80 83       	st	Z, r24
    1ff4:	91 83       	std	Z+1, r25	; 0x01
    1ff6:	a2 83       	std	Z+2, r26	; 0x02
    1ff8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ffa:	8e 01       	movw	r16, r28
    1ffc:	05 53       	subi	r16, 0x35	; 53
    1ffe:	1f 4f       	sbci	r17, 0xFF	; 255
    2000:	fe 01       	movw	r30, r28
    2002:	e1 53       	subi	r30, 0x31	; 49
    2004:	ff 4f       	sbci	r31, 0xFF	; 255
    2006:	60 81       	ld	r22, Z
    2008:	71 81       	ldd	r23, Z+1	; 0x01
    200a:	82 81       	ldd	r24, Z+2	; 0x02
    200c:	93 81       	ldd	r25, Z+3	; 0x03
    200e:	20 e0       	ldi	r18, 0x00	; 0
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	4a ef       	ldi	r20, 0xFA	; 250
    2014:	54 e4       	ldi	r21, 0x44	; 68
    2016:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    201a:	dc 01       	movw	r26, r24
    201c:	cb 01       	movw	r24, r22
    201e:	f8 01       	movw	r30, r16
    2020:	80 83       	st	Z, r24
    2022:	91 83       	std	Z+1, r25	; 0x01
    2024:	a2 83       	std	Z+2, r26	; 0x02
    2026:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2028:	fe 01       	movw	r30, r28
    202a:	e5 53       	subi	r30, 0x35	; 53
    202c:	ff 4f       	sbci	r31, 0xFF	; 255
    202e:	60 81       	ld	r22, Z
    2030:	71 81       	ldd	r23, Z+1	; 0x01
    2032:	82 81       	ldd	r24, Z+2	; 0x02
    2034:	93 81       	ldd	r25, Z+3	; 0x03
    2036:	20 e0       	ldi	r18, 0x00	; 0
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	40 e8       	ldi	r20, 0x80	; 128
    203c:	5f e3       	ldi	r21, 0x3F	; 63
    203e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2042:	88 23       	and	r24, r24
    2044:	44 f4       	brge	.+16     	; 0x2056 <start+0x244>
		__ticks = 1;
    2046:	fe 01       	movw	r30, r28
    2048:	e7 53       	subi	r30, 0x37	; 55
    204a:	ff 4f       	sbci	r31, 0xFF	; 255
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	91 83       	std	Z+1, r25	; 0x01
    2052:	80 83       	st	Z, r24
    2054:	64 c0       	rjmp	.+200    	; 0x211e <start+0x30c>
	else if (__tmp > 65535)
    2056:	fe 01       	movw	r30, r28
    2058:	e5 53       	subi	r30, 0x35	; 53
    205a:	ff 4f       	sbci	r31, 0xFF	; 255
    205c:	60 81       	ld	r22, Z
    205e:	71 81       	ldd	r23, Z+1	; 0x01
    2060:	82 81       	ldd	r24, Z+2	; 0x02
    2062:	93 81       	ldd	r25, Z+3	; 0x03
    2064:	20 e0       	ldi	r18, 0x00	; 0
    2066:	3f ef       	ldi	r19, 0xFF	; 255
    2068:	4f e7       	ldi	r20, 0x7F	; 127
    206a:	57 e4       	ldi	r21, 0x47	; 71
    206c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2070:	18 16       	cp	r1, r24
    2072:	0c f0       	brlt	.+2      	; 0x2076 <start+0x264>
    2074:	43 c0       	rjmp	.+134    	; 0x20fc <start+0x2ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2076:	fe 01       	movw	r30, r28
    2078:	e1 53       	subi	r30, 0x31	; 49
    207a:	ff 4f       	sbci	r31, 0xFF	; 255
    207c:	60 81       	ld	r22, Z
    207e:	71 81       	ldd	r23, Z+1	; 0x01
    2080:	82 81       	ldd	r24, Z+2	; 0x02
    2082:	93 81       	ldd	r25, Z+3	; 0x03
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	40 e2       	ldi	r20, 0x20	; 32
    208a:	51 e4       	ldi	r21, 0x41	; 65
    208c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	8e 01       	movw	r16, r28
    2096:	07 53       	subi	r16, 0x37	; 55
    2098:	1f 4f       	sbci	r17, 0xFF	; 255
    209a:	bc 01       	movw	r22, r24
    209c:	cd 01       	movw	r24, r26
    209e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	f8 01       	movw	r30, r16
    20a8:	91 83       	std	Z+1, r25	; 0x01
    20aa:	80 83       	st	Z, r24
    20ac:	1f c0       	rjmp	.+62     	; 0x20ec <start+0x2da>
    20ae:	fe 01       	movw	r30, r28
    20b0:	e9 53       	subi	r30, 0x39	; 57
    20b2:	ff 4f       	sbci	r31, 0xFF	; 255
    20b4:	88 ec       	ldi	r24, 0xC8	; 200
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	91 83       	std	Z+1, r25	; 0x01
    20ba:	80 83       	st	Z, r24
    20bc:	fe 01       	movw	r30, r28
    20be:	e9 53       	subi	r30, 0x39	; 57
    20c0:	ff 4f       	sbci	r31, 0xFF	; 255
    20c2:	80 81       	ld	r24, Z
    20c4:	91 81       	ldd	r25, Z+1	; 0x01
    20c6:	01 97       	sbiw	r24, 0x01	; 1
    20c8:	f1 f7       	brne	.-4      	; 0x20c6 <start+0x2b4>
    20ca:	fe 01       	movw	r30, r28
    20cc:	e9 53       	subi	r30, 0x39	; 57
    20ce:	ff 4f       	sbci	r31, 0xFF	; 255
    20d0:	91 83       	std	Z+1, r25	; 0x01
    20d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d4:	de 01       	movw	r26, r28
    20d6:	a7 53       	subi	r26, 0x37	; 55
    20d8:	bf 4f       	sbci	r27, 0xFF	; 255
    20da:	fe 01       	movw	r30, r28
    20dc:	e7 53       	subi	r30, 0x37	; 55
    20de:	ff 4f       	sbci	r31, 0xFF	; 255
    20e0:	80 81       	ld	r24, Z
    20e2:	91 81       	ldd	r25, Z+1	; 0x01
    20e4:	01 97       	sbiw	r24, 0x01	; 1
    20e6:	11 96       	adiw	r26, 0x01	; 1
    20e8:	9c 93       	st	X, r25
    20ea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ec:	fe 01       	movw	r30, r28
    20ee:	e7 53       	subi	r30, 0x37	; 55
    20f0:	ff 4f       	sbci	r31, 0xFF	; 255
    20f2:	80 81       	ld	r24, Z
    20f4:	91 81       	ldd	r25, Z+1	; 0x01
    20f6:	00 97       	sbiw	r24, 0x00	; 0
    20f8:	d1 f6       	brne	.-76     	; 0x20ae <start+0x29c>
    20fa:	27 c0       	rjmp	.+78     	; 0x214a <start+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20fc:	8e 01       	movw	r16, r28
    20fe:	07 53       	subi	r16, 0x37	; 55
    2100:	1f 4f       	sbci	r17, 0xFF	; 255
    2102:	fe 01       	movw	r30, r28
    2104:	e5 53       	subi	r30, 0x35	; 53
    2106:	ff 4f       	sbci	r31, 0xFF	; 255
    2108:	60 81       	ld	r22, Z
    210a:	71 81       	ldd	r23, Z+1	; 0x01
    210c:	82 81       	ldd	r24, Z+2	; 0x02
    210e:	93 81       	ldd	r25, Z+3	; 0x03
    2110:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2114:	dc 01       	movw	r26, r24
    2116:	cb 01       	movw	r24, r22
    2118:	f8 01       	movw	r30, r16
    211a:	91 83       	std	Z+1, r25	; 0x01
    211c:	80 83       	st	Z, r24
    211e:	de 01       	movw	r26, r28
    2120:	ab 53       	subi	r26, 0x3B	; 59
    2122:	bf 4f       	sbci	r27, 0xFF	; 255
    2124:	fe 01       	movw	r30, r28
    2126:	e7 53       	subi	r30, 0x37	; 55
    2128:	ff 4f       	sbci	r31, 0xFF	; 255
    212a:	80 81       	ld	r24, Z
    212c:	91 81       	ldd	r25, Z+1	; 0x01
    212e:	8d 93       	st	X+, r24
    2130:	9c 93       	st	X, r25
    2132:	fe 01       	movw	r30, r28
    2134:	eb 53       	subi	r30, 0x3B	; 59
    2136:	ff 4f       	sbci	r31, 0xFF	; 255
    2138:	80 81       	ld	r24, Z
    213a:	91 81       	ldd	r25, Z+1	; 0x01
    213c:	01 97       	sbiw	r24, 0x01	; 1
    213e:	f1 f7       	brne	.-4      	; 0x213c <start+0x32a>
    2140:	fe 01       	movw	r30, r28
    2142:	eb 53       	subi	r30, 0x3B	; 59
    2144:	ff 4f       	sbci	r31, 0xFF	; 255
    2146:	91 83       	std	Z+1, r25	; 0x01
    2148:	80 83       	st	Z, r24
		_delay_ms(UART_DELAY);
		sendPassword( confirmPassword );
    214a:	ce 01       	movw	r24, r28
    214c:	86 51       	subi	r24, 0x16	; 22
    214e:	9f 4f       	sbci	r25, 0xFF	; 255
    2150:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <sendPassword>
    2154:	fe 01       	movw	r30, r28
    2156:	ef 53       	subi	r30, 0x3F	; 63
    2158:	ff 4f       	sbci	r31, 0xFF	; 255
    215a:	80 e0       	ldi	r24, 0x00	; 0
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	a8 e4       	ldi	r26, 0x48	; 72
    2160:	b2 e4       	ldi	r27, 0x42	; 66
    2162:	80 83       	st	Z, r24
    2164:	91 83       	std	Z+1, r25	; 0x01
    2166:	a2 83       	std	Z+2, r26	; 0x02
    2168:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    216a:	8e 01       	movw	r16, r28
    216c:	03 54       	subi	r16, 0x43	; 67
    216e:	1f 4f       	sbci	r17, 0xFF	; 255
    2170:	fe 01       	movw	r30, r28
    2172:	ef 53       	subi	r30, 0x3F	; 63
    2174:	ff 4f       	sbci	r31, 0xFF	; 255
    2176:	60 81       	ld	r22, Z
    2178:	71 81       	ldd	r23, Z+1	; 0x01
    217a:	82 81       	ldd	r24, Z+2	; 0x02
    217c:	93 81       	ldd	r25, Z+3	; 0x03
    217e:	20 e0       	ldi	r18, 0x00	; 0
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	4a ef       	ldi	r20, 0xFA	; 250
    2184:	54 e4       	ldi	r21, 0x44	; 68
    2186:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    218a:	dc 01       	movw	r26, r24
    218c:	cb 01       	movw	r24, r22
    218e:	f8 01       	movw	r30, r16
    2190:	80 83       	st	Z, r24
    2192:	91 83       	std	Z+1, r25	; 0x01
    2194:	a2 83       	std	Z+2, r26	; 0x02
    2196:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2198:	fe 01       	movw	r30, r28
    219a:	e3 54       	subi	r30, 0x43	; 67
    219c:	ff 4f       	sbci	r31, 0xFF	; 255
    219e:	60 81       	ld	r22, Z
    21a0:	71 81       	ldd	r23, Z+1	; 0x01
    21a2:	82 81       	ldd	r24, Z+2	; 0x02
    21a4:	93 81       	ldd	r25, Z+3	; 0x03
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	40 e8       	ldi	r20, 0x80	; 128
    21ac:	5f e3       	ldi	r21, 0x3F	; 63
    21ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21b2:	88 23       	and	r24, r24
    21b4:	44 f4       	brge	.+16     	; 0x21c6 <start+0x3b4>
		__ticks = 1;
    21b6:	fe 01       	movw	r30, r28
    21b8:	e5 54       	subi	r30, 0x45	; 69
    21ba:	ff 4f       	sbci	r31, 0xFF	; 255
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	91 83       	std	Z+1, r25	; 0x01
    21c2:	80 83       	st	Z, r24
    21c4:	64 c0       	rjmp	.+200    	; 0x228e <start+0x47c>
	else if (__tmp > 65535)
    21c6:	fe 01       	movw	r30, r28
    21c8:	e3 54       	subi	r30, 0x43	; 67
    21ca:	ff 4f       	sbci	r31, 0xFF	; 255
    21cc:	60 81       	ld	r22, Z
    21ce:	71 81       	ldd	r23, Z+1	; 0x01
    21d0:	82 81       	ldd	r24, Z+2	; 0x02
    21d2:	93 81       	ldd	r25, Z+3	; 0x03
    21d4:	20 e0       	ldi	r18, 0x00	; 0
    21d6:	3f ef       	ldi	r19, 0xFF	; 255
    21d8:	4f e7       	ldi	r20, 0x7F	; 127
    21da:	57 e4       	ldi	r21, 0x47	; 71
    21dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21e0:	18 16       	cp	r1, r24
    21e2:	0c f0       	brlt	.+2      	; 0x21e6 <start+0x3d4>
    21e4:	43 c0       	rjmp	.+134    	; 0x226c <start+0x45a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21e6:	fe 01       	movw	r30, r28
    21e8:	ef 53       	subi	r30, 0x3F	; 63
    21ea:	ff 4f       	sbci	r31, 0xFF	; 255
    21ec:	60 81       	ld	r22, Z
    21ee:	71 81       	ldd	r23, Z+1	; 0x01
    21f0:	82 81       	ldd	r24, Z+2	; 0x02
    21f2:	93 81       	ldd	r25, Z+3	; 0x03
    21f4:	20 e0       	ldi	r18, 0x00	; 0
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	40 e2       	ldi	r20, 0x20	; 32
    21fa:	51 e4       	ldi	r21, 0x41	; 65
    21fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2200:	dc 01       	movw	r26, r24
    2202:	cb 01       	movw	r24, r22
    2204:	8e 01       	movw	r16, r28
    2206:	05 54       	subi	r16, 0x45	; 69
    2208:	1f 4f       	sbci	r17, 0xFF	; 255
    220a:	bc 01       	movw	r22, r24
    220c:	cd 01       	movw	r24, r26
    220e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2212:	dc 01       	movw	r26, r24
    2214:	cb 01       	movw	r24, r22
    2216:	f8 01       	movw	r30, r16
    2218:	91 83       	std	Z+1, r25	; 0x01
    221a:	80 83       	st	Z, r24
    221c:	1f c0       	rjmp	.+62     	; 0x225c <start+0x44a>
    221e:	fe 01       	movw	r30, r28
    2220:	e7 54       	subi	r30, 0x47	; 71
    2222:	ff 4f       	sbci	r31, 0xFF	; 255
    2224:	88 ec       	ldi	r24, 0xC8	; 200
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	91 83       	std	Z+1, r25	; 0x01
    222a:	80 83       	st	Z, r24
    222c:	fe 01       	movw	r30, r28
    222e:	e7 54       	subi	r30, 0x47	; 71
    2230:	ff 4f       	sbci	r31, 0xFF	; 255
    2232:	80 81       	ld	r24, Z
    2234:	91 81       	ldd	r25, Z+1	; 0x01
    2236:	01 97       	sbiw	r24, 0x01	; 1
    2238:	f1 f7       	brne	.-4      	; 0x2236 <start+0x424>
    223a:	fe 01       	movw	r30, r28
    223c:	e7 54       	subi	r30, 0x47	; 71
    223e:	ff 4f       	sbci	r31, 0xFF	; 255
    2240:	91 83       	std	Z+1, r25	; 0x01
    2242:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2244:	de 01       	movw	r26, r28
    2246:	a5 54       	subi	r26, 0x45	; 69
    2248:	bf 4f       	sbci	r27, 0xFF	; 255
    224a:	fe 01       	movw	r30, r28
    224c:	e5 54       	subi	r30, 0x45	; 69
    224e:	ff 4f       	sbci	r31, 0xFF	; 255
    2250:	80 81       	ld	r24, Z
    2252:	91 81       	ldd	r25, Z+1	; 0x01
    2254:	01 97       	sbiw	r24, 0x01	; 1
    2256:	11 96       	adiw	r26, 0x01	; 1
    2258:	9c 93       	st	X, r25
    225a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    225c:	fe 01       	movw	r30, r28
    225e:	e5 54       	subi	r30, 0x45	; 69
    2260:	ff 4f       	sbci	r31, 0xFF	; 255
    2262:	80 81       	ld	r24, Z
    2264:	91 81       	ldd	r25, Z+1	; 0x01
    2266:	00 97       	sbiw	r24, 0x00	; 0
    2268:	d1 f6       	brne	.-76     	; 0x221e <start+0x40c>
    226a:	27 c0       	rjmp	.+78     	; 0x22ba <start+0x4a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    226c:	8e 01       	movw	r16, r28
    226e:	05 54       	subi	r16, 0x45	; 69
    2270:	1f 4f       	sbci	r17, 0xFF	; 255
    2272:	fe 01       	movw	r30, r28
    2274:	e3 54       	subi	r30, 0x43	; 67
    2276:	ff 4f       	sbci	r31, 0xFF	; 255
    2278:	60 81       	ld	r22, Z
    227a:	71 81       	ldd	r23, Z+1	; 0x01
    227c:	82 81       	ldd	r24, Z+2	; 0x02
    227e:	93 81       	ldd	r25, Z+3	; 0x03
    2280:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2284:	dc 01       	movw	r26, r24
    2286:	cb 01       	movw	r24, r22
    2288:	f8 01       	movw	r30, r16
    228a:	91 83       	std	Z+1, r25	; 0x01
    228c:	80 83       	st	Z, r24
    228e:	de 01       	movw	r26, r28
    2290:	a9 54       	subi	r26, 0x49	; 73
    2292:	bf 4f       	sbci	r27, 0xFF	; 255
    2294:	fe 01       	movw	r30, r28
    2296:	e5 54       	subi	r30, 0x45	; 69
    2298:	ff 4f       	sbci	r31, 0xFF	; 255
    229a:	80 81       	ld	r24, Z
    229c:	91 81       	ldd	r25, Z+1	; 0x01
    229e:	8d 93       	st	X+, r24
    22a0:	9c 93       	st	X, r25
    22a2:	fe 01       	movw	r30, r28
    22a4:	e9 54       	subi	r30, 0x49	; 73
    22a6:	ff 4f       	sbci	r31, 0xFF	; 255
    22a8:	80 81       	ld	r24, Z
    22aa:	91 81       	ldd	r25, Z+1	; 0x01
    22ac:	01 97       	sbiw	r24, 0x01	; 1
    22ae:	f1 f7       	brne	.-4      	; 0x22ac <start+0x49a>
    22b0:	fe 01       	movw	r30, r28
    22b2:	e9 54       	subi	r30, 0x49	; 73
    22b4:	ff 4f       	sbci	r31, 0xFF	; 255
    22b6:	91 83       	std	Z+1, r25	; 0x01
    22b8:	80 83       	st	Z, r24
		_delay_ms(UART_DELAY);

		passwordVerified = UART_recieveByte();
    22ba:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <UART_recieveByte>
    22be:	fe 01       	movw	r30, r28
    22c0:	ec 51       	subi	r30, 0x1C	; 28
    22c2:	ff 4f       	sbci	r31, 0xFF	; 255
    22c4:	80 83       	st	Z, r24
    22c6:	fe 01       	movw	r30, r28
    22c8:	ed 54       	subi	r30, 0x4D	; 77
    22ca:	ff 4f       	sbci	r31, 0xFF	; 255
    22cc:	80 e0       	ldi	r24, 0x00	; 0
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	a8 e4       	ldi	r26, 0x48	; 72
    22d2:	b2 e4       	ldi	r27, 0x42	; 66
    22d4:	80 83       	st	Z, r24
    22d6:	91 83       	std	Z+1, r25	; 0x01
    22d8:	a2 83       	std	Z+2, r26	; 0x02
    22da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22dc:	8e 01       	movw	r16, r28
    22de:	01 55       	subi	r16, 0x51	; 81
    22e0:	1f 4f       	sbci	r17, 0xFF	; 255
    22e2:	fe 01       	movw	r30, r28
    22e4:	ed 54       	subi	r30, 0x4D	; 77
    22e6:	ff 4f       	sbci	r31, 0xFF	; 255
    22e8:	60 81       	ld	r22, Z
    22ea:	71 81       	ldd	r23, Z+1	; 0x01
    22ec:	82 81       	ldd	r24, Z+2	; 0x02
    22ee:	93 81       	ldd	r25, Z+3	; 0x03
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	4a ef       	ldi	r20, 0xFA	; 250
    22f6:	54 e4       	ldi	r21, 0x44	; 68
    22f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22fc:	dc 01       	movw	r26, r24
    22fe:	cb 01       	movw	r24, r22
    2300:	f8 01       	movw	r30, r16
    2302:	80 83       	st	Z, r24
    2304:	91 83       	std	Z+1, r25	; 0x01
    2306:	a2 83       	std	Z+2, r26	; 0x02
    2308:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    230a:	fe 01       	movw	r30, r28
    230c:	e1 55       	subi	r30, 0x51	; 81
    230e:	ff 4f       	sbci	r31, 0xFF	; 255
    2310:	60 81       	ld	r22, Z
    2312:	71 81       	ldd	r23, Z+1	; 0x01
    2314:	82 81       	ldd	r24, Z+2	; 0x02
    2316:	93 81       	ldd	r25, Z+3	; 0x03
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	40 e8       	ldi	r20, 0x80	; 128
    231e:	5f e3       	ldi	r21, 0x3F	; 63
    2320:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2324:	88 23       	and	r24, r24
    2326:	44 f4       	brge	.+16     	; 0x2338 <start+0x526>
		__ticks = 1;
    2328:	fe 01       	movw	r30, r28
    232a:	e3 55       	subi	r30, 0x53	; 83
    232c:	ff 4f       	sbci	r31, 0xFF	; 255
    232e:	81 e0       	ldi	r24, 0x01	; 1
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	91 83       	std	Z+1, r25	; 0x01
    2334:	80 83       	st	Z, r24
    2336:	64 c0       	rjmp	.+200    	; 0x2400 <start+0x5ee>
	else if (__tmp > 65535)
    2338:	fe 01       	movw	r30, r28
    233a:	e1 55       	subi	r30, 0x51	; 81
    233c:	ff 4f       	sbci	r31, 0xFF	; 255
    233e:	60 81       	ld	r22, Z
    2340:	71 81       	ldd	r23, Z+1	; 0x01
    2342:	82 81       	ldd	r24, Z+2	; 0x02
    2344:	93 81       	ldd	r25, Z+3	; 0x03
    2346:	20 e0       	ldi	r18, 0x00	; 0
    2348:	3f ef       	ldi	r19, 0xFF	; 255
    234a:	4f e7       	ldi	r20, 0x7F	; 127
    234c:	57 e4       	ldi	r21, 0x47	; 71
    234e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2352:	18 16       	cp	r1, r24
    2354:	0c f0       	brlt	.+2      	; 0x2358 <start+0x546>
    2356:	43 c0       	rjmp	.+134    	; 0x23de <start+0x5cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2358:	fe 01       	movw	r30, r28
    235a:	ed 54       	subi	r30, 0x4D	; 77
    235c:	ff 4f       	sbci	r31, 0xFF	; 255
    235e:	60 81       	ld	r22, Z
    2360:	71 81       	ldd	r23, Z+1	; 0x01
    2362:	82 81       	ldd	r24, Z+2	; 0x02
    2364:	93 81       	ldd	r25, Z+3	; 0x03
    2366:	20 e0       	ldi	r18, 0x00	; 0
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	40 e2       	ldi	r20, 0x20	; 32
    236c:	51 e4       	ldi	r21, 0x41	; 65
    236e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2372:	dc 01       	movw	r26, r24
    2374:	cb 01       	movw	r24, r22
    2376:	8e 01       	movw	r16, r28
    2378:	03 55       	subi	r16, 0x53	; 83
    237a:	1f 4f       	sbci	r17, 0xFF	; 255
    237c:	bc 01       	movw	r22, r24
    237e:	cd 01       	movw	r24, r26
    2380:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	f8 01       	movw	r30, r16
    238a:	91 83       	std	Z+1, r25	; 0x01
    238c:	80 83       	st	Z, r24
    238e:	1f c0       	rjmp	.+62     	; 0x23ce <start+0x5bc>
    2390:	fe 01       	movw	r30, r28
    2392:	e5 55       	subi	r30, 0x55	; 85
    2394:	ff 4f       	sbci	r31, 0xFF	; 255
    2396:	88 ec       	ldi	r24, 0xC8	; 200
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	91 83       	std	Z+1, r25	; 0x01
    239c:	80 83       	st	Z, r24
    239e:	fe 01       	movw	r30, r28
    23a0:	e5 55       	subi	r30, 0x55	; 85
    23a2:	ff 4f       	sbci	r31, 0xFF	; 255
    23a4:	80 81       	ld	r24, Z
    23a6:	91 81       	ldd	r25, Z+1	; 0x01
    23a8:	01 97       	sbiw	r24, 0x01	; 1
    23aa:	f1 f7       	brne	.-4      	; 0x23a8 <start+0x596>
    23ac:	fe 01       	movw	r30, r28
    23ae:	e5 55       	subi	r30, 0x55	; 85
    23b0:	ff 4f       	sbci	r31, 0xFF	; 255
    23b2:	91 83       	std	Z+1, r25	; 0x01
    23b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23b6:	de 01       	movw	r26, r28
    23b8:	a3 55       	subi	r26, 0x53	; 83
    23ba:	bf 4f       	sbci	r27, 0xFF	; 255
    23bc:	fe 01       	movw	r30, r28
    23be:	e3 55       	subi	r30, 0x53	; 83
    23c0:	ff 4f       	sbci	r31, 0xFF	; 255
    23c2:	80 81       	ld	r24, Z
    23c4:	91 81       	ldd	r25, Z+1	; 0x01
    23c6:	01 97       	sbiw	r24, 0x01	; 1
    23c8:	11 96       	adiw	r26, 0x01	; 1
    23ca:	9c 93       	st	X, r25
    23cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ce:	fe 01       	movw	r30, r28
    23d0:	e3 55       	subi	r30, 0x53	; 83
    23d2:	ff 4f       	sbci	r31, 0xFF	; 255
    23d4:	80 81       	ld	r24, Z
    23d6:	91 81       	ldd	r25, Z+1	; 0x01
    23d8:	00 97       	sbiw	r24, 0x00	; 0
    23da:	d1 f6       	brne	.-76     	; 0x2390 <start+0x57e>
    23dc:	28 c0       	rjmp	.+80     	; 0x242e <start+0x61c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23de:	8e 01       	movw	r16, r28
    23e0:	03 55       	subi	r16, 0x53	; 83
    23e2:	1f 4f       	sbci	r17, 0xFF	; 255
    23e4:	fe 01       	movw	r30, r28
    23e6:	e1 55       	subi	r30, 0x51	; 81
    23e8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ea:	60 81       	ld	r22, Z
    23ec:	71 81       	ldd	r23, Z+1	; 0x01
    23ee:	82 81       	ldd	r24, Z+2	; 0x02
    23f0:	93 81       	ldd	r25, Z+3	; 0x03
    23f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f6:	dc 01       	movw	r26, r24
    23f8:	cb 01       	movw	r24, r22
    23fa:	f8 01       	movw	r30, r16
    23fc:	91 83       	std	Z+1, r25	; 0x01
    23fe:	80 83       	st	Z, r24
    2400:	de 01       	movw	r26, r28
    2402:	a7 55       	subi	r26, 0x57	; 87
    2404:	bf 4f       	sbci	r27, 0xFF	; 255
    2406:	fe 01       	movw	r30, r28
    2408:	e3 55       	subi	r30, 0x53	; 83
    240a:	ff 4f       	sbci	r31, 0xFF	; 255
    240c:	80 81       	ld	r24, Z
    240e:	91 81       	ldd	r25, Z+1	; 0x01
    2410:	11 96       	adiw	r26, 0x01	; 1
    2412:	9c 93       	st	X, r25
    2414:	8e 93       	st	-X, r24
    2416:	fe 01       	movw	r30, r28
    2418:	e7 55       	subi	r30, 0x57	; 87
    241a:	ff 4f       	sbci	r31, 0xFF	; 255
    241c:	80 81       	ld	r24, Z
    241e:	91 81       	ldd	r25, Z+1	; 0x01
    2420:	01 97       	sbiw	r24, 0x01	; 1
    2422:	f1 f7       	brne	.-4      	; 0x2420 <start+0x60e>
    2424:	fe 01       	movw	r30, r28
    2426:	e7 55       	subi	r30, 0x57	; 87
    2428:	ff 4f       	sbci	r31, 0xFF	; 255
    242a:	91 83       	std	Z+1, r25	; 0x01
    242c:	80 83       	st	Z, r24
		_delay_ms(UART_DELAY);

		if(passwordVerified)
    242e:	fe 01       	movw	r30, r28
    2430:	ec 51       	subi	r30, 0x1C	; 28
    2432:	ff 4f       	sbci	r31, 0xFF	; 255
    2434:	80 81       	ld	r24, Z
    2436:	88 23       	and	r24, r24
    2438:	39 f0       	breq	.+14     	; 0x2448 <start+0x636>
		{
			LCD_clearScreen();
    243a:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <LCD_clearScreen>
			LCD_displayString("Right Password");
    243e:	8c e7       	ldi	r24, 0x7C	; 124
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <LCD_displayString>
    2446:	06 c0       	rjmp	.+12     	; 0x2454 <start+0x642>
		}

		else
		{
			LCD_clearScreen();
    2448:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <LCD_clearScreen>
			LCD_displayString("Wrong Password");
    244c:	8b e8       	ldi	r24, 0x8B	; 139
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <LCD_displayString>
    2454:	fe 01       	movw	r30, r28
    2456:	eb 55       	subi	r30, 0x5B	; 91
    2458:	ff 4f       	sbci	r31, 0xFF	; 255
    245a:	80 e0       	ldi	r24, 0x00	; 0
    245c:	90 e8       	ldi	r25, 0x80	; 128
    245e:	ab e3       	ldi	r26, 0x3B	; 59
    2460:	b5 e4       	ldi	r27, 0x45	; 69
    2462:	80 83       	st	Z, r24
    2464:	91 83       	std	Z+1, r25	; 0x01
    2466:	a2 83       	std	Z+2, r26	; 0x02
    2468:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    246a:	8e 01       	movw	r16, r28
    246c:	0f 55       	subi	r16, 0x5F	; 95
    246e:	1f 4f       	sbci	r17, 0xFF	; 255
    2470:	fe 01       	movw	r30, r28
    2472:	eb 55       	subi	r30, 0x5B	; 91
    2474:	ff 4f       	sbci	r31, 0xFF	; 255
    2476:	60 81       	ld	r22, Z
    2478:	71 81       	ldd	r23, Z+1	; 0x01
    247a:	82 81       	ldd	r24, Z+2	; 0x02
    247c:	93 81       	ldd	r25, Z+3	; 0x03
    247e:	20 e0       	ldi	r18, 0x00	; 0
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	4a ef       	ldi	r20, 0xFA	; 250
    2484:	54 e4       	ldi	r21, 0x44	; 68
    2486:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    248a:	dc 01       	movw	r26, r24
    248c:	cb 01       	movw	r24, r22
    248e:	f8 01       	movw	r30, r16
    2490:	80 83       	st	Z, r24
    2492:	91 83       	std	Z+1, r25	; 0x01
    2494:	a2 83       	std	Z+2, r26	; 0x02
    2496:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2498:	fe 01       	movw	r30, r28
    249a:	ef 55       	subi	r30, 0x5F	; 95
    249c:	ff 4f       	sbci	r31, 0xFF	; 255
    249e:	60 81       	ld	r22, Z
    24a0:	71 81       	ldd	r23, Z+1	; 0x01
    24a2:	82 81       	ldd	r24, Z+2	; 0x02
    24a4:	93 81       	ldd	r25, Z+3	; 0x03
    24a6:	20 e0       	ldi	r18, 0x00	; 0
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	40 e8       	ldi	r20, 0x80	; 128
    24ac:	5f e3       	ldi	r21, 0x3F	; 63
    24ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24b2:	88 23       	and	r24, r24
    24b4:	44 f4       	brge	.+16     	; 0x24c6 <start+0x6b4>
		__ticks = 1;
    24b6:	fe 01       	movw	r30, r28
    24b8:	e1 56       	subi	r30, 0x61	; 97
    24ba:	ff 4f       	sbci	r31, 0xFF	; 255
    24bc:	81 e0       	ldi	r24, 0x01	; 1
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	91 83       	std	Z+1, r25	; 0x01
    24c2:	80 83       	st	Z, r24
    24c4:	64 c0       	rjmp	.+200    	; 0x258e <start+0x77c>
	else if (__tmp > 65535)
    24c6:	fe 01       	movw	r30, r28
    24c8:	ef 55       	subi	r30, 0x5F	; 95
    24ca:	ff 4f       	sbci	r31, 0xFF	; 255
    24cc:	60 81       	ld	r22, Z
    24ce:	71 81       	ldd	r23, Z+1	; 0x01
    24d0:	82 81       	ldd	r24, Z+2	; 0x02
    24d2:	93 81       	ldd	r25, Z+3	; 0x03
    24d4:	20 e0       	ldi	r18, 0x00	; 0
    24d6:	3f ef       	ldi	r19, 0xFF	; 255
    24d8:	4f e7       	ldi	r20, 0x7F	; 127
    24da:	57 e4       	ldi	r21, 0x47	; 71
    24dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24e0:	18 16       	cp	r1, r24
    24e2:	0c f0       	brlt	.+2      	; 0x24e6 <start+0x6d4>
    24e4:	43 c0       	rjmp	.+134    	; 0x256c <start+0x75a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e6:	fe 01       	movw	r30, r28
    24e8:	eb 55       	subi	r30, 0x5B	; 91
    24ea:	ff 4f       	sbci	r31, 0xFF	; 255
    24ec:	60 81       	ld	r22, Z
    24ee:	71 81       	ldd	r23, Z+1	; 0x01
    24f0:	82 81       	ldd	r24, Z+2	; 0x02
    24f2:	93 81       	ldd	r25, Z+3	; 0x03
    24f4:	20 e0       	ldi	r18, 0x00	; 0
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	40 e2       	ldi	r20, 0x20	; 32
    24fa:	51 e4       	ldi	r21, 0x41	; 65
    24fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2500:	dc 01       	movw	r26, r24
    2502:	cb 01       	movw	r24, r22
    2504:	8e 01       	movw	r16, r28
    2506:	01 56       	subi	r16, 0x61	; 97
    2508:	1f 4f       	sbci	r17, 0xFF	; 255
    250a:	bc 01       	movw	r22, r24
    250c:	cd 01       	movw	r24, r26
    250e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2512:	dc 01       	movw	r26, r24
    2514:	cb 01       	movw	r24, r22
    2516:	f8 01       	movw	r30, r16
    2518:	91 83       	std	Z+1, r25	; 0x01
    251a:	80 83       	st	Z, r24
    251c:	1f c0       	rjmp	.+62     	; 0x255c <start+0x74a>
    251e:	fe 01       	movw	r30, r28
    2520:	e3 56       	subi	r30, 0x63	; 99
    2522:	ff 4f       	sbci	r31, 0xFF	; 255
    2524:	88 ec       	ldi	r24, 0xC8	; 200
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	91 83       	std	Z+1, r25	; 0x01
    252a:	80 83       	st	Z, r24
    252c:	fe 01       	movw	r30, r28
    252e:	e3 56       	subi	r30, 0x63	; 99
    2530:	ff 4f       	sbci	r31, 0xFF	; 255
    2532:	80 81       	ld	r24, Z
    2534:	91 81       	ldd	r25, Z+1	; 0x01
    2536:	01 97       	sbiw	r24, 0x01	; 1
    2538:	f1 f7       	brne	.-4      	; 0x2536 <start+0x724>
    253a:	fe 01       	movw	r30, r28
    253c:	e3 56       	subi	r30, 0x63	; 99
    253e:	ff 4f       	sbci	r31, 0xFF	; 255
    2540:	91 83       	std	Z+1, r25	; 0x01
    2542:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2544:	de 01       	movw	r26, r28
    2546:	a1 56       	subi	r26, 0x61	; 97
    2548:	bf 4f       	sbci	r27, 0xFF	; 255
    254a:	fe 01       	movw	r30, r28
    254c:	e1 56       	subi	r30, 0x61	; 97
    254e:	ff 4f       	sbci	r31, 0xFF	; 255
    2550:	80 81       	ld	r24, Z
    2552:	91 81       	ldd	r25, Z+1	; 0x01
    2554:	01 97       	sbiw	r24, 0x01	; 1
    2556:	11 96       	adiw	r26, 0x01	; 1
    2558:	9c 93       	st	X, r25
    255a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    255c:	fe 01       	movw	r30, r28
    255e:	e1 56       	subi	r30, 0x61	; 97
    2560:	ff 4f       	sbci	r31, 0xFF	; 255
    2562:	80 81       	ld	r24, Z
    2564:	91 81       	ldd	r25, Z+1	; 0x01
    2566:	00 97       	sbiw	r24, 0x00	; 0
    2568:	d1 f6       	brne	.-76     	; 0x251e <start+0x70c>
    256a:	28 c0       	rjmp	.+80     	; 0x25bc <start+0x7aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    256c:	8e 01       	movw	r16, r28
    256e:	01 56       	subi	r16, 0x61	; 97
    2570:	1f 4f       	sbci	r17, 0xFF	; 255
    2572:	fe 01       	movw	r30, r28
    2574:	ef 55       	subi	r30, 0x5F	; 95
    2576:	ff 4f       	sbci	r31, 0xFF	; 255
    2578:	60 81       	ld	r22, Z
    257a:	71 81       	ldd	r23, Z+1	; 0x01
    257c:	82 81       	ldd	r24, Z+2	; 0x02
    257e:	93 81       	ldd	r25, Z+3	; 0x03
    2580:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2584:	dc 01       	movw	r26, r24
    2586:	cb 01       	movw	r24, r22
    2588:	f8 01       	movw	r30, r16
    258a:	91 83       	std	Z+1, r25	; 0x01
    258c:	80 83       	st	Z, r24
    258e:	de 01       	movw	r26, r28
    2590:	a5 56       	subi	r26, 0x65	; 101
    2592:	bf 4f       	sbci	r27, 0xFF	; 255
    2594:	fe 01       	movw	r30, r28
    2596:	e1 56       	subi	r30, 0x61	; 97
    2598:	ff 4f       	sbci	r31, 0xFF	; 255
    259a:	80 81       	ld	r24, Z
    259c:	91 81       	ldd	r25, Z+1	; 0x01
    259e:	11 96       	adiw	r26, 0x01	; 1
    25a0:	9c 93       	st	X, r25
    25a2:	8e 93       	st	-X, r24
    25a4:	fe 01       	movw	r30, r28
    25a6:	e5 56       	subi	r30, 0x65	; 101
    25a8:	ff 4f       	sbci	r31, 0xFF	; 255
    25aa:	80 81       	ld	r24, Z
    25ac:	91 81       	ldd	r25, Z+1	; 0x01
    25ae:	01 97       	sbiw	r24, 0x01	; 1
    25b0:	f1 f7       	brne	.-4      	; 0x25ae <start+0x79c>
    25b2:	fe 01       	movw	r30, r28
    25b4:	e5 56       	subi	r30, 0x65	; 101
    25b6:	ff 4f       	sbci	r31, 0xFF	; 255
    25b8:	91 83       	std	Z+1, r25	; 0x01
    25ba:	80 83       	st	Z, r24
	//initialize the LCD
	LCD_init();
	//initialize the UART
	UART_init(&Config);
	uint8 password[5] , confirmPassword[5] , passwordVerified , command ;
	while(passwordVerified == 0)
    25bc:	fe 01       	movw	r30, r28
    25be:	ec 51       	subi	r30, 0x1C	; 28
    25c0:	ff 4f       	sbci	r31, 0xFF	; 255
    25c2:	80 81       	ld	r24, Z
    25c4:	88 23       	and	r24, r24
    25c6:	09 f4       	brne	.+2      	; 0x25ca <start+0x7b8>
    25c8:	3f cc       	rjmp	.-1922   	; 0x1e48 <start+0x36>

	}

	while(1)
	{
		optionsDisplay();
    25ca:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <optionsDisplay>
		command = KEYPAD_getPressedKey();
    25ce:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_getPressedKey>
    25d2:	fe 01       	movw	r30, r28
    25d4:	ed 51       	subi	r30, 0x1D	; 29
    25d6:	ff 4f       	sbci	r31, 0xFF	; 255
    25d8:	80 83       	st	Z, r24
    25da:	fe 01       	movw	r30, r28
    25dc:	e9 56       	subi	r30, 0x69	; 105
    25de:	ff 4f       	sbci	r31, 0xFF	; 255
    25e0:	80 e0       	ldi	r24, 0x00	; 0
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	aa ef       	ldi	r26, 0xFA	; 250
    25e6:	b3 e4       	ldi	r27, 0x43	; 67
    25e8:	80 83       	st	Z, r24
    25ea:	91 83       	std	Z+1, r25	; 0x01
    25ec:	a2 83       	std	Z+2, r26	; 0x02
    25ee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25f0:	8e 01       	movw	r16, r28
    25f2:	0d 56       	subi	r16, 0x6D	; 109
    25f4:	1f 4f       	sbci	r17, 0xFF	; 255
    25f6:	fe 01       	movw	r30, r28
    25f8:	e9 56       	subi	r30, 0x69	; 105
    25fa:	ff 4f       	sbci	r31, 0xFF	; 255
    25fc:	60 81       	ld	r22, Z
    25fe:	71 81       	ldd	r23, Z+1	; 0x01
    2600:	82 81       	ldd	r24, Z+2	; 0x02
    2602:	93 81       	ldd	r25, Z+3	; 0x03
    2604:	20 e0       	ldi	r18, 0x00	; 0
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	4a ef       	ldi	r20, 0xFA	; 250
    260a:	54 e4       	ldi	r21, 0x44	; 68
    260c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2610:	dc 01       	movw	r26, r24
    2612:	cb 01       	movw	r24, r22
    2614:	f8 01       	movw	r30, r16
    2616:	80 83       	st	Z, r24
    2618:	91 83       	std	Z+1, r25	; 0x01
    261a:	a2 83       	std	Z+2, r26	; 0x02
    261c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    261e:	fe 01       	movw	r30, r28
    2620:	ed 56       	subi	r30, 0x6D	; 109
    2622:	ff 4f       	sbci	r31, 0xFF	; 255
    2624:	60 81       	ld	r22, Z
    2626:	71 81       	ldd	r23, Z+1	; 0x01
    2628:	82 81       	ldd	r24, Z+2	; 0x02
    262a:	93 81       	ldd	r25, Z+3	; 0x03
    262c:	20 e0       	ldi	r18, 0x00	; 0
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	40 e8       	ldi	r20, 0x80	; 128
    2632:	5f e3       	ldi	r21, 0x3F	; 63
    2634:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2638:	88 23       	and	r24, r24
    263a:	44 f4       	brge	.+16     	; 0x264c <start+0x83a>
		__ticks = 1;
    263c:	fe 01       	movw	r30, r28
    263e:	ef 56       	subi	r30, 0x6F	; 111
    2640:	ff 4f       	sbci	r31, 0xFF	; 255
    2642:	81 e0       	ldi	r24, 0x01	; 1
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	91 83       	std	Z+1, r25	; 0x01
    2648:	80 83       	st	Z, r24
    264a:	64 c0       	rjmp	.+200    	; 0x2714 <start+0x902>
	else if (__tmp > 65535)
    264c:	fe 01       	movw	r30, r28
    264e:	ed 56       	subi	r30, 0x6D	; 109
    2650:	ff 4f       	sbci	r31, 0xFF	; 255
    2652:	60 81       	ld	r22, Z
    2654:	71 81       	ldd	r23, Z+1	; 0x01
    2656:	82 81       	ldd	r24, Z+2	; 0x02
    2658:	93 81       	ldd	r25, Z+3	; 0x03
    265a:	20 e0       	ldi	r18, 0x00	; 0
    265c:	3f ef       	ldi	r19, 0xFF	; 255
    265e:	4f e7       	ldi	r20, 0x7F	; 127
    2660:	57 e4       	ldi	r21, 0x47	; 71
    2662:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2666:	18 16       	cp	r1, r24
    2668:	0c f0       	brlt	.+2      	; 0x266c <start+0x85a>
    266a:	43 c0       	rjmp	.+134    	; 0x26f2 <start+0x8e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    266c:	fe 01       	movw	r30, r28
    266e:	e9 56       	subi	r30, 0x69	; 105
    2670:	ff 4f       	sbci	r31, 0xFF	; 255
    2672:	60 81       	ld	r22, Z
    2674:	71 81       	ldd	r23, Z+1	; 0x01
    2676:	82 81       	ldd	r24, Z+2	; 0x02
    2678:	93 81       	ldd	r25, Z+3	; 0x03
    267a:	20 e0       	ldi	r18, 0x00	; 0
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	40 e2       	ldi	r20, 0x20	; 32
    2680:	51 e4       	ldi	r21, 0x41	; 65
    2682:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2686:	dc 01       	movw	r26, r24
    2688:	cb 01       	movw	r24, r22
    268a:	8e 01       	movw	r16, r28
    268c:	0f 56       	subi	r16, 0x6F	; 111
    268e:	1f 4f       	sbci	r17, 0xFF	; 255
    2690:	bc 01       	movw	r22, r24
    2692:	cd 01       	movw	r24, r26
    2694:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2698:	dc 01       	movw	r26, r24
    269a:	cb 01       	movw	r24, r22
    269c:	f8 01       	movw	r30, r16
    269e:	91 83       	std	Z+1, r25	; 0x01
    26a0:	80 83       	st	Z, r24
    26a2:	1f c0       	rjmp	.+62     	; 0x26e2 <start+0x8d0>
    26a4:	fe 01       	movw	r30, r28
    26a6:	e1 57       	subi	r30, 0x71	; 113
    26a8:	ff 4f       	sbci	r31, 0xFF	; 255
    26aa:	88 ec       	ldi	r24, 0xC8	; 200
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	91 83       	std	Z+1, r25	; 0x01
    26b0:	80 83       	st	Z, r24
    26b2:	fe 01       	movw	r30, r28
    26b4:	e1 57       	subi	r30, 0x71	; 113
    26b6:	ff 4f       	sbci	r31, 0xFF	; 255
    26b8:	80 81       	ld	r24, Z
    26ba:	91 81       	ldd	r25, Z+1	; 0x01
    26bc:	01 97       	sbiw	r24, 0x01	; 1
    26be:	f1 f7       	brne	.-4      	; 0x26bc <start+0x8aa>
    26c0:	fe 01       	movw	r30, r28
    26c2:	e1 57       	subi	r30, 0x71	; 113
    26c4:	ff 4f       	sbci	r31, 0xFF	; 255
    26c6:	91 83       	std	Z+1, r25	; 0x01
    26c8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ca:	de 01       	movw	r26, r28
    26cc:	af 56       	subi	r26, 0x6F	; 111
    26ce:	bf 4f       	sbci	r27, 0xFF	; 255
    26d0:	fe 01       	movw	r30, r28
    26d2:	ef 56       	subi	r30, 0x6F	; 111
    26d4:	ff 4f       	sbci	r31, 0xFF	; 255
    26d6:	80 81       	ld	r24, Z
    26d8:	91 81       	ldd	r25, Z+1	; 0x01
    26da:	01 97       	sbiw	r24, 0x01	; 1
    26dc:	11 96       	adiw	r26, 0x01	; 1
    26de:	9c 93       	st	X, r25
    26e0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26e2:	fe 01       	movw	r30, r28
    26e4:	ef 56       	subi	r30, 0x6F	; 111
    26e6:	ff 4f       	sbci	r31, 0xFF	; 255
    26e8:	80 81       	ld	r24, Z
    26ea:	91 81       	ldd	r25, Z+1	; 0x01
    26ec:	00 97       	sbiw	r24, 0x00	; 0
    26ee:	d1 f6       	brne	.-76     	; 0x26a4 <start+0x892>
    26f0:	27 c0       	rjmp	.+78     	; 0x2740 <start+0x92e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26f2:	8e 01       	movw	r16, r28
    26f4:	0f 56       	subi	r16, 0x6F	; 111
    26f6:	1f 4f       	sbci	r17, 0xFF	; 255
    26f8:	fe 01       	movw	r30, r28
    26fa:	ed 56       	subi	r30, 0x6D	; 109
    26fc:	ff 4f       	sbci	r31, 0xFF	; 255
    26fe:	60 81       	ld	r22, Z
    2700:	71 81       	ldd	r23, Z+1	; 0x01
    2702:	82 81       	ldd	r24, Z+2	; 0x02
    2704:	93 81       	ldd	r25, Z+3	; 0x03
    2706:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    270a:	dc 01       	movw	r26, r24
    270c:	cb 01       	movw	r24, r22
    270e:	f8 01       	movw	r30, r16
    2710:	91 83       	std	Z+1, r25	; 0x01
    2712:	80 83       	st	Z, r24
    2714:	de 01       	movw	r26, r28
    2716:	a3 57       	subi	r26, 0x73	; 115
    2718:	bf 4f       	sbci	r27, 0xFF	; 255
    271a:	fe 01       	movw	r30, r28
    271c:	ef 56       	subi	r30, 0x6F	; 111
    271e:	ff 4f       	sbci	r31, 0xFF	; 255
    2720:	80 81       	ld	r24, Z
    2722:	91 81       	ldd	r25, Z+1	; 0x01
    2724:	8d 93       	st	X+, r24
    2726:	9c 93       	st	X, r25
    2728:	fe 01       	movw	r30, r28
    272a:	e3 57       	subi	r30, 0x73	; 115
    272c:	ff 4f       	sbci	r31, 0xFF	; 255
    272e:	80 81       	ld	r24, Z
    2730:	91 81       	ldd	r25, Z+1	; 0x01
    2732:	01 97       	sbiw	r24, 0x01	; 1
    2734:	f1 f7       	brne	.-4      	; 0x2732 <start+0x920>
    2736:	fe 01       	movw	r30, r28
    2738:	e3 57       	subi	r30, 0x73	; 115
    273a:	ff 4f       	sbci	r31, 0xFF	; 255
    273c:	91 83       	std	Z+1, r25	; 0x01
    273e:	80 83       	st	Z, r24
		_delay_ms(KEYPAD_DELAY);
		UART_sendByte(command);
    2740:	fe 01       	movw	r30, r28
    2742:	ed 51       	subi	r30, 0x1D	; 29
    2744:	ff 4f       	sbci	r31, 0xFF	; 255
    2746:	80 81       	ld	r24, Z
    2748:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <UART_sendByte>
    274c:	fe 01       	movw	r30, r28
    274e:	e7 57       	subi	r30, 0x77	; 119
    2750:	ff 4f       	sbci	r31, 0xFF	; 255
    2752:	80 e0       	ldi	r24, 0x00	; 0
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	a8 e4       	ldi	r26, 0x48	; 72
    2758:	b2 e4       	ldi	r27, 0x42	; 66
    275a:	80 83       	st	Z, r24
    275c:	91 83       	std	Z+1, r25	; 0x01
    275e:	a2 83       	std	Z+2, r26	; 0x02
    2760:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2762:	8e 01       	movw	r16, r28
    2764:	0b 57       	subi	r16, 0x7B	; 123
    2766:	1f 4f       	sbci	r17, 0xFF	; 255
    2768:	fe 01       	movw	r30, r28
    276a:	e7 57       	subi	r30, 0x77	; 119
    276c:	ff 4f       	sbci	r31, 0xFF	; 255
    276e:	60 81       	ld	r22, Z
    2770:	71 81       	ldd	r23, Z+1	; 0x01
    2772:	82 81       	ldd	r24, Z+2	; 0x02
    2774:	93 81       	ldd	r25, Z+3	; 0x03
    2776:	20 e0       	ldi	r18, 0x00	; 0
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	4a ef       	ldi	r20, 0xFA	; 250
    277c:	54 e4       	ldi	r21, 0x44	; 68
    277e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2782:	dc 01       	movw	r26, r24
    2784:	cb 01       	movw	r24, r22
    2786:	f8 01       	movw	r30, r16
    2788:	80 83       	st	Z, r24
    278a:	91 83       	std	Z+1, r25	; 0x01
    278c:	a2 83       	std	Z+2, r26	; 0x02
    278e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2790:	fe 01       	movw	r30, r28
    2792:	eb 57       	subi	r30, 0x7B	; 123
    2794:	ff 4f       	sbci	r31, 0xFF	; 255
    2796:	60 81       	ld	r22, Z
    2798:	71 81       	ldd	r23, Z+1	; 0x01
    279a:	82 81       	ldd	r24, Z+2	; 0x02
    279c:	93 81       	ldd	r25, Z+3	; 0x03
    279e:	20 e0       	ldi	r18, 0x00	; 0
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	40 e8       	ldi	r20, 0x80	; 128
    27a4:	5f e3       	ldi	r21, 0x3F	; 63
    27a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27aa:	88 23       	and	r24, r24
    27ac:	44 f4       	brge	.+16     	; 0x27be <start+0x9ac>
		__ticks = 1;
    27ae:	fe 01       	movw	r30, r28
    27b0:	ed 57       	subi	r30, 0x7D	; 125
    27b2:	ff 4f       	sbci	r31, 0xFF	; 255
    27b4:	81 e0       	ldi	r24, 0x01	; 1
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	91 83       	std	Z+1, r25	; 0x01
    27ba:	80 83       	st	Z, r24
    27bc:	64 c0       	rjmp	.+200    	; 0x2886 <start+0xa74>
	else if (__tmp > 65535)
    27be:	fe 01       	movw	r30, r28
    27c0:	eb 57       	subi	r30, 0x7B	; 123
    27c2:	ff 4f       	sbci	r31, 0xFF	; 255
    27c4:	60 81       	ld	r22, Z
    27c6:	71 81       	ldd	r23, Z+1	; 0x01
    27c8:	82 81       	ldd	r24, Z+2	; 0x02
    27ca:	93 81       	ldd	r25, Z+3	; 0x03
    27cc:	20 e0       	ldi	r18, 0x00	; 0
    27ce:	3f ef       	ldi	r19, 0xFF	; 255
    27d0:	4f e7       	ldi	r20, 0x7F	; 127
    27d2:	57 e4       	ldi	r21, 0x47	; 71
    27d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27d8:	18 16       	cp	r1, r24
    27da:	0c f0       	brlt	.+2      	; 0x27de <start+0x9cc>
    27dc:	43 c0       	rjmp	.+134    	; 0x2864 <start+0xa52>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27de:	fe 01       	movw	r30, r28
    27e0:	e7 57       	subi	r30, 0x77	; 119
    27e2:	ff 4f       	sbci	r31, 0xFF	; 255
    27e4:	60 81       	ld	r22, Z
    27e6:	71 81       	ldd	r23, Z+1	; 0x01
    27e8:	82 81       	ldd	r24, Z+2	; 0x02
    27ea:	93 81       	ldd	r25, Z+3	; 0x03
    27ec:	20 e0       	ldi	r18, 0x00	; 0
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	40 e2       	ldi	r20, 0x20	; 32
    27f2:	51 e4       	ldi	r21, 0x41	; 65
    27f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27f8:	dc 01       	movw	r26, r24
    27fa:	cb 01       	movw	r24, r22
    27fc:	8e 01       	movw	r16, r28
    27fe:	0d 57       	subi	r16, 0x7D	; 125
    2800:	1f 4f       	sbci	r17, 0xFF	; 255
    2802:	bc 01       	movw	r22, r24
    2804:	cd 01       	movw	r24, r26
    2806:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    280a:	dc 01       	movw	r26, r24
    280c:	cb 01       	movw	r24, r22
    280e:	f8 01       	movw	r30, r16
    2810:	91 83       	std	Z+1, r25	; 0x01
    2812:	80 83       	st	Z, r24
    2814:	1f c0       	rjmp	.+62     	; 0x2854 <start+0xa42>
    2816:	fe 01       	movw	r30, r28
    2818:	ef 57       	subi	r30, 0x7F	; 127
    281a:	ff 4f       	sbci	r31, 0xFF	; 255
    281c:	88 ec       	ldi	r24, 0xC8	; 200
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	91 83       	std	Z+1, r25	; 0x01
    2822:	80 83       	st	Z, r24
    2824:	fe 01       	movw	r30, r28
    2826:	ef 57       	subi	r30, 0x7F	; 127
    2828:	ff 4f       	sbci	r31, 0xFF	; 255
    282a:	80 81       	ld	r24, Z
    282c:	91 81       	ldd	r25, Z+1	; 0x01
    282e:	01 97       	sbiw	r24, 0x01	; 1
    2830:	f1 f7       	brne	.-4      	; 0x282e <start+0xa1c>
    2832:	fe 01       	movw	r30, r28
    2834:	ef 57       	subi	r30, 0x7F	; 127
    2836:	ff 4f       	sbci	r31, 0xFF	; 255
    2838:	91 83       	std	Z+1, r25	; 0x01
    283a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    283c:	de 01       	movw	r26, r28
    283e:	ad 57       	subi	r26, 0x7D	; 125
    2840:	bf 4f       	sbci	r27, 0xFF	; 255
    2842:	fe 01       	movw	r30, r28
    2844:	ed 57       	subi	r30, 0x7D	; 125
    2846:	ff 4f       	sbci	r31, 0xFF	; 255
    2848:	80 81       	ld	r24, Z
    284a:	91 81       	ldd	r25, Z+1	; 0x01
    284c:	01 97       	sbiw	r24, 0x01	; 1
    284e:	11 96       	adiw	r26, 0x01	; 1
    2850:	9c 93       	st	X, r25
    2852:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2854:	fe 01       	movw	r30, r28
    2856:	ed 57       	subi	r30, 0x7D	; 125
    2858:	ff 4f       	sbci	r31, 0xFF	; 255
    285a:	80 81       	ld	r24, Z
    285c:	91 81       	ldd	r25, Z+1	; 0x01
    285e:	00 97       	sbiw	r24, 0x00	; 0
    2860:	d1 f6       	brne	.-76     	; 0x2816 <start+0xa04>
    2862:	28 c0       	rjmp	.+80     	; 0x28b4 <start+0xaa2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2864:	8e 01       	movw	r16, r28
    2866:	0d 57       	subi	r16, 0x7D	; 125
    2868:	1f 4f       	sbci	r17, 0xFF	; 255
    286a:	fe 01       	movw	r30, r28
    286c:	eb 57       	subi	r30, 0x7B	; 123
    286e:	ff 4f       	sbci	r31, 0xFF	; 255
    2870:	60 81       	ld	r22, Z
    2872:	71 81       	ldd	r23, Z+1	; 0x01
    2874:	82 81       	ldd	r24, Z+2	; 0x02
    2876:	93 81       	ldd	r25, Z+3	; 0x03
    2878:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    287c:	dc 01       	movw	r26, r24
    287e:	cb 01       	movw	r24, r22
    2880:	f8 01       	movw	r30, r16
    2882:	91 83       	std	Z+1, r25	; 0x01
    2884:	80 83       	st	Z, r24
    2886:	de 01       	movw	r26, r28
    2888:	a1 58       	subi	r26, 0x81	; 129
    288a:	bf 4f       	sbci	r27, 0xFF	; 255
    288c:	fe 01       	movw	r30, r28
    288e:	ed 57       	subi	r30, 0x7D	; 125
    2890:	ff 4f       	sbci	r31, 0xFF	; 255
    2892:	80 81       	ld	r24, Z
    2894:	91 81       	ldd	r25, Z+1	; 0x01
    2896:	11 96       	adiw	r26, 0x01	; 1
    2898:	9c 93       	st	X, r25
    289a:	8e 93       	st	-X, r24
    289c:	fe 01       	movw	r30, r28
    289e:	e1 58       	subi	r30, 0x81	; 129
    28a0:	ff 4f       	sbci	r31, 0xFF	; 255
    28a2:	80 81       	ld	r24, Z
    28a4:	91 81       	ldd	r25, Z+1	; 0x01
    28a6:	01 97       	sbiw	r24, 0x01	; 1
    28a8:	f1 f7       	brne	.-4      	; 0x28a6 <start+0xa94>
    28aa:	fe 01       	movw	r30, r28
    28ac:	e1 58       	subi	r30, 0x81	; 129
    28ae:	ff 4f       	sbci	r31, 0xFF	; 255
    28b0:	91 83       	std	Z+1, r25	; 0x01
    28b2:	80 83       	st	Z, r24
		_delay_ms(UART_DELAY);
		if(command == '+')
    28b4:	fe 01       	movw	r30, r28
    28b6:	ed 51       	subi	r30, 0x1D	; 29
    28b8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ba:	80 81       	ld	r24, Z
    28bc:	8b 32       	cpi	r24, 0x2B	; 43
    28be:	09 f0       	breq	.+2      	; 0x28c2 <start+0xab0>
    28c0:	a0 c1       	rjmp	.+832    	; 0x2c02 <start+0xdf0>
		{
			LCD_clearScreen();
    28c2:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <LCD_clearScreen>
			LCD_displayString("Plz enter pass");
    28c6:	80 e6       	ldi	r24, 0x60	; 96
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <LCD_displayString>
			enterPassword(password);
    28ce:	ce 01       	movw	r24, r28
    28d0:	8b 51       	subi	r24, 0x1B	; 27
    28d2:	9f 4f       	sbci	r25, 0xFF	; 255
    28d4:	0e 94 31 1a 	call	0x3462	; 0x3462 <enterPassword>
    28d8:	fe 01       	movw	r30, r28
    28da:	e5 58       	subi	r30, 0x85	; 133
    28dc:	ff 4f       	sbci	r31, 0xFF	; 255
    28de:	80 e0       	ldi	r24, 0x00	; 0
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	a8 e4       	ldi	r26, 0x48	; 72
    28e4:	b2 e4       	ldi	r27, 0x42	; 66
    28e6:	80 83       	st	Z, r24
    28e8:	91 83       	std	Z+1, r25	; 0x01
    28ea:	a2 83       	std	Z+2, r26	; 0x02
    28ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ee:	8e 01       	movw	r16, r28
    28f0:	09 58       	subi	r16, 0x89	; 137
    28f2:	1f 4f       	sbci	r17, 0xFF	; 255
    28f4:	fe 01       	movw	r30, r28
    28f6:	e5 58       	subi	r30, 0x85	; 133
    28f8:	ff 4f       	sbci	r31, 0xFF	; 255
    28fa:	60 81       	ld	r22, Z
    28fc:	71 81       	ldd	r23, Z+1	; 0x01
    28fe:	82 81       	ldd	r24, Z+2	; 0x02
    2900:	93 81       	ldd	r25, Z+3	; 0x03
    2902:	20 e0       	ldi	r18, 0x00	; 0
    2904:	30 e0       	ldi	r19, 0x00	; 0
    2906:	4a ef       	ldi	r20, 0xFA	; 250
    2908:	54 e4       	ldi	r21, 0x44	; 68
    290a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    290e:	dc 01       	movw	r26, r24
    2910:	cb 01       	movw	r24, r22
    2912:	f8 01       	movw	r30, r16
    2914:	80 83       	st	Z, r24
    2916:	91 83       	std	Z+1, r25	; 0x01
    2918:	a2 83       	std	Z+2, r26	; 0x02
    291a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    291c:	fe 01       	movw	r30, r28
    291e:	e9 58       	subi	r30, 0x89	; 137
    2920:	ff 4f       	sbci	r31, 0xFF	; 255
    2922:	60 81       	ld	r22, Z
    2924:	71 81       	ldd	r23, Z+1	; 0x01
    2926:	82 81       	ldd	r24, Z+2	; 0x02
    2928:	93 81       	ldd	r25, Z+3	; 0x03
    292a:	20 e0       	ldi	r18, 0x00	; 0
    292c:	30 e0       	ldi	r19, 0x00	; 0
    292e:	40 e8       	ldi	r20, 0x80	; 128
    2930:	5f e3       	ldi	r21, 0x3F	; 63
    2932:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2936:	88 23       	and	r24, r24
    2938:	44 f4       	brge	.+16     	; 0x294a <start+0xb38>
		__ticks = 1;
    293a:	fe 01       	movw	r30, r28
    293c:	eb 58       	subi	r30, 0x8B	; 139
    293e:	ff 4f       	sbci	r31, 0xFF	; 255
    2940:	81 e0       	ldi	r24, 0x01	; 1
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	91 83       	std	Z+1, r25	; 0x01
    2946:	80 83       	st	Z, r24
    2948:	64 c0       	rjmp	.+200    	; 0x2a12 <start+0xc00>
	else if (__tmp > 65535)
    294a:	fe 01       	movw	r30, r28
    294c:	e9 58       	subi	r30, 0x89	; 137
    294e:	ff 4f       	sbci	r31, 0xFF	; 255
    2950:	60 81       	ld	r22, Z
    2952:	71 81       	ldd	r23, Z+1	; 0x01
    2954:	82 81       	ldd	r24, Z+2	; 0x02
    2956:	93 81       	ldd	r25, Z+3	; 0x03
    2958:	20 e0       	ldi	r18, 0x00	; 0
    295a:	3f ef       	ldi	r19, 0xFF	; 255
    295c:	4f e7       	ldi	r20, 0x7F	; 127
    295e:	57 e4       	ldi	r21, 0x47	; 71
    2960:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2964:	18 16       	cp	r1, r24
    2966:	0c f0       	brlt	.+2      	; 0x296a <start+0xb58>
    2968:	43 c0       	rjmp	.+134    	; 0x29f0 <start+0xbde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    296a:	fe 01       	movw	r30, r28
    296c:	e5 58       	subi	r30, 0x85	; 133
    296e:	ff 4f       	sbci	r31, 0xFF	; 255
    2970:	60 81       	ld	r22, Z
    2972:	71 81       	ldd	r23, Z+1	; 0x01
    2974:	82 81       	ldd	r24, Z+2	; 0x02
    2976:	93 81       	ldd	r25, Z+3	; 0x03
    2978:	20 e0       	ldi	r18, 0x00	; 0
    297a:	30 e0       	ldi	r19, 0x00	; 0
    297c:	40 e2       	ldi	r20, 0x20	; 32
    297e:	51 e4       	ldi	r21, 0x41	; 65
    2980:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2984:	dc 01       	movw	r26, r24
    2986:	cb 01       	movw	r24, r22
    2988:	8e 01       	movw	r16, r28
    298a:	0b 58       	subi	r16, 0x8B	; 139
    298c:	1f 4f       	sbci	r17, 0xFF	; 255
    298e:	bc 01       	movw	r22, r24
    2990:	cd 01       	movw	r24, r26
    2992:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2996:	dc 01       	movw	r26, r24
    2998:	cb 01       	movw	r24, r22
    299a:	f8 01       	movw	r30, r16
    299c:	91 83       	std	Z+1, r25	; 0x01
    299e:	80 83       	st	Z, r24
    29a0:	1f c0       	rjmp	.+62     	; 0x29e0 <start+0xbce>
    29a2:	fe 01       	movw	r30, r28
    29a4:	ed 58       	subi	r30, 0x8D	; 141
    29a6:	ff 4f       	sbci	r31, 0xFF	; 255
    29a8:	88 ec       	ldi	r24, 0xC8	; 200
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	91 83       	std	Z+1, r25	; 0x01
    29ae:	80 83       	st	Z, r24
    29b0:	fe 01       	movw	r30, r28
    29b2:	ed 58       	subi	r30, 0x8D	; 141
    29b4:	ff 4f       	sbci	r31, 0xFF	; 255
    29b6:	80 81       	ld	r24, Z
    29b8:	91 81       	ldd	r25, Z+1	; 0x01
    29ba:	01 97       	sbiw	r24, 0x01	; 1
    29bc:	f1 f7       	brne	.-4      	; 0x29ba <start+0xba8>
    29be:	fe 01       	movw	r30, r28
    29c0:	ed 58       	subi	r30, 0x8D	; 141
    29c2:	ff 4f       	sbci	r31, 0xFF	; 255
    29c4:	91 83       	std	Z+1, r25	; 0x01
    29c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29c8:	de 01       	movw	r26, r28
    29ca:	ab 58       	subi	r26, 0x8B	; 139
    29cc:	bf 4f       	sbci	r27, 0xFF	; 255
    29ce:	fe 01       	movw	r30, r28
    29d0:	eb 58       	subi	r30, 0x8B	; 139
    29d2:	ff 4f       	sbci	r31, 0xFF	; 255
    29d4:	80 81       	ld	r24, Z
    29d6:	91 81       	ldd	r25, Z+1	; 0x01
    29d8:	01 97       	sbiw	r24, 0x01	; 1
    29da:	11 96       	adiw	r26, 0x01	; 1
    29dc:	9c 93       	st	X, r25
    29de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29e0:	fe 01       	movw	r30, r28
    29e2:	eb 58       	subi	r30, 0x8B	; 139
    29e4:	ff 4f       	sbci	r31, 0xFF	; 255
    29e6:	80 81       	ld	r24, Z
    29e8:	91 81       	ldd	r25, Z+1	; 0x01
    29ea:	00 97       	sbiw	r24, 0x00	; 0
    29ec:	d1 f6       	brne	.-76     	; 0x29a2 <start+0xb90>
    29ee:	27 c0       	rjmp	.+78     	; 0x2a3e <start+0xc2c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29f0:	8e 01       	movw	r16, r28
    29f2:	0b 58       	subi	r16, 0x8B	; 139
    29f4:	1f 4f       	sbci	r17, 0xFF	; 255
    29f6:	fe 01       	movw	r30, r28
    29f8:	e9 58       	subi	r30, 0x89	; 137
    29fa:	ff 4f       	sbci	r31, 0xFF	; 255
    29fc:	60 81       	ld	r22, Z
    29fe:	71 81       	ldd	r23, Z+1	; 0x01
    2a00:	82 81       	ldd	r24, Z+2	; 0x02
    2a02:	93 81       	ldd	r25, Z+3	; 0x03
    2a04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a08:	dc 01       	movw	r26, r24
    2a0a:	cb 01       	movw	r24, r22
    2a0c:	f8 01       	movw	r30, r16
    2a0e:	91 83       	std	Z+1, r25	; 0x01
    2a10:	80 83       	st	Z, r24
    2a12:	de 01       	movw	r26, r28
    2a14:	af 58       	subi	r26, 0x8F	; 143
    2a16:	bf 4f       	sbci	r27, 0xFF	; 255
    2a18:	fe 01       	movw	r30, r28
    2a1a:	eb 58       	subi	r30, 0x8B	; 139
    2a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1e:	80 81       	ld	r24, Z
    2a20:	91 81       	ldd	r25, Z+1	; 0x01
    2a22:	8d 93       	st	X+, r24
    2a24:	9c 93       	st	X, r25
    2a26:	fe 01       	movw	r30, r28
    2a28:	ef 58       	subi	r30, 0x8F	; 143
    2a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2c:	80 81       	ld	r24, Z
    2a2e:	91 81       	ldd	r25, Z+1	; 0x01
    2a30:	01 97       	sbiw	r24, 0x01	; 1
    2a32:	f1 f7       	brne	.-4      	; 0x2a30 <start+0xc1e>
    2a34:	fe 01       	movw	r30, r28
    2a36:	ef 58       	subi	r30, 0x8F	; 143
    2a38:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3a:	91 83       	std	Z+1, r25	; 0x01
    2a3c:	80 83       	st	Z, r24
			_delay_ms(UART_DELAY);
			sendPassword(password);
    2a3e:	ce 01       	movw	r24, r28
    2a40:	8b 51       	subi	r24, 0x1B	; 27
    2a42:	9f 4f       	sbci	r25, 0xFF	; 255
    2a44:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <sendPassword>
			passwordVerified = 0;
    2a48:	fe 01       	movw	r30, r28
    2a4a:	ec 51       	subi	r30, 0x1C	; 28
    2a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4e:	10 82       	st	Z, r1
			passwordVerified = UART_recieveByte();
    2a50:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <UART_recieveByte>
    2a54:	fe 01       	movw	r30, r28
    2a56:	ec 51       	subi	r30, 0x1C	; 28
    2a58:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5a:	80 83       	st	Z, r24
			if(passwordVerified)
    2a5c:	fe 01       	movw	r30, r28
    2a5e:	ec 51       	subi	r30, 0x1C	; 28
    2a60:	ff 4f       	sbci	r31, 0xFF	; 255
    2a62:	80 81       	ld	r24, Z
    2a64:	88 23       	and	r24, r24
    2a66:	19 f0       	breq	.+6      	; 0x2a6e <start+0xc5c>
			{
				openDoor();
    2a68:	0e 94 02 1c 	call	0x3804	; 0x3804 <openDoor>
    2a6c:	ae cd       	rjmp	.-1188   	; 0x25ca <start+0x7b8>
			}

			else
			{
				uint8 falsePasswordCounter = UART_recieveByte();
    2a6e:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <UART_recieveByte>
    2a72:	fe 01       	movw	r30, r28
    2a74:	ee 51       	subi	r30, 0x1E	; 30
    2a76:	ff 4f       	sbci	r31, 0xFF	; 255
    2a78:	80 83       	st	Z, r24
				if(falsePasswordCounter >=3)
    2a7a:	fe 01       	movw	r30, r28
    2a7c:	ee 51       	subi	r30, 0x1E	; 30
    2a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a80:	80 81       	ld	r24, Z
    2a82:	83 30       	cpi	r24, 0x03	; 3
    2a84:	18 f0       	brcs	.+6      	; 0x2a8c <start+0xc7a>
				{
					securityAlarm();
    2a86:	0e 94 27 1c 	call	0x384e	; 0x384e <securityAlarm>
    2a8a:	9f cd       	rjmp	.-1218   	; 0x25ca <start+0x7b8>
				}

				else
				{
					LCD_clearScreen();
    2a8c:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <LCD_clearScreen>
					LCD_displayString("Wrong Password");
    2a90:	8b e8       	ldi	r24, 0x8B	; 139
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <LCD_displayString>
    2a98:	fe 01       	movw	r30, r28
    2a9a:	e3 59       	subi	r30, 0x93	; 147
    2a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9e:	80 e0       	ldi	r24, 0x00	; 0
    2aa0:	90 e4       	ldi	r25, 0x40	; 64
    2aa2:	ac e1       	ldi	r26, 0x1C	; 28
    2aa4:	b5 e4       	ldi	r27, 0x45	; 69
    2aa6:	80 83       	st	Z, r24
    2aa8:	91 83       	std	Z+1, r25	; 0x01
    2aaa:	a2 83       	std	Z+2, r26	; 0x02
    2aac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aae:	8e 01       	movw	r16, r28
    2ab0:	07 59       	subi	r16, 0x97	; 151
    2ab2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ab4:	fe 01       	movw	r30, r28
    2ab6:	e3 59       	subi	r30, 0x93	; 147
    2ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aba:	60 81       	ld	r22, Z
    2abc:	71 81       	ldd	r23, Z+1	; 0x01
    2abe:	82 81       	ldd	r24, Z+2	; 0x02
    2ac0:	93 81       	ldd	r25, Z+3	; 0x03
    2ac2:	20 e0       	ldi	r18, 0x00	; 0
    2ac4:	30 e0       	ldi	r19, 0x00	; 0
    2ac6:	4a ef       	ldi	r20, 0xFA	; 250
    2ac8:	54 e4       	ldi	r21, 0x44	; 68
    2aca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ace:	dc 01       	movw	r26, r24
    2ad0:	cb 01       	movw	r24, r22
    2ad2:	f8 01       	movw	r30, r16
    2ad4:	80 83       	st	Z, r24
    2ad6:	91 83       	std	Z+1, r25	; 0x01
    2ad8:	a2 83       	std	Z+2, r26	; 0x02
    2ada:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2adc:	fe 01       	movw	r30, r28
    2ade:	e7 59       	subi	r30, 0x97	; 151
    2ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae2:	60 81       	ld	r22, Z
    2ae4:	71 81       	ldd	r23, Z+1	; 0x01
    2ae6:	82 81       	ldd	r24, Z+2	; 0x02
    2ae8:	93 81       	ldd	r25, Z+3	; 0x03
    2aea:	20 e0       	ldi	r18, 0x00	; 0
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	40 e8       	ldi	r20, 0x80	; 128
    2af0:	5f e3       	ldi	r21, 0x3F	; 63
    2af2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2af6:	88 23       	and	r24, r24
    2af8:	44 f4       	brge	.+16     	; 0x2b0a <start+0xcf8>
		__ticks = 1;
    2afa:	fe 01       	movw	r30, r28
    2afc:	e9 59       	subi	r30, 0x99	; 153
    2afe:	ff 4f       	sbci	r31, 0xFF	; 255
    2b00:	81 e0       	ldi	r24, 0x01	; 1
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	91 83       	std	Z+1, r25	; 0x01
    2b06:	80 83       	st	Z, r24
    2b08:	64 c0       	rjmp	.+200    	; 0x2bd2 <start+0xdc0>
	else if (__tmp > 65535)
    2b0a:	fe 01       	movw	r30, r28
    2b0c:	e7 59       	subi	r30, 0x97	; 151
    2b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b10:	60 81       	ld	r22, Z
    2b12:	71 81       	ldd	r23, Z+1	; 0x01
    2b14:	82 81       	ldd	r24, Z+2	; 0x02
    2b16:	93 81       	ldd	r25, Z+3	; 0x03
    2b18:	20 e0       	ldi	r18, 0x00	; 0
    2b1a:	3f ef       	ldi	r19, 0xFF	; 255
    2b1c:	4f e7       	ldi	r20, 0x7F	; 127
    2b1e:	57 e4       	ldi	r21, 0x47	; 71
    2b20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b24:	18 16       	cp	r1, r24
    2b26:	0c f0       	brlt	.+2      	; 0x2b2a <start+0xd18>
    2b28:	43 c0       	rjmp	.+134    	; 0x2bb0 <start+0xd9e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b2a:	fe 01       	movw	r30, r28
    2b2c:	e3 59       	subi	r30, 0x93	; 147
    2b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b30:	60 81       	ld	r22, Z
    2b32:	71 81       	ldd	r23, Z+1	; 0x01
    2b34:	82 81       	ldd	r24, Z+2	; 0x02
    2b36:	93 81       	ldd	r25, Z+3	; 0x03
    2b38:	20 e0       	ldi	r18, 0x00	; 0
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	40 e2       	ldi	r20, 0x20	; 32
    2b3e:	51 e4       	ldi	r21, 0x41	; 65
    2b40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b44:	dc 01       	movw	r26, r24
    2b46:	cb 01       	movw	r24, r22
    2b48:	8e 01       	movw	r16, r28
    2b4a:	09 59       	subi	r16, 0x99	; 153
    2b4c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b4e:	bc 01       	movw	r22, r24
    2b50:	cd 01       	movw	r24, r26
    2b52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b56:	dc 01       	movw	r26, r24
    2b58:	cb 01       	movw	r24, r22
    2b5a:	f8 01       	movw	r30, r16
    2b5c:	91 83       	std	Z+1, r25	; 0x01
    2b5e:	80 83       	st	Z, r24
    2b60:	1f c0       	rjmp	.+62     	; 0x2ba0 <start+0xd8e>
    2b62:	fe 01       	movw	r30, r28
    2b64:	eb 59       	subi	r30, 0x9B	; 155
    2b66:	ff 4f       	sbci	r31, 0xFF	; 255
    2b68:	88 ec       	ldi	r24, 0xC8	; 200
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	91 83       	std	Z+1, r25	; 0x01
    2b6e:	80 83       	st	Z, r24
    2b70:	fe 01       	movw	r30, r28
    2b72:	eb 59       	subi	r30, 0x9B	; 155
    2b74:	ff 4f       	sbci	r31, 0xFF	; 255
    2b76:	80 81       	ld	r24, Z
    2b78:	91 81       	ldd	r25, Z+1	; 0x01
    2b7a:	01 97       	sbiw	r24, 0x01	; 1
    2b7c:	f1 f7       	brne	.-4      	; 0x2b7a <start+0xd68>
    2b7e:	fe 01       	movw	r30, r28
    2b80:	eb 59       	subi	r30, 0x9B	; 155
    2b82:	ff 4f       	sbci	r31, 0xFF	; 255
    2b84:	91 83       	std	Z+1, r25	; 0x01
    2b86:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b88:	de 01       	movw	r26, r28
    2b8a:	a9 59       	subi	r26, 0x99	; 153
    2b8c:	bf 4f       	sbci	r27, 0xFF	; 255
    2b8e:	fe 01       	movw	r30, r28
    2b90:	e9 59       	subi	r30, 0x99	; 153
    2b92:	ff 4f       	sbci	r31, 0xFF	; 255
    2b94:	80 81       	ld	r24, Z
    2b96:	91 81       	ldd	r25, Z+1	; 0x01
    2b98:	01 97       	sbiw	r24, 0x01	; 1
    2b9a:	11 96       	adiw	r26, 0x01	; 1
    2b9c:	9c 93       	st	X, r25
    2b9e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ba0:	fe 01       	movw	r30, r28
    2ba2:	e9 59       	subi	r30, 0x99	; 153
    2ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba6:	80 81       	ld	r24, Z
    2ba8:	91 81       	ldd	r25, Z+1	; 0x01
    2baa:	00 97       	sbiw	r24, 0x00	; 0
    2bac:	d1 f6       	brne	.-76     	; 0x2b62 <start+0xd50>
    2bae:	0d cd       	rjmp	.-1510   	; 0x25ca <start+0x7b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bb0:	8e 01       	movw	r16, r28
    2bb2:	09 59       	subi	r16, 0x99	; 153
    2bb4:	1f 4f       	sbci	r17, 0xFF	; 255
    2bb6:	fe 01       	movw	r30, r28
    2bb8:	e7 59       	subi	r30, 0x97	; 151
    2bba:	ff 4f       	sbci	r31, 0xFF	; 255
    2bbc:	60 81       	ld	r22, Z
    2bbe:	71 81       	ldd	r23, Z+1	; 0x01
    2bc0:	82 81       	ldd	r24, Z+2	; 0x02
    2bc2:	93 81       	ldd	r25, Z+3	; 0x03
    2bc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc8:	dc 01       	movw	r26, r24
    2bca:	cb 01       	movw	r24, r22
    2bcc:	f8 01       	movw	r30, r16
    2bce:	91 83       	std	Z+1, r25	; 0x01
    2bd0:	80 83       	st	Z, r24
    2bd2:	de 01       	movw	r26, r28
    2bd4:	ad 59       	subi	r26, 0x9D	; 157
    2bd6:	bf 4f       	sbci	r27, 0xFF	; 255
    2bd8:	fe 01       	movw	r30, r28
    2bda:	e9 59       	subi	r30, 0x99	; 153
    2bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bde:	80 81       	ld	r24, Z
    2be0:	91 81       	ldd	r25, Z+1	; 0x01
    2be2:	11 96       	adiw	r26, 0x01	; 1
    2be4:	9c 93       	st	X, r25
    2be6:	8e 93       	st	-X, r24
    2be8:	fe 01       	movw	r30, r28
    2bea:	ed 59       	subi	r30, 0x9D	; 157
    2bec:	ff 4f       	sbci	r31, 0xFF	; 255
    2bee:	80 81       	ld	r24, Z
    2bf0:	91 81       	ldd	r25, Z+1	; 0x01
    2bf2:	01 97       	sbiw	r24, 0x01	; 1
    2bf4:	f1 f7       	brne	.-4      	; 0x2bf2 <start+0xde0>
    2bf6:	fe 01       	movw	r30, r28
    2bf8:	ed 59       	subi	r30, 0x9D	; 157
    2bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfc:	91 83       	std	Z+1, r25	; 0x01
    2bfe:	80 83       	st	Z, r24
    2c00:	e4 cc       	rjmp	.-1592   	; 0x25ca <start+0x7b8>

			}

		}

		else if(command == '-')
    2c02:	fe 01       	movw	r30, r28
    2c04:	ed 51       	subi	r30, 0x1D	; 29
    2c06:	ff 4f       	sbci	r31, 0xFF	; 255
    2c08:	80 81       	ld	r24, Z
    2c0a:	8d 32       	cpi	r24, 0x2D	; 45
    2c0c:	09 f0       	breq	.+2      	; 0x2c10 <start+0xdfe>
    2c0e:	dd cc       	rjmp	.-1606   	; 0x25ca <start+0x7b8>
		{
			LCD_clearScreen();
    2c10:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <LCD_clearScreen>
			LCD_displayString("Enter old pass");
    2c14:	8a e9       	ldi	r24, 0x9A	; 154
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <LCD_displayString>


			enterPassword(password);
    2c1c:	ce 01       	movw	r24, r28
    2c1e:	8b 51       	subi	r24, 0x1B	; 27
    2c20:	9f 4f       	sbci	r25, 0xFF	; 255
    2c22:	0e 94 31 1a 	call	0x3462	; 0x3462 <enterPassword>
    2c26:	fe 01       	movw	r30, r28
    2c28:	e1 5a       	subi	r30, 0xA1	; 161
    2c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2c:	80 e0       	ldi	r24, 0x00	; 0
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	a8 e4       	ldi	r26, 0x48	; 72
    2c32:	b2 e4       	ldi	r27, 0x42	; 66
    2c34:	80 83       	st	Z, r24
    2c36:	91 83       	std	Z+1, r25	; 0x01
    2c38:	a2 83       	std	Z+2, r26	; 0x02
    2c3a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c3c:	8e 01       	movw	r16, r28
    2c3e:	05 5a       	subi	r16, 0xA5	; 165
    2c40:	1f 4f       	sbci	r17, 0xFF	; 255
    2c42:	fe 01       	movw	r30, r28
    2c44:	e1 5a       	subi	r30, 0xA1	; 161
    2c46:	ff 4f       	sbci	r31, 0xFF	; 255
    2c48:	60 81       	ld	r22, Z
    2c4a:	71 81       	ldd	r23, Z+1	; 0x01
    2c4c:	82 81       	ldd	r24, Z+2	; 0x02
    2c4e:	93 81       	ldd	r25, Z+3	; 0x03
    2c50:	20 e0       	ldi	r18, 0x00	; 0
    2c52:	30 e0       	ldi	r19, 0x00	; 0
    2c54:	4a ef       	ldi	r20, 0xFA	; 250
    2c56:	54 e4       	ldi	r21, 0x44	; 68
    2c58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c5c:	dc 01       	movw	r26, r24
    2c5e:	cb 01       	movw	r24, r22
    2c60:	f8 01       	movw	r30, r16
    2c62:	80 83       	st	Z, r24
    2c64:	91 83       	std	Z+1, r25	; 0x01
    2c66:	a2 83       	std	Z+2, r26	; 0x02
    2c68:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c6a:	fe 01       	movw	r30, r28
    2c6c:	e5 5a       	subi	r30, 0xA5	; 165
    2c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c70:	60 81       	ld	r22, Z
    2c72:	71 81       	ldd	r23, Z+1	; 0x01
    2c74:	82 81       	ldd	r24, Z+2	; 0x02
    2c76:	93 81       	ldd	r25, Z+3	; 0x03
    2c78:	20 e0       	ldi	r18, 0x00	; 0
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	40 e8       	ldi	r20, 0x80	; 128
    2c7e:	5f e3       	ldi	r21, 0x3F	; 63
    2c80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c84:	88 23       	and	r24, r24
    2c86:	44 f4       	brge	.+16     	; 0x2c98 <start+0xe86>
		__ticks = 1;
    2c88:	fe 01       	movw	r30, r28
    2c8a:	e7 5a       	subi	r30, 0xA7	; 167
    2c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8e:	81 e0       	ldi	r24, 0x01	; 1
    2c90:	90 e0       	ldi	r25, 0x00	; 0
    2c92:	91 83       	std	Z+1, r25	; 0x01
    2c94:	80 83       	st	Z, r24
    2c96:	64 c0       	rjmp	.+200    	; 0x2d60 <start+0xf4e>
	else if (__tmp > 65535)
    2c98:	fe 01       	movw	r30, r28
    2c9a:	e5 5a       	subi	r30, 0xA5	; 165
    2c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9e:	60 81       	ld	r22, Z
    2ca0:	71 81       	ldd	r23, Z+1	; 0x01
    2ca2:	82 81       	ldd	r24, Z+2	; 0x02
    2ca4:	93 81       	ldd	r25, Z+3	; 0x03
    2ca6:	20 e0       	ldi	r18, 0x00	; 0
    2ca8:	3f ef       	ldi	r19, 0xFF	; 255
    2caa:	4f e7       	ldi	r20, 0x7F	; 127
    2cac:	57 e4       	ldi	r21, 0x47	; 71
    2cae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cb2:	18 16       	cp	r1, r24
    2cb4:	0c f0       	brlt	.+2      	; 0x2cb8 <start+0xea6>
    2cb6:	43 c0       	rjmp	.+134    	; 0x2d3e <start+0xf2c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cb8:	fe 01       	movw	r30, r28
    2cba:	e1 5a       	subi	r30, 0xA1	; 161
    2cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cbe:	60 81       	ld	r22, Z
    2cc0:	71 81       	ldd	r23, Z+1	; 0x01
    2cc2:	82 81       	ldd	r24, Z+2	; 0x02
    2cc4:	93 81       	ldd	r25, Z+3	; 0x03
    2cc6:	20 e0       	ldi	r18, 0x00	; 0
    2cc8:	30 e0       	ldi	r19, 0x00	; 0
    2cca:	40 e2       	ldi	r20, 0x20	; 32
    2ccc:	51 e4       	ldi	r21, 0x41	; 65
    2cce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cd2:	dc 01       	movw	r26, r24
    2cd4:	cb 01       	movw	r24, r22
    2cd6:	8e 01       	movw	r16, r28
    2cd8:	07 5a       	subi	r16, 0xA7	; 167
    2cda:	1f 4f       	sbci	r17, 0xFF	; 255
    2cdc:	bc 01       	movw	r22, r24
    2cde:	cd 01       	movw	r24, r26
    2ce0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce4:	dc 01       	movw	r26, r24
    2ce6:	cb 01       	movw	r24, r22
    2ce8:	f8 01       	movw	r30, r16
    2cea:	91 83       	std	Z+1, r25	; 0x01
    2cec:	80 83       	st	Z, r24
    2cee:	1f c0       	rjmp	.+62     	; 0x2d2e <start+0xf1c>
    2cf0:	fe 01       	movw	r30, r28
    2cf2:	e9 5a       	subi	r30, 0xA9	; 169
    2cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf6:	88 ec       	ldi	r24, 0xC8	; 200
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	91 83       	std	Z+1, r25	; 0x01
    2cfc:	80 83       	st	Z, r24
    2cfe:	fe 01       	movw	r30, r28
    2d00:	e9 5a       	subi	r30, 0xA9	; 169
    2d02:	ff 4f       	sbci	r31, 0xFF	; 255
    2d04:	80 81       	ld	r24, Z
    2d06:	91 81       	ldd	r25, Z+1	; 0x01
    2d08:	01 97       	sbiw	r24, 0x01	; 1
    2d0a:	f1 f7       	brne	.-4      	; 0x2d08 <start+0xef6>
    2d0c:	fe 01       	movw	r30, r28
    2d0e:	e9 5a       	subi	r30, 0xA9	; 169
    2d10:	ff 4f       	sbci	r31, 0xFF	; 255
    2d12:	91 83       	std	Z+1, r25	; 0x01
    2d14:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d16:	de 01       	movw	r26, r28
    2d18:	a7 5a       	subi	r26, 0xA7	; 167
    2d1a:	bf 4f       	sbci	r27, 0xFF	; 255
    2d1c:	fe 01       	movw	r30, r28
    2d1e:	e7 5a       	subi	r30, 0xA7	; 167
    2d20:	ff 4f       	sbci	r31, 0xFF	; 255
    2d22:	80 81       	ld	r24, Z
    2d24:	91 81       	ldd	r25, Z+1	; 0x01
    2d26:	01 97       	sbiw	r24, 0x01	; 1
    2d28:	11 96       	adiw	r26, 0x01	; 1
    2d2a:	9c 93       	st	X, r25
    2d2c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d2e:	fe 01       	movw	r30, r28
    2d30:	e7 5a       	subi	r30, 0xA7	; 167
    2d32:	ff 4f       	sbci	r31, 0xFF	; 255
    2d34:	80 81       	ld	r24, Z
    2d36:	91 81       	ldd	r25, Z+1	; 0x01
    2d38:	00 97       	sbiw	r24, 0x00	; 0
    2d3a:	d1 f6       	brne	.-76     	; 0x2cf0 <start+0xede>
    2d3c:	27 c0       	rjmp	.+78     	; 0x2d8c <start+0xf7a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d3e:	8e 01       	movw	r16, r28
    2d40:	07 5a       	subi	r16, 0xA7	; 167
    2d42:	1f 4f       	sbci	r17, 0xFF	; 255
    2d44:	fe 01       	movw	r30, r28
    2d46:	e5 5a       	subi	r30, 0xA5	; 165
    2d48:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4a:	60 81       	ld	r22, Z
    2d4c:	71 81       	ldd	r23, Z+1	; 0x01
    2d4e:	82 81       	ldd	r24, Z+2	; 0x02
    2d50:	93 81       	ldd	r25, Z+3	; 0x03
    2d52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d56:	dc 01       	movw	r26, r24
    2d58:	cb 01       	movw	r24, r22
    2d5a:	f8 01       	movw	r30, r16
    2d5c:	91 83       	std	Z+1, r25	; 0x01
    2d5e:	80 83       	st	Z, r24
    2d60:	de 01       	movw	r26, r28
    2d62:	ab 5a       	subi	r26, 0xAB	; 171
    2d64:	bf 4f       	sbci	r27, 0xFF	; 255
    2d66:	fe 01       	movw	r30, r28
    2d68:	e7 5a       	subi	r30, 0xA7	; 167
    2d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6c:	80 81       	ld	r24, Z
    2d6e:	91 81       	ldd	r25, Z+1	; 0x01
    2d70:	8d 93       	st	X+, r24
    2d72:	9c 93       	st	X, r25
    2d74:	fe 01       	movw	r30, r28
    2d76:	eb 5a       	subi	r30, 0xAB	; 171
    2d78:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7a:	80 81       	ld	r24, Z
    2d7c:	91 81       	ldd	r25, Z+1	; 0x01
    2d7e:	01 97       	sbiw	r24, 0x01	; 1
    2d80:	f1 f7       	brne	.-4      	; 0x2d7e <start+0xf6c>
    2d82:	fe 01       	movw	r30, r28
    2d84:	eb 5a       	subi	r30, 0xAB	; 171
    2d86:	ff 4f       	sbci	r31, 0xFF	; 255
    2d88:	91 83       	std	Z+1, r25	; 0x01
    2d8a:	80 83       	st	Z, r24
			_delay_ms(UART_DELAY);
			sendPassword(password);
    2d8c:	ce 01       	movw	r24, r28
    2d8e:	8b 51       	subi	r24, 0x1B	; 27
    2d90:	9f 4f       	sbci	r25, 0xFF	; 255
    2d92:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <sendPassword>

			passwordVerified = 0;
    2d96:	fe 01       	movw	r30, r28
    2d98:	ec 51       	subi	r30, 0x1C	; 28
    2d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9c:	10 82       	st	Z, r1
			passwordVerified = UART_recieveByte();
    2d9e:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <UART_recieveByte>
    2da2:	fe 01       	movw	r30, r28
    2da4:	ec 51       	subi	r30, 0x1C	; 28
    2da6:	ff 4f       	sbci	r31, 0xFF	; 255
    2da8:	80 83       	st	Z, r24


			if(passwordVerified)
    2daa:	fe 01       	movw	r30, r28
    2dac:	ec 51       	subi	r30, 0x1C	; 28
    2dae:	ff 4f       	sbci	r31, 0xFF	; 255
    2db0:	80 81       	ld	r24, Z
    2db2:	88 23       	and	r24, r24
    2db4:	09 f4       	brne	.+2      	; 0x2db8 <start+0xfa6>
    2db6:	cd c2       	rjmp	.+1434   	; 0x3352 <start+0x1540>
			{
				LCD_clearScreen();
    2db8:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <LCD_clearScreen>
				LCD_displayString("Enter New pass");
    2dbc:	89 ea       	ldi	r24, 0xA9	; 169
    2dbe:	90 e0       	ldi	r25, 0x00	; 0
    2dc0:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <LCD_displayString>

				enterPassword(password);
    2dc4:	ce 01       	movw	r24, r28
    2dc6:	8b 51       	subi	r24, 0x1B	; 27
    2dc8:	9f 4f       	sbci	r25, 0xFF	; 255
    2dca:	0e 94 31 1a 	call	0x3462	; 0x3462 <enterPassword>
    2dce:	fe 01       	movw	r30, r28
    2dd0:	ef 5a       	subi	r30, 0xAF	; 175
    2dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd4:	80 e0       	ldi	r24, 0x00	; 0
    2dd6:	90 e0       	ldi	r25, 0x00	; 0
    2dd8:	a8 e4       	ldi	r26, 0x48	; 72
    2dda:	b2 e4       	ldi	r27, 0x42	; 66
    2ddc:	80 83       	st	Z, r24
    2dde:	91 83       	std	Z+1, r25	; 0x01
    2de0:	a2 83       	std	Z+2, r26	; 0x02
    2de2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2de4:	8e 01       	movw	r16, r28
    2de6:	03 5b       	subi	r16, 0xB3	; 179
    2de8:	1f 4f       	sbci	r17, 0xFF	; 255
    2dea:	fe 01       	movw	r30, r28
    2dec:	ef 5a       	subi	r30, 0xAF	; 175
    2dee:	ff 4f       	sbci	r31, 0xFF	; 255
    2df0:	60 81       	ld	r22, Z
    2df2:	71 81       	ldd	r23, Z+1	; 0x01
    2df4:	82 81       	ldd	r24, Z+2	; 0x02
    2df6:	93 81       	ldd	r25, Z+3	; 0x03
    2df8:	20 e0       	ldi	r18, 0x00	; 0
    2dfa:	30 e0       	ldi	r19, 0x00	; 0
    2dfc:	4a ef       	ldi	r20, 0xFA	; 250
    2dfe:	54 e4       	ldi	r21, 0x44	; 68
    2e00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e04:	dc 01       	movw	r26, r24
    2e06:	cb 01       	movw	r24, r22
    2e08:	f8 01       	movw	r30, r16
    2e0a:	80 83       	st	Z, r24
    2e0c:	91 83       	std	Z+1, r25	; 0x01
    2e0e:	a2 83       	std	Z+2, r26	; 0x02
    2e10:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e12:	fe 01       	movw	r30, r28
    2e14:	e3 5b       	subi	r30, 0xB3	; 179
    2e16:	ff 4f       	sbci	r31, 0xFF	; 255
    2e18:	60 81       	ld	r22, Z
    2e1a:	71 81       	ldd	r23, Z+1	; 0x01
    2e1c:	82 81       	ldd	r24, Z+2	; 0x02
    2e1e:	93 81       	ldd	r25, Z+3	; 0x03
    2e20:	20 e0       	ldi	r18, 0x00	; 0
    2e22:	30 e0       	ldi	r19, 0x00	; 0
    2e24:	40 e8       	ldi	r20, 0x80	; 128
    2e26:	5f e3       	ldi	r21, 0x3F	; 63
    2e28:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e2c:	88 23       	and	r24, r24
    2e2e:	44 f4       	brge	.+16     	; 0x2e40 <start+0x102e>
		__ticks = 1;
    2e30:	fe 01       	movw	r30, r28
    2e32:	e5 5b       	subi	r30, 0xB5	; 181
    2e34:	ff 4f       	sbci	r31, 0xFF	; 255
    2e36:	81 e0       	ldi	r24, 0x01	; 1
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	91 83       	std	Z+1, r25	; 0x01
    2e3c:	80 83       	st	Z, r24
    2e3e:	64 c0       	rjmp	.+200    	; 0x2f08 <start+0x10f6>
	else if (__tmp > 65535)
    2e40:	fe 01       	movw	r30, r28
    2e42:	e3 5b       	subi	r30, 0xB3	; 179
    2e44:	ff 4f       	sbci	r31, 0xFF	; 255
    2e46:	60 81       	ld	r22, Z
    2e48:	71 81       	ldd	r23, Z+1	; 0x01
    2e4a:	82 81       	ldd	r24, Z+2	; 0x02
    2e4c:	93 81       	ldd	r25, Z+3	; 0x03
    2e4e:	20 e0       	ldi	r18, 0x00	; 0
    2e50:	3f ef       	ldi	r19, 0xFF	; 255
    2e52:	4f e7       	ldi	r20, 0x7F	; 127
    2e54:	57 e4       	ldi	r21, 0x47	; 71
    2e56:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e5a:	18 16       	cp	r1, r24
    2e5c:	0c f0       	brlt	.+2      	; 0x2e60 <start+0x104e>
    2e5e:	43 c0       	rjmp	.+134    	; 0x2ee6 <start+0x10d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e60:	fe 01       	movw	r30, r28
    2e62:	ef 5a       	subi	r30, 0xAF	; 175
    2e64:	ff 4f       	sbci	r31, 0xFF	; 255
    2e66:	60 81       	ld	r22, Z
    2e68:	71 81       	ldd	r23, Z+1	; 0x01
    2e6a:	82 81       	ldd	r24, Z+2	; 0x02
    2e6c:	93 81       	ldd	r25, Z+3	; 0x03
    2e6e:	20 e0       	ldi	r18, 0x00	; 0
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	40 e2       	ldi	r20, 0x20	; 32
    2e74:	51 e4       	ldi	r21, 0x41	; 65
    2e76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e7a:	dc 01       	movw	r26, r24
    2e7c:	cb 01       	movw	r24, r22
    2e7e:	8e 01       	movw	r16, r28
    2e80:	05 5b       	subi	r16, 0xB5	; 181
    2e82:	1f 4f       	sbci	r17, 0xFF	; 255
    2e84:	bc 01       	movw	r22, r24
    2e86:	cd 01       	movw	r24, r26
    2e88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e8c:	dc 01       	movw	r26, r24
    2e8e:	cb 01       	movw	r24, r22
    2e90:	f8 01       	movw	r30, r16
    2e92:	91 83       	std	Z+1, r25	; 0x01
    2e94:	80 83       	st	Z, r24
    2e96:	1f c0       	rjmp	.+62     	; 0x2ed6 <start+0x10c4>
    2e98:	fe 01       	movw	r30, r28
    2e9a:	e7 5b       	subi	r30, 0xB7	; 183
    2e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e9e:	88 ec       	ldi	r24, 0xC8	; 200
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	91 83       	std	Z+1, r25	; 0x01
    2ea4:	80 83       	st	Z, r24
    2ea6:	fe 01       	movw	r30, r28
    2ea8:	e7 5b       	subi	r30, 0xB7	; 183
    2eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    2eac:	80 81       	ld	r24, Z
    2eae:	91 81       	ldd	r25, Z+1	; 0x01
    2eb0:	01 97       	sbiw	r24, 0x01	; 1
    2eb2:	f1 f7       	brne	.-4      	; 0x2eb0 <start+0x109e>
    2eb4:	fe 01       	movw	r30, r28
    2eb6:	e7 5b       	subi	r30, 0xB7	; 183
    2eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eba:	91 83       	std	Z+1, r25	; 0x01
    2ebc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ebe:	de 01       	movw	r26, r28
    2ec0:	a5 5b       	subi	r26, 0xB5	; 181
    2ec2:	bf 4f       	sbci	r27, 0xFF	; 255
    2ec4:	fe 01       	movw	r30, r28
    2ec6:	e5 5b       	subi	r30, 0xB5	; 181
    2ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eca:	80 81       	ld	r24, Z
    2ecc:	91 81       	ldd	r25, Z+1	; 0x01
    2ece:	01 97       	sbiw	r24, 0x01	; 1
    2ed0:	11 96       	adiw	r26, 0x01	; 1
    2ed2:	9c 93       	st	X, r25
    2ed4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ed6:	fe 01       	movw	r30, r28
    2ed8:	e5 5b       	subi	r30, 0xB5	; 181
    2eda:	ff 4f       	sbci	r31, 0xFF	; 255
    2edc:	80 81       	ld	r24, Z
    2ede:	91 81       	ldd	r25, Z+1	; 0x01
    2ee0:	00 97       	sbiw	r24, 0x00	; 0
    2ee2:	d1 f6       	brne	.-76     	; 0x2e98 <start+0x1086>
    2ee4:	27 c0       	rjmp	.+78     	; 0x2f34 <start+0x1122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ee6:	8e 01       	movw	r16, r28
    2ee8:	05 5b       	subi	r16, 0xB5	; 181
    2eea:	1f 4f       	sbci	r17, 0xFF	; 255
    2eec:	fe 01       	movw	r30, r28
    2eee:	e3 5b       	subi	r30, 0xB3	; 179
    2ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef2:	60 81       	ld	r22, Z
    2ef4:	71 81       	ldd	r23, Z+1	; 0x01
    2ef6:	82 81       	ldd	r24, Z+2	; 0x02
    2ef8:	93 81       	ldd	r25, Z+3	; 0x03
    2efa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2efe:	dc 01       	movw	r26, r24
    2f00:	cb 01       	movw	r24, r22
    2f02:	f8 01       	movw	r30, r16
    2f04:	91 83       	std	Z+1, r25	; 0x01
    2f06:	80 83       	st	Z, r24
    2f08:	de 01       	movw	r26, r28
    2f0a:	a9 5b       	subi	r26, 0xB9	; 185
    2f0c:	bf 4f       	sbci	r27, 0xFF	; 255
    2f0e:	fe 01       	movw	r30, r28
    2f10:	e5 5b       	subi	r30, 0xB5	; 181
    2f12:	ff 4f       	sbci	r31, 0xFF	; 255
    2f14:	80 81       	ld	r24, Z
    2f16:	91 81       	ldd	r25, Z+1	; 0x01
    2f18:	8d 93       	st	X+, r24
    2f1a:	9c 93       	st	X, r25
    2f1c:	fe 01       	movw	r30, r28
    2f1e:	e9 5b       	subi	r30, 0xB9	; 185
    2f20:	ff 4f       	sbci	r31, 0xFF	; 255
    2f22:	80 81       	ld	r24, Z
    2f24:	91 81       	ldd	r25, Z+1	; 0x01
    2f26:	01 97       	sbiw	r24, 0x01	; 1
    2f28:	f1 f7       	brne	.-4      	; 0x2f26 <start+0x1114>
    2f2a:	fe 01       	movw	r30, r28
    2f2c:	e9 5b       	subi	r30, 0xB9	; 185
    2f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f30:	91 83       	std	Z+1, r25	; 0x01
    2f32:	80 83       	st	Z, r24
				_delay_ms(UART_DELAY);
				sendPassword(password);
    2f34:	ce 01       	movw	r24, r28
    2f36:	8b 51       	subi	r24, 0x1B	; 27
    2f38:	9f 4f       	sbci	r25, 0xFF	; 255
    2f3a:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <sendPassword>

				LCD_clearScreen();
    2f3e:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <LCD_clearScreen>
				LCD_displayString("Confirm New pass");
    2f42:	88 eb       	ldi	r24, 0xB8	; 184
    2f44:	90 e0       	ldi	r25, 0x00	; 0
    2f46:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <LCD_displayString>

				enterPassword( confirmPassword );
    2f4a:	ce 01       	movw	r24, r28
    2f4c:	86 51       	subi	r24, 0x16	; 22
    2f4e:	9f 4f       	sbci	r25, 0xFF	; 255
    2f50:	0e 94 31 1a 	call	0x3462	; 0x3462 <enterPassword>
    2f54:	fe 01       	movw	r30, r28
    2f56:	ed 5b       	subi	r30, 0xBD	; 189
    2f58:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5a:	80 e0       	ldi	r24, 0x00	; 0
    2f5c:	90 e0       	ldi	r25, 0x00	; 0
    2f5e:	a8 e4       	ldi	r26, 0x48	; 72
    2f60:	b2 e4       	ldi	r27, 0x42	; 66
    2f62:	80 83       	st	Z, r24
    2f64:	91 83       	std	Z+1, r25	; 0x01
    2f66:	a2 83       	std	Z+2, r26	; 0x02
    2f68:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f6a:	8e 01       	movw	r16, r28
    2f6c:	01 5c       	subi	r16, 0xC1	; 193
    2f6e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f70:	fe 01       	movw	r30, r28
    2f72:	ed 5b       	subi	r30, 0xBD	; 189
    2f74:	ff 4f       	sbci	r31, 0xFF	; 255
    2f76:	60 81       	ld	r22, Z
    2f78:	71 81       	ldd	r23, Z+1	; 0x01
    2f7a:	82 81       	ldd	r24, Z+2	; 0x02
    2f7c:	93 81       	ldd	r25, Z+3	; 0x03
    2f7e:	20 e0       	ldi	r18, 0x00	; 0
    2f80:	30 e0       	ldi	r19, 0x00	; 0
    2f82:	4a ef       	ldi	r20, 0xFA	; 250
    2f84:	54 e4       	ldi	r21, 0x44	; 68
    2f86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f8a:	dc 01       	movw	r26, r24
    2f8c:	cb 01       	movw	r24, r22
    2f8e:	f8 01       	movw	r30, r16
    2f90:	80 83       	st	Z, r24
    2f92:	91 83       	std	Z+1, r25	; 0x01
    2f94:	a2 83       	std	Z+2, r26	; 0x02
    2f96:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f98:	fe 01       	movw	r30, r28
    2f9a:	ff 96       	adiw	r30, 0x3f	; 63
    2f9c:	60 81       	ld	r22, Z
    2f9e:	71 81       	ldd	r23, Z+1	; 0x01
    2fa0:	82 81       	ldd	r24, Z+2	; 0x02
    2fa2:	93 81       	ldd	r25, Z+3	; 0x03
    2fa4:	20 e0       	ldi	r18, 0x00	; 0
    2fa6:	30 e0       	ldi	r19, 0x00	; 0
    2fa8:	40 e8       	ldi	r20, 0x80	; 128
    2faa:	5f e3       	ldi	r21, 0x3F	; 63
    2fac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fb0:	88 23       	and	r24, r24
    2fb2:	2c f4       	brge	.+10     	; 0x2fbe <start+0x11ac>
		__ticks = 1;
    2fb4:	81 e0       	ldi	r24, 0x01	; 1
    2fb6:	90 e0       	ldi	r25, 0x00	; 0
    2fb8:	9e af       	std	Y+62, r25	; 0x3e
    2fba:	8d af       	std	Y+61, r24	; 0x3d
    2fbc:	46 c0       	rjmp	.+140    	; 0x304a <start+0x1238>
	else if (__tmp > 65535)
    2fbe:	fe 01       	movw	r30, r28
    2fc0:	ff 96       	adiw	r30, 0x3f	; 63
    2fc2:	60 81       	ld	r22, Z
    2fc4:	71 81       	ldd	r23, Z+1	; 0x01
    2fc6:	82 81       	ldd	r24, Z+2	; 0x02
    2fc8:	93 81       	ldd	r25, Z+3	; 0x03
    2fca:	20 e0       	ldi	r18, 0x00	; 0
    2fcc:	3f ef       	ldi	r19, 0xFF	; 255
    2fce:	4f e7       	ldi	r20, 0x7F	; 127
    2fd0:	57 e4       	ldi	r21, 0x47	; 71
    2fd2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fd6:	18 16       	cp	r1, r24
    2fd8:	64 f5       	brge	.+88     	; 0x3032 <start+0x1220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fda:	fe 01       	movw	r30, r28
    2fdc:	ed 5b       	subi	r30, 0xBD	; 189
    2fde:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe0:	60 81       	ld	r22, Z
    2fe2:	71 81       	ldd	r23, Z+1	; 0x01
    2fe4:	82 81       	ldd	r24, Z+2	; 0x02
    2fe6:	93 81       	ldd	r25, Z+3	; 0x03
    2fe8:	20 e0       	ldi	r18, 0x00	; 0
    2fea:	30 e0       	ldi	r19, 0x00	; 0
    2fec:	40 e2       	ldi	r20, 0x20	; 32
    2fee:	51 e4       	ldi	r21, 0x41	; 65
    2ff0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ff4:	dc 01       	movw	r26, r24
    2ff6:	cb 01       	movw	r24, r22
    2ff8:	bc 01       	movw	r22, r24
    2ffa:	cd 01       	movw	r24, r26
    2ffc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3000:	dc 01       	movw	r26, r24
    3002:	cb 01       	movw	r24, r22
    3004:	9e af       	std	Y+62, r25	; 0x3e
    3006:	8d af       	std	Y+61, r24	; 0x3d
    3008:	0f c0       	rjmp	.+30     	; 0x3028 <start+0x1216>
    300a:	88 ec       	ldi	r24, 0xC8	; 200
    300c:	90 e0       	ldi	r25, 0x00	; 0
    300e:	9c af       	std	Y+60, r25	; 0x3c
    3010:	8b af       	std	Y+59, r24	; 0x3b
    3012:	8b ad       	ldd	r24, Y+59	; 0x3b
    3014:	9c ad       	ldd	r25, Y+60	; 0x3c
    3016:	01 97       	sbiw	r24, 0x01	; 1
    3018:	f1 f7       	brne	.-4      	; 0x3016 <start+0x1204>
    301a:	9c af       	std	Y+60, r25	; 0x3c
    301c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    301e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3020:	9e ad       	ldd	r25, Y+62	; 0x3e
    3022:	01 97       	sbiw	r24, 0x01	; 1
    3024:	9e af       	std	Y+62, r25	; 0x3e
    3026:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3028:	8d ad       	ldd	r24, Y+61	; 0x3d
    302a:	9e ad       	ldd	r25, Y+62	; 0x3e
    302c:	00 97       	sbiw	r24, 0x00	; 0
    302e:	69 f7       	brne	.-38     	; 0x300a <start+0x11f8>
    3030:	16 c0       	rjmp	.+44     	; 0x305e <start+0x124c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3032:	fe 01       	movw	r30, r28
    3034:	ff 96       	adiw	r30, 0x3f	; 63
    3036:	60 81       	ld	r22, Z
    3038:	71 81       	ldd	r23, Z+1	; 0x01
    303a:	82 81       	ldd	r24, Z+2	; 0x02
    303c:	93 81       	ldd	r25, Z+3	; 0x03
    303e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3042:	dc 01       	movw	r26, r24
    3044:	cb 01       	movw	r24, r22
    3046:	9e af       	std	Y+62, r25	; 0x3e
    3048:	8d af       	std	Y+61, r24	; 0x3d
    304a:	8d ad       	ldd	r24, Y+61	; 0x3d
    304c:	9e ad       	ldd	r25, Y+62	; 0x3e
    304e:	9a af       	std	Y+58, r25	; 0x3a
    3050:	89 af       	std	Y+57, r24	; 0x39
    3052:	89 ad       	ldd	r24, Y+57	; 0x39
    3054:	9a ad       	ldd	r25, Y+58	; 0x3a
    3056:	01 97       	sbiw	r24, 0x01	; 1
    3058:	f1 f7       	brne	.-4      	; 0x3056 <start+0x1244>
    305a:	9a af       	std	Y+58, r25	; 0x3a
    305c:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(UART_DELAY);
				sendPassword( confirmPassword );
    305e:	ce 01       	movw	r24, r28
    3060:	86 51       	subi	r24, 0x16	; 22
    3062:	9f 4f       	sbci	r25, 0xFF	; 255
    3064:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <sendPassword>
    3068:	80 e0       	ldi	r24, 0x00	; 0
    306a:	90 e0       	ldi	r25, 0x00	; 0
    306c:	a8 e4       	ldi	r26, 0x48	; 72
    306e:	b2 e4       	ldi	r27, 0x42	; 66
    3070:	8d ab       	std	Y+53, r24	; 0x35
    3072:	9e ab       	std	Y+54, r25	; 0x36
    3074:	af ab       	std	Y+55, r26	; 0x37
    3076:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3078:	6d a9       	ldd	r22, Y+53	; 0x35
    307a:	7e a9       	ldd	r23, Y+54	; 0x36
    307c:	8f a9       	ldd	r24, Y+55	; 0x37
    307e:	98 ad       	ldd	r25, Y+56	; 0x38
    3080:	20 e0       	ldi	r18, 0x00	; 0
    3082:	30 e0       	ldi	r19, 0x00	; 0
    3084:	4a ef       	ldi	r20, 0xFA	; 250
    3086:	54 e4       	ldi	r21, 0x44	; 68
    3088:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    308c:	dc 01       	movw	r26, r24
    308e:	cb 01       	movw	r24, r22
    3090:	89 ab       	std	Y+49, r24	; 0x31
    3092:	9a ab       	std	Y+50, r25	; 0x32
    3094:	ab ab       	std	Y+51, r26	; 0x33
    3096:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3098:	69 a9       	ldd	r22, Y+49	; 0x31
    309a:	7a a9       	ldd	r23, Y+50	; 0x32
    309c:	8b a9       	ldd	r24, Y+51	; 0x33
    309e:	9c a9       	ldd	r25, Y+52	; 0x34
    30a0:	20 e0       	ldi	r18, 0x00	; 0
    30a2:	30 e0       	ldi	r19, 0x00	; 0
    30a4:	40 e8       	ldi	r20, 0x80	; 128
    30a6:	5f e3       	ldi	r21, 0x3F	; 63
    30a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30ac:	88 23       	and	r24, r24
    30ae:	2c f4       	brge	.+10     	; 0x30ba <start+0x12a8>
		__ticks = 1;
    30b0:	81 e0       	ldi	r24, 0x01	; 1
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	98 ab       	std	Y+48, r25	; 0x30
    30b6:	8f a7       	std	Y+47, r24	; 0x2f
    30b8:	3f c0       	rjmp	.+126    	; 0x3138 <start+0x1326>
	else if (__tmp > 65535)
    30ba:	69 a9       	ldd	r22, Y+49	; 0x31
    30bc:	7a a9       	ldd	r23, Y+50	; 0x32
    30be:	8b a9       	ldd	r24, Y+51	; 0x33
    30c0:	9c a9       	ldd	r25, Y+52	; 0x34
    30c2:	20 e0       	ldi	r18, 0x00	; 0
    30c4:	3f ef       	ldi	r19, 0xFF	; 255
    30c6:	4f e7       	ldi	r20, 0x7F	; 127
    30c8:	57 e4       	ldi	r21, 0x47	; 71
    30ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30ce:	18 16       	cp	r1, r24
    30d0:	4c f5       	brge	.+82     	; 0x3124 <start+0x1312>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30d2:	6d a9       	ldd	r22, Y+53	; 0x35
    30d4:	7e a9       	ldd	r23, Y+54	; 0x36
    30d6:	8f a9       	ldd	r24, Y+55	; 0x37
    30d8:	98 ad       	ldd	r25, Y+56	; 0x38
    30da:	20 e0       	ldi	r18, 0x00	; 0
    30dc:	30 e0       	ldi	r19, 0x00	; 0
    30de:	40 e2       	ldi	r20, 0x20	; 32
    30e0:	51 e4       	ldi	r21, 0x41	; 65
    30e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30e6:	dc 01       	movw	r26, r24
    30e8:	cb 01       	movw	r24, r22
    30ea:	bc 01       	movw	r22, r24
    30ec:	cd 01       	movw	r24, r26
    30ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30f2:	dc 01       	movw	r26, r24
    30f4:	cb 01       	movw	r24, r22
    30f6:	98 ab       	std	Y+48, r25	; 0x30
    30f8:	8f a7       	std	Y+47, r24	; 0x2f
    30fa:	0f c0       	rjmp	.+30     	; 0x311a <start+0x1308>
    30fc:	88 ec       	ldi	r24, 0xC8	; 200
    30fe:	90 e0       	ldi	r25, 0x00	; 0
    3100:	9e a7       	std	Y+46, r25	; 0x2e
    3102:	8d a7       	std	Y+45, r24	; 0x2d
    3104:	8d a5       	ldd	r24, Y+45	; 0x2d
    3106:	9e a5       	ldd	r25, Y+46	; 0x2e
    3108:	01 97       	sbiw	r24, 0x01	; 1
    310a:	f1 f7       	brne	.-4      	; 0x3108 <start+0x12f6>
    310c:	9e a7       	std	Y+46, r25	; 0x2e
    310e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3110:	8f a5       	ldd	r24, Y+47	; 0x2f
    3112:	98 a9       	ldd	r25, Y+48	; 0x30
    3114:	01 97       	sbiw	r24, 0x01	; 1
    3116:	98 ab       	std	Y+48, r25	; 0x30
    3118:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    311a:	8f a5       	ldd	r24, Y+47	; 0x2f
    311c:	98 a9       	ldd	r25, Y+48	; 0x30
    311e:	00 97       	sbiw	r24, 0x00	; 0
    3120:	69 f7       	brne	.-38     	; 0x30fc <start+0x12ea>
    3122:	14 c0       	rjmp	.+40     	; 0x314c <start+0x133a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3124:	69 a9       	ldd	r22, Y+49	; 0x31
    3126:	7a a9       	ldd	r23, Y+50	; 0x32
    3128:	8b a9       	ldd	r24, Y+51	; 0x33
    312a:	9c a9       	ldd	r25, Y+52	; 0x34
    312c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3130:	dc 01       	movw	r26, r24
    3132:	cb 01       	movw	r24, r22
    3134:	98 ab       	std	Y+48, r25	; 0x30
    3136:	8f a7       	std	Y+47, r24	; 0x2f
    3138:	8f a5       	ldd	r24, Y+47	; 0x2f
    313a:	98 a9       	ldd	r25, Y+48	; 0x30
    313c:	9c a7       	std	Y+44, r25	; 0x2c
    313e:	8b a7       	std	Y+43, r24	; 0x2b
    3140:	8b a5       	ldd	r24, Y+43	; 0x2b
    3142:	9c a5       	ldd	r25, Y+44	; 0x2c
    3144:	01 97       	sbiw	r24, 0x01	; 1
    3146:	f1 f7       	brne	.-4      	; 0x3144 <start+0x1332>
    3148:	9c a7       	std	Y+44, r25	; 0x2c
    314a:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(UART_DELAY);

				passwordVerified = 0;
    314c:	fe 01       	movw	r30, r28
    314e:	ec 51       	subi	r30, 0x1C	; 28
    3150:	ff 4f       	sbci	r31, 0xFF	; 255
    3152:	10 82       	st	Z, r1
				passwordVerified = UART_recieveByte();
    3154:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <UART_recieveByte>
    3158:	fe 01       	movw	r30, r28
    315a:	ec 51       	subi	r30, 0x1C	; 28
    315c:	ff 4f       	sbci	r31, 0xFF	; 255
    315e:	80 83       	st	Z, r24

				if(passwordVerified)
    3160:	fe 01       	movw	r30, r28
    3162:	ec 51       	subi	r30, 0x1C	; 28
    3164:	ff 4f       	sbci	r31, 0xFF	; 255
    3166:	80 81       	ld	r24, Z
    3168:	88 23       	and	r24, r24
    316a:	09 f4       	brne	.+2      	; 0x316e <start+0x135c>
    316c:	79 c0       	rjmp	.+242    	; 0x3260 <start+0x144e>
				{
					LCD_clearScreen();
    316e:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <LCD_clearScreen>
					LCD_displayString("Password Changed");
    3172:	89 ec       	ldi	r24, 0xC9	; 201
    3174:	90 e0       	ldi	r25, 0x00	; 0
    3176:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <LCD_displayString>
    317a:	80 e0       	ldi	r24, 0x00	; 0
    317c:	90 e8       	ldi	r25, 0x80	; 128
    317e:	ab e3       	ldi	r26, 0x3B	; 59
    3180:	b5 e4       	ldi	r27, 0x45	; 69
    3182:	8f a3       	std	Y+39, r24	; 0x27
    3184:	98 a7       	std	Y+40, r25	; 0x28
    3186:	a9 a7       	std	Y+41, r26	; 0x29
    3188:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    318a:	6f a1       	ldd	r22, Y+39	; 0x27
    318c:	78 a5       	ldd	r23, Y+40	; 0x28
    318e:	89 a5       	ldd	r24, Y+41	; 0x29
    3190:	9a a5       	ldd	r25, Y+42	; 0x2a
    3192:	20 e0       	ldi	r18, 0x00	; 0
    3194:	30 e0       	ldi	r19, 0x00	; 0
    3196:	4a ef       	ldi	r20, 0xFA	; 250
    3198:	54 e4       	ldi	r21, 0x44	; 68
    319a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    319e:	dc 01       	movw	r26, r24
    31a0:	cb 01       	movw	r24, r22
    31a2:	8b a3       	std	Y+35, r24	; 0x23
    31a4:	9c a3       	std	Y+36, r25	; 0x24
    31a6:	ad a3       	std	Y+37, r26	; 0x25
    31a8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    31aa:	6b a1       	ldd	r22, Y+35	; 0x23
    31ac:	7c a1       	ldd	r23, Y+36	; 0x24
    31ae:	8d a1       	ldd	r24, Y+37	; 0x25
    31b0:	9e a1       	ldd	r25, Y+38	; 0x26
    31b2:	20 e0       	ldi	r18, 0x00	; 0
    31b4:	30 e0       	ldi	r19, 0x00	; 0
    31b6:	40 e8       	ldi	r20, 0x80	; 128
    31b8:	5f e3       	ldi	r21, 0x3F	; 63
    31ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31be:	88 23       	and	r24, r24
    31c0:	2c f4       	brge	.+10     	; 0x31cc <start+0x13ba>
		__ticks = 1;
    31c2:	81 e0       	ldi	r24, 0x01	; 1
    31c4:	90 e0       	ldi	r25, 0x00	; 0
    31c6:	9a a3       	std	Y+34, r25	; 0x22
    31c8:	89 a3       	std	Y+33, r24	; 0x21
    31ca:	3f c0       	rjmp	.+126    	; 0x324a <start+0x1438>
	else if (__tmp > 65535)
    31cc:	6b a1       	ldd	r22, Y+35	; 0x23
    31ce:	7c a1       	ldd	r23, Y+36	; 0x24
    31d0:	8d a1       	ldd	r24, Y+37	; 0x25
    31d2:	9e a1       	ldd	r25, Y+38	; 0x26
    31d4:	20 e0       	ldi	r18, 0x00	; 0
    31d6:	3f ef       	ldi	r19, 0xFF	; 255
    31d8:	4f e7       	ldi	r20, 0x7F	; 127
    31da:	57 e4       	ldi	r21, 0x47	; 71
    31dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31e0:	18 16       	cp	r1, r24
    31e2:	4c f5       	brge	.+82     	; 0x3236 <start+0x1424>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31e4:	6f a1       	ldd	r22, Y+39	; 0x27
    31e6:	78 a5       	ldd	r23, Y+40	; 0x28
    31e8:	89 a5       	ldd	r24, Y+41	; 0x29
    31ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    31ec:	20 e0       	ldi	r18, 0x00	; 0
    31ee:	30 e0       	ldi	r19, 0x00	; 0
    31f0:	40 e2       	ldi	r20, 0x20	; 32
    31f2:	51 e4       	ldi	r21, 0x41	; 65
    31f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31f8:	dc 01       	movw	r26, r24
    31fa:	cb 01       	movw	r24, r22
    31fc:	bc 01       	movw	r22, r24
    31fe:	cd 01       	movw	r24, r26
    3200:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3204:	dc 01       	movw	r26, r24
    3206:	cb 01       	movw	r24, r22
    3208:	9a a3       	std	Y+34, r25	; 0x22
    320a:	89 a3       	std	Y+33, r24	; 0x21
    320c:	0f c0       	rjmp	.+30     	; 0x322c <start+0x141a>
    320e:	88 ec       	ldi	r24, 0xC8	; 200
    3210:	90 e0       	ldi	r25, 0x00	; 0
    3212:	98 a3       	std	Y+32, r25	; 0x20
    3214:	8f 8f       	std	Y+31, r24	; 0x1f
    3216:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3218:	98 a1       	ldd	r25, Y+32	; 0x20
    321a:	01 97       	sbiw	r24, 0x01	; 1
    321c:	f1 f7       	brne	.-4      	; 0x321a <start+0x1408>
    321e:	98 a3       	std	Y+32, r25	; 0x20
    3220:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3222:	89 a1       	ldd	r24, Y+33	; 0x21
    3224:	9a a1       	ldd	r25, Y+34	; 0x22
    3226:	01 97       	sbiw	r24, 0x01	; 1
    3228:	9a a3       	std	Y+34, r25	; 0x22
    322a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    322c:	89 a1       	ldd	r24, Y+33	; 0x21
    322e:	9a a1       	ldd	r25, Y+34	; 0x22
    3230:	00 97       	sbiw	r24, 0x00	; 0
    3232:	69 f7       	brne	.-38     	; 0x320e <start+0x13fc>
    3234:	ca c9       	rjmp	.-3180   	; 0x25ca <start+0x7b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3236:	6b a1       	ldd	r22, Y+35	; 0x23
    3238:	7c a1       	ldd	r23, Y+36	; 0x24
    323a:	8d a1       	ldd	r24, Y+37	; 0x25
    323c:	9e a1       	ldd	r25, Y+38	; 0x26
    323e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3242:	dc 01       	movw	r26, r24
    3244:	cb 01       	movw	r24, r22
    3246:	9a a3       	std	Y+34, r25	; 0x22
    3248:	89 a3       	std	Y+33, r24	; 0x21
    324a:	89 a1       	ldd	r24, Y+33	; 0x21
    324c:	9a a1       	ldd	r25, Y+34	; 0x22
    324e:	9e 8f       	std	Y+30, r25	; 0x1e
    3250:	8d 8f       	std	Y+29, r24	; 0x1d
    3252:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3254:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3256:	01 97       	sbiw	r24, 0x01	; 1
    3258:	f1 f7       	brne	.-4      	; 0x3256 <start+0x1444>
    325a:	9e 8f       	std	Y+30, r25	; 0x1e
    325c:	8d 8f       	std	Y+29, r24	; 0x1d
    325e:	b5 c9       	rjmp	.-3222   	; 0x25ca <start+0x7b8>
					_delay_ms(3000);
				}

				else
				{
					LCD_clearScreen();
    3260:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <LCD_clearScreen>
					LCD_displayString("Wrong Password");
    3264:	8b e8       	ldi	r24, 0x8B	; 139
    3266:	90 e0       	ldi	r25, 0x00	; 0
    3268:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <LCD_displayString>
    326c:	80 e0       	ldi	r24, 0x00	; 0
    326e:	90 e4       	ldi	r25, 0x40	; 64
    3270:	ac e1       	ldi	r26, 0x1C	; 28
    3272:	b5 e4       	ldi	r27, 0x45	; 69
    3274:	89 8f       	std	Y+25, r24	; 0x19
    3276:	9a 8f       	std	Y+26, r25	; 0x1a
    3278:	ab 8f       	std	Y+27, r26	; 0x1b
    327a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    327c:	69 8d       	ldd	r22, Y+25	; 0x19
    327e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3280:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3282:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3284:	20 e0       	ldi	r18, 0x00	; 0
    3286:	30 e0       	ldi	r19, 0x00	; 0
    3288:	4a ef       	ldi	r20, 0xFA	; 250
    328a:	54 e4       	ldi	r21, 0x44	; 68
    328c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3290:	dc 01       	movw	r26, r24
    3292:	cb 01       	movw	r24, r22
    3294:	8d 8b       	std	Y+21, r24	; 0x15
    3296:	9e 8b       	std	Y+22, r25	; 0x16
    3298:	af 8b       	std	Y+23, r26	; 0x17
    329a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    329c:	6d 89       	ldd	r22, Y+21	; 0x15
    329e:	7e 89       	ldd	r23, Y+22	; 0x16
    32a0:	8f 89       	ldd	r24, Y+23	; 0x17
    32a2:	98 8d       	ldd	r25, Y+24	; 0x18
    32a4:	20 e0       	ldi	r18, 0x00	; 0
    32a6:	30 e0       	ldi	r19, 0x00	; 0
    32a8:	40 e8       	ldi	r20, 0x80	; 128
    32aa:	5f e3       	ldi	r21, 0x3F	; 63
    32ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32b0:	88 23       	and	r24, r24
    32b2:	2c f4       	brge	.+10     	; 0x32be <start+0x14ac>
		__ticks = 1;
    32b4:	81 e0       	ldi	r24, 0x01	; 1
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	9c 8b       	std	Y+20, r25	; 0x14
    32ba:	8b 8b       	std	Y+19, r24	; 0x13
    32bc:	3f c0       	rjmp	.+126    	; 0x333c <start+0x152a>
	else if (__tmp > 65535)
    32be:	6d 89       	ldd	r22, Y+21	; 0x15
    32c0:	7e 89       	ldd	r23, Y+22	; 0x16
    32c2:	8f 89       	ldd	r24, Y+23	; 0x17
    32c4:	98 8d       	ldd	r25, Y+24	; 0x18
    32c6:	20 e0       	ldi	r18, 0x00	; 0
    32c8:	3f ef       	ldi	r19, 0xFF	; 255
    32ca:	4f e7       	ldi	r20, 0x7F	; 127
    32cc:	57 e4       	ldi	r21, 0x47	; 71
    32ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32d2:	18 16       	cp	r1, r24
    32d4:	4c f5       	brge	.+82     	; 0x3328 <start+0x1516>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32d6:	69 8d       	ldd	r22, Y+25	; 0x19
    32d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32de:	20 e0       	ldi	r18, 0x00	; 0
    32e0:	30 e0       	ldi	r19, 0x00	; 0
    32e2:	40 e2       	ldi	r20, 0x20	; 32
    32e4:	51 e4       	ldi	r21, 0x41	; 65
    32e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32ea:	dc 01       	movw	r26, r24
    32ec:	cb 01       	movw	r24, r22
    32ee:	bc 01       	movw	r22, r24
    32f0:	cd 01       	movw	r24, r26
    32f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32f6:	dc 01       	movw	r26, r24
    32f8:	cb 01       	movw	r24, r22
    32fa:	9c 8b       	std	Y+20, r25	; 0x14
    32fc:	8b 8b       	std	Y+19, r24	; 0x13
    32fe:	0f c0       	rjmp	.+30     	; 0x331e <start+0x150c>
    3300:	88 ec       	ldi	r24, 0xC8	; 200
    3302:	90 e0       	ldi	r25, 0x00	; 0
    3304:	9a 8b       	std	Y+18, r25	; 0x12
    3306:	89 8b       	std	Y+17, r24	; 0x11
    3308:	89 89       	ldd	r24, Y+17	; 0x11
    330a:	9a 89       	ldd	r25, Y+18	; 0x12
    330c:	01 97       	sbiw	r24, 0x01	; 1
    330e:	f1 f7       	brne	.-4      	; 0x330c <start+0x14fa>
    3310:	9a 8b       	std	Y+18, r25	; 0x12
    3312:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3314:	8b 89       	ldd	r24, Y+19	; 0x13
    3316:	9c 89       	ldd	r25, Y+20	; 0x14
    3318:	01 97       	sbiw	r24, 0x01	; 1
    331a:	9c 8b       	std	Y+20, r25	; 0x14
    331c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    331e:	8b 89       	ldd	r24, Y+19	; 0x13
    3320:	9c 89       	ldd	r25, Y+20	; 0x14
    3322:	00 97       	sbiw	r24, 0x00	; 0
    3324:	69 f7       	brne	.-38     	; 0x3300 <start+0x14ee>
    3326:	51 c9       	rjmp	.-3422   	; 0x25ca <start+0x7b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3328:	6d 89       	ldd	r22, Y+21	; 0x15
    332a:	7e 89       	ldd	r23, Y+22	; 0x16
    332c:	8f 89       	ldd	r24, Y+23	; 0x17
    332e:	98 8d       	ldd	r25, Y+24	; 0x18
    3330:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3334:	dc 01       	movw	r26, r24
    3336:	cb 01       	movw	r24, r22
    3338:	9c 8b       	std	Y+20, r25	; 0x14
    333a:	8b 8b       	std	Y+19, r24	; 0x13
    333c:	8b 89       	ldd	r24, Y+19	; 0x13
    333e:	9c 89       	ldd	r25, Y+20	; 0x14
    3340:	98 8b       	std	Y+16, r25	; 0x10
    3342:	8f 87       	std	Y+15, r24	; 0x0f
    3344:	8f 85       	ldd	r24, Y+15	; 0x0f
    3346:	98 89       	ldd	r25, Y+16	; 0x10
    3348:	01 97       	sbiw	r24, 0x01	; 1
    334a:	f1 f7       	brne	.-4      	; 0x3348 <start+0x1536>
    334c:	98 8b       	std	Y+16, r25	; 0x10
    334e:	8f 87       	std	Y+15, r24	; 0x0f
    3350:	3c c9       	rjmp	.-3464   	; 0x25ca <start+0x7b8>
				}
			}

			else
			{
				uint8 falsePasswordCounter = UART_recieveByte();
    3352:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <UART_recieveByte>
    3356:	fe 01       	movw	r30, r28
    3358:	ef 51       	subi	r30, 0x1F	; 31
    335a:	ff 4f       	sbci	r31, 0xFF	; 255
    335c:	80 83       	st	Z, r24
				if(falsePasswordCounter >=3)
    335e:	fe 01       	movw	r30, r28
    3360:	ef 51       	subi	r30, 0x1F	; 31
    3362:	ff 4f       	sbci	r31, 0xFF	; 255
    3364:	80 81       	ld	r24, Z
    3366:	83 30       	cpi	r24, 0x03	; 3
    3368:	18 f0       	brcs	.+6      	; 0x3370 <start+0x155e>
				{
					securityAlarm();
    336a:	0e 94 27 1c 	call	0x384e	; 0x384e <securityAlarm>
    336e:	2d c9       	rjmp	.-3494   	; 0x25ca <start+0x7b8>
				}

				else
				{
					LCD_clearScreen();
    3370:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <LCD_clearScreen>
					LCD_displayString("Wrong Password");
    3374:	8b e8       	ldi	r24, 0x8B	; 139
    3376:	90 e0       	ldi	r25, 0x00	; 0
    3378:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <LCD_displayString>
    337c:	80 e0       	ldi	r24, 0x00	; 0
    337e:	90 e4       	ldi	r25, 0x40	; 64
    3380:	ac e1       	ldi	r26, 0x1C	; 28
    3382:	b5 e4       	ldi	r27, 0x45	; 69
    3384:	8b 87       	std	Y+11, r24	; 0x0b
    3386:	9c 87       	std	Y+12, r25	; 0x0c
    3388:	ad 87       	std	Y+13, r26	; 0x0d
    338a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    338c:	6b 85       	ldd	r22, Y+11	; 0x0b
    338e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3390:	8d 85       	ldd	r24, Y+13	; 0x0d
    3392:	9e 85       	ldd	r25, Y+14	; 0x0e
    3394:	20 e0       	ldi	r18, 0x00	; 0
    3396:	30 e0       	ldi	r19, 0x00	; 0
    3398:	4a ef       	ldi	r20, 0xFA	; 250
    339a:	54 e4       	ldi	r21, 0x44	; 68
    339c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33a0:	dc 01       	movw	r26, r24
    33a2:	cb 01       	movw	r24, r22
    33a4:	8f 83       	std	Y+7, r24	; 0x07
    33a6:	98 87       	std	Y+8, r25	; 0x08
    33a8:	a9 87       	std	Y+9, r26	; 0x09
    33aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33ac:	6f 81       	ldd	r22, Y+7	; 0x07
    33ae:	78 85       	ldd	r23, Y+8	; 0x08
    33b0:	89 85       	ldd	r24, Y+9	; 0x09
    33b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    33b4:	20 e0       	ldi	r18, 0x00	; 0
    33b6:	30 e0       	ldi	r19, 0x00	; 0
    33b8:	40 e8       	ldi	r20, 0x80	; 128
    33ba:	5f e3       	ldi	r21, 0x3F	; 63
    33bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33c0:	88 23       	and	r24, r24
    33c2:	2c f4       	brge	.+10     	; 0x33ce <start+0x15bc>
		__ticks = 1;
    33c4:	81 e0       	ldi	r24, 0x01	; 1
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	9e 83       	std	Y+6, r25	; 0x06
    33ca:	8d 83       	std	Y+5, r24	; 0x05
    33cc:	3f c0       	rjmp	.+126    	; 0x344c <start+0x163a>
	else if (__tmp > 65535)
    33ce:	6f 81       	ldd	r22, Y+7	; 0x07
    33d0:	78 85       	ldd	r23, Y+8	; 0x08
    33d2:	89 85       	ldd	r24, Y+9	; 0x09
    33d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    33d6:	20 e0       	ldi	r18, 0x00	; 0
    33d8:	3f ef       	ldi	r19, 0xFF	; 255
    33da:	4f e7       	ldi	r20, 0x7F	; 127
    33dc:	57 e4       	ldi	r21, 0x47	; 71
    33de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33e2:	18 16       	cp	r1, r24
    33e4:	4c f5       	brge	.+82     	; 0x3438 <start+0x1626>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    33e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    33ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    33ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    33ee:	20 e0       	ldi	r18, 0x00	; 0
    33f0:	30 e0       	ldi	r19, 0x00	; 0
    33f2:	40 e2       	ldi	r20, 0x20	; 32
    33f4:	51 e4       	ldi	r21, 0x41	; 65
    33f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33fa:	dc 01       	movw	r26, r24
    33fc:	cb 01       	movw	r24, r22
    33fe:	bc 01       	movw	r22, r24
    3400:	cd 01       	movw	r24, r26
    3402:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3406:	dc 01       	movw	r26, r24
    3408:	cb 01       	movw	r24, r22
    340a:	9e 83       	std	Y+6, r25	; 0x06
    340c:	8d 83       	std	Y+5, r24	; 0x05
    340e:	0f c0       	rjmp	.+30     	; 0x342e <start+0x161c>
    3410:	88 ec       	ldi	r24, 0xC8	; 200
    3412:	90 e0       	ldi	r25, 0x00	; 0
    3414:	9c 83       	std	Y+4, r25	; 0x04
    3416:	8b 83       	std	Y+3, r24	; 0x03
    3418:	8b 81       	ldd	r24, Y+3	; 0x03
    341a:	9c 81       	ldd	r25, Y+4	; 0x04
    341c:	01 97       	sbiw	r24, 0x01	; 1
    341e:	f1 f7       	brne	.-4      	; 0x341c <start+0x160a>
    3420:	9c 83       	std	Y+4, r25	; 0x04
    3422:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3424:	8d 81       	ldd	r24, Y+5	; 0x05
    3426:	9e 81       	ldd	r25, Y+6	; 0x06
    3428:	01 97       	sbiw	r24, 0x01	; 1
    342a:	9e 83       	std	Y+6, r25	; 0x06
    342c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    342e:	8d 81       	ldd	r24, Y+5	; 0x05
    3430:	9e 81       	ldd	r25, Y+6	; 0x06
    3432:	00 97       	sbiw	r24, 0x00	; 0
    3434:	69 f7       	brne	.-38     	; 0x3410 <start+0x15fe>
    3436:	c9 c8       	rjmp	.-3694   	; 0x25ca <start+0x7b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3438:	6f 81       	ldd	r22, Y+7	; 0x07
    343a:	78 85       	ldd	r23, Y+8	; 0x08
    343c:	89 85       	ldd	r24, Y+9	; 0x09
    343e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3440:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3444:	dc 01       	movw	r26, r24
    3446:	cb 01       	movw	r24, r22
    3448:	9e 83       	std	Y+6, r25	; 0x06
    344a:	8d 83       	std	Y+5, r24	; 0x05
    344c:	8d 81       	ldd	r24, Y+5	; 0x05
    344e:	9e 81       	ldd	r25, Y+6	; 0x06
    3450:	9a 83       	std	Y+2, r25	; 0x02
    3452:	89 83       	std	Y+1, r24	; 0x01
    3454:	89 81       	ldd	r24, Y+1	; 0x01
    3456:	9a 81       	ldd	r25, Y+2	; 0x02
    3458:	01 97       	sbiw	r24, 0x01	; 1
    345a:	f1 f7       	brne	.-4      	; 0x3458 <start+0x1646>
    345c:	9a 83       	std	Y+2, r25	; 0x02
    345e:	89 83       	std	Y+1, r24	; 0x01
    3460:	b4 c8       	rjmp	.-3736   	; 0x25ca <start+0x7b8>

00003462 <enterPassword>:

/*
 * description: this function will include store the 5 letters that will be stored in password plus confirm letter
 */
void enterPassword (uint8 password[])
{
    3462:	0f 93       	push	r16
    3464:	1f 93       	push	r17
    3466:	df 93       	push	r29
    3468:	cf 93       	push	r28
    346a:	cd b7       	in	r28, 0x3d	; 61
    346c:	de b7       	in	r29, 0x3e	; 62
    346e:	6f 97       	sbiw	r28, 0x1f	; 31
    3470:	0f b6       	in	r0, 0x3f	; 63
    3472:	f8 94       	cli
    3474:	de bf       	out	0x3e, r29	; 62
    3476:	0f be       	out	0x3f, r0	; 63
    3478:	cd bf       	out	0x3d, r28	; 61
    347a:	9f 8f       	std	Y+31, r25	; 0x1f
    347c:	8e 8f       	std	Y+30, r24	; 0x1e
	uint8 i;
	LCD_moveCursor(1, 5);
    347e:	81 e0       	ldi	r24, 0x01	; 1
    3480:	65 e0       	ldi	r22, 0x05	; 5
    3482:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <LCD_moveCursor>

	for (i=0 ; i<6 ;++i)
    3486:	1d 8e       	std	Y+29, r1	; 0x1d
    3488:	8b c0       	rjmp	.+278    	; 0x35a0 <enterPassword+0x13e>
	{
		while ((KEYPAD_getPressedKey() != 13) && (i == 5));
    348a:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_getPressedKey>
    348e:	8d 30       	cpi	r24, 0x0D	; 13
    3490:	19 f0       	breq	.+6      	; 0x3498 <enterPassword+0x36>
    3492:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3494:	85 30       	cpi	r24, 0x05	; 5
    3496:	c9 f3       	breq	.-14     	; 0x348a <enterPassword+0x28>

		password[i] = KEYPAD_getPressedKey();
    3498:	8d 8d       	ldd	r24, Y+29	; 0x1d
    349a:	28 2f       	mov	r18, r24
    349c:	30 e0       	ldi	r19, 0x00	; 0
    349e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    34a0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    34a2:	8c 01       	movw	r16, r24
    34a4:	02 0f       	add	r16, r18
    34a6:	13 1f       	adc	r17, r19
    34a8:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_getPressedKey>
    34ac:	f8 01       	movw	r30, r16
    34ae:	80 83       	st	Z, r24
    34b0:	80 e0       	ldi	r24, 0x00	; 0
    34b2:	90 e0       	ldi	r25, 0x00	; 0
    34b4:	aa ef       	ldi	r26, 0xFA	; 250
    34b6:	b3 e4       	ldi	r27, 0x43	; 67
    34b8:	89 8f       	std	Y+25, r24	; 0x19
    34ba:	9a 8f       	std	Y+26, r25	; 0x1a
    34bc:	ab 8f       	std	Y+27, r26	; 0x1b
    34be:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34c0:	69 8d       	ldd	r22, Y+25	; 0x19
    34c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34c8:	20 e0       	ldi	r18, 0x00	; 0
    34ca:	30 e0       	ldi	r19, 0x00	; 0
    34cc:	4a ef       	ldi	r20, 0xFA	; 250
    34ce:	54 e4       	ldi	r21, 0x44	; 68
    34d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34d4:	dc 01       	movw	r26, r24
    34d6:	cb 01       	movw	r24, r22
    34d8:	8d 8b       	std	Y+21, r24	; 0x15
    34da:	9e 8b       	std	Y+22, r25	; 0x16
    34dc:	af 8b       	std	Y+23, r26	; 0x17
    34de:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    34e0:	6d 89       	ldd	r22, Y+21	; 0x15
    34e2:	7e 89       	ldd	r23, Y+22	; 0x16
    34e4:	8f 89       	ldd	r24, Y+23	; 0x17
    34e6:	98 8d       	ldd	r25, Y+24	; 0x18
    34e8:	20 e0       	ldi	r18, 0x00	; 0
    34ea:	30 e0       	ldi	r19, 0x00	; 0
    34ec:	40 e8       	ldi	r20, 0x80	; 128
    34ee:	5f e3       	ldi	r21, 0x3F	; 63
    34f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34f4:	88 23       	and	r24, r24
    34f6:	2c f4       	brge	.+10     	; 0x3502 <enterPassword+0xa0>
		__ticks = 1;
    34f8:	81 e0       	ldi	r24, 0x01	; 1
    34fa:	90 e0       	ldi	r25, 0x00	; 0
    34fc:	9c 8b       	std	Y+20, r25	; 0x14
    34fe:	8b 8b       	std	Y+19, r24	; 0x13
    3500:	3f c0       	rjmp	.+126    	; 0x3580 <enterPassword+0x11e>
	else if (__tmp > 65535)
    3502:	6d 89       	ldd	r22, Y+21	; 0x15
    3504:	7e 89       	ldd	r23, Y+22	; 0x16
    3506:	8f 89       	ldd	r24, Y+23	; 0x17
    3508:	98 8d       	ldd	r25, Y+24	; 0x18
    350a:	20 e0       	ldi	r18, 0x00	; 0
    350c:	3f ef       	ldi	r19, 0xFF	; 255
    350e:	4f e7       	ldi	r20, 0x7F	; 127
    3510:	57 e4       	ldi	r21, 0x47	; 71
    3512:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3516:	18 16       	cp	r1, r24
    3518:	4c f5       	brge	.+82     	; 0x356c <enterPassword+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    351a:	69 8d       	ldd	r22, Y+25	; 0x19
    351c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    351e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3520:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3522:	20 e0       	ldi	r18, 0x00	; 0
    3524:	30 e0       	ldi	r19, 0x00	; 0
    3526:	40 e2       	ldi	r20, 0x20	; 32
    3528:	51 e4       	ldi	r21, 0x41	; 65
    352a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    352e:	dc 01       	movw	r26, r24
    3530:	cb 01       	movw	r24, r22
    3532:	bc 01       	movw	r22, r24
    3534:	cd 01       	movw	r24, r26
    3536:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    353a:	dc 01       	movw	r26, r24
    353c:	cb 01       	movw	r24, r22
    353e:	9c 8b       	std	Y+20, r25	; 0x14
    3540:	8b 8b       	std	Y+19, r24	; 0x13
    3542:	0f c0       	rjmp	.+30     	; 0x3562 <enterPassword+0x100>
    3544:	88 ec       	ldi	r24, 0xC8	; 200
    3546:	90 e0       	ldi	r25, 0x00	; 0
    3548:	9a 8b       	std	Y+18, r25	; 0x12
    354a:	89 8b       	std	Y+17, r24	; 0x11
    354c:	89 89       	ldd	r24, Y+17	; 0x11
    354e:	9a 89       	ldd	r25, Y+18	; 0x12
    3550:	01 97       	sbiw	r24, 0x01	; 1
    3552:	f1 f7       	brne	.-4      	; 0x3550 <enterPassword+0xee>
    3554:	9a 8b       	std	Y+18, r25	; 0x12
    3556:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3558:	8b 89       	ldd	r24, Y+19	; 0x13
    355a:	9c 89       	ldd	r25, Y+20	; 0x14
    355c:	01 97       	sbiw	r24, 0x01	; 1
    355e:	9c 8b       	std	Y+20, r25	; 0x14
    3560:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3562:	8b 89       	ldd	r24, Y+19	; 0x13
    3564:	9c 89       	ldd	r25, Y+20	; 0x14
    3566:	00 97       	sbiw	r24, 0x00	; 0
    3568:	69 f7       	brne	.-38     	; 0x3544 <enterPassword+0xe2>
    356a:	14 c0       	rjmp	.+40     	; 0x3594 <enterPassword+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    356c:	6d 89       	ldd	r22, Y+21	; 0x15
    356e:	7e 89       	ldd	r23, Y+22	; 0x16
    3570:	8f 89       	ldd	r24, Y+23	; 0x17
    3572:	98 8d       	ldd	r25, Y+24	; 0x18
    3574:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3578:	dc 01       	movw	r26, r24
    357a:	cb 01       	movw	r24, r22
    357c:	9c 8b       	std	Y+20, r25	; 0x14
    357e:	8b 8b       	std	Y+19, r24	; 0x13
    3580:	8b 89       	ldd	r24, Y+19	; 0x13
    3582:	9c 89       	ldd	r25, Y+20	; 0x14
    3584:	98 8b       	std	Y+16, r25	; 0x10
    3586:	8f 87       	std	Y+15, r24	; 0x0f
    3588:	8f 85       	ldd	r24, Y+15	; 0x0f
    358a:	98 89       	ldd	r25, Y+16	; 0x10
    358c:	01 97       	sbiw	r24, 0x01	; 1
    358e:	f1 f7       	brne	.-4      	; 0x358c <enterPassword+0x12a>
    3590:	98 8b       	std	Y+16, r25	; 0x10
    3592:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms (KEYPAD_DELAY);
		LCD_displayCharacter('*');
    3594:	8a e2       	ldi	r24, 0x2A	; 42
    3596:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <LCD_displayCharacter>
void enterPassword (uint8 password[])
{
	uint8 i;
	LCD_moveCursor(1, 5);

	for (i=0 ; i<6 ;++i)
    359a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    359c:	8f 5f       	subi	r24, 0xFF	; 255
    359e:	8d 8f       	std	Y+29, r24	; 0x1d
    35a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35a2:	86 30       	cpi	r24, 0x06	; 6
    35a4:	08 f4       	brcc	.+2      	; 0x35a8 <enterPassword+0x146>
    35a6:	71 cf       	rjmp	.-286    	; 0x348a <enterPassword+0x28>
    35a8:	80 e0       	ldi	r24, 0x00	; 0
    35aa:	90 e0       	ldi	r25, 0x00	; 0
    35ac:	aa ef       	ldi	r26, 0xFA	; 250
    35ae:	b3 e4       	ldi	r27, 0x43	; 67
    35b0:	8b 87       	std	Y+11, r24	; 0x0b
    35b2:	9c 87       	std	Y+12, r25	; 0x0c
    35b4:	ad 87       	std	Y+13, r26	; 0x0d
    35b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    35ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    35bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    35be:	9e 85       	ldd	r25, Y+14	; 0x0e
    35c0:	20 e0       	ldi	r18, 0x00	; 0
    35c2:	30 e0       	ldi	r19, 0x00	; 0
    35c4:	4a ef       	ldi	r20, 0xFA	; 250
    35c6:	54 e4       	ldi	r21, 0x44	; 68
    35c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35cc:	dc 01       	movw	r26, r24
    35ce:	cb 01       	movw	r24, r22
    35d0:	8f 83       	std	Y+7, r24	; 0x07
    35d2:	98 87       	std	Y+8, r25	; 0x08
    35d4:	a9 87       	std	Y+9, r26	; 0x09
    35d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35d8:	6f 81       	ldd	r22, Y+7	; 0x07
    35da:	78 85       	ldd	r23, Y+8	; 0x08
    35dc:	89 85       	ldd	r24, Y+9	; 0x09
    35de:	9a 85       	ldd	r25, Y+10	; 0x0a
    35e0:	20 e0       	ldi	r18, 0x00	; 0
    35e2:	30 e0       	ldi	r19, 0x00	; 0
    35e4:	40 e8       	ldi	r20, 0x80	; 128
    35e6:	5f e3       	ldi	r21, 0x3F	; 63
    35e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35ec:	88 23       	and	r24, r24
    35ee:	2c f4       	brge	.+10     	; 0x35fa <enterPassword+0x198>
		__ticks = 1;
    35f0:	81 e0       	ldi	r24, 0x01	; 1
    35f2:	90 e0       	ldi	r25, 0x00	; 0
    35f4:	9e 83       	std	Y+6, r25	; 0x06
    35f6:	8d 83       	std	Y+5, r24	; 0x05
    35f8:	3f c0       	rjmp	.+126    	; 0x3678 <enterPassword+0x216>
	else if (__tmp > 65535)
    35fa:	6f 81       	ldd	r22, Y+7	; 0x07
    35fc:	78 85       	ldd	r23, Y+8	; 0x08
    35fe:	89 85       	ldd	r24, Y+9	; 0x09
    3600:	9a 85       	ldd	r25, Y+10	; 0x0a
    3602:	20 e0       	ldi	r18, 0x00	; 0
    3604:	3f ef       	ldi	r19, 0xFF	; 255
    3606:	4f e7       	ldi	r20, 0x7F	; 127
    3608:	57 e4       	ldi	r21, 0x47	; 71
    360a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    360e:	18 16       	cp	r1, r24
    3610:	4c f5       	brge	.+82     	; 0x3664 <enterPassword+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3612:	6b 85       	ldd	r22, Y+11	; 0x0b
    3614:	7c 85       	ldd	r23, Y+12	; 0x0c
    3616:	8d 85       	ldd	r24, Y+13	; 0x0d
    3618:	9e 85       	ldd	r25, Y+14	; 0x0e
    361a:	20 e0       	ldi	r18, 0x00	; 0
    361c:	30 e0       	ldi	r19, 0x00	; 0
    361e:	40 e2       	ldi	r20, 0x20	; 32
    3620:	51 e4       	ldi	r21, 0x41	; 65
    3622:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3626:	dc 01       	movw	r26, r24
    3628:	cb 01       	movw	r24, r22
    362a:	bc 01       	movw	r22, r24
    362c:	cd 01       	movw	r24, r26
    362e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3632:	dc 01       	movw	r26, r24
    3634:	cb 01       	movw	r24, r22
    3636:	9e 83       	std	Y+6, r25	; 0x06
    3638:	8d 83       	std	Y+5, r24	; 0x05
    363a:	0f c0       	rjmp	.+30     	; 0x365a <enterPassword+0x1f8>
    363c:	88 ec       	ldi	r24, 0xC8	; 200
    363e:	90 e0       	ldi	r25, 0x00	; 0
    3640:	9c 83       	std	Y+4, r25	; 0x04
    3642:	8b 83       	std	Y+3, r24	; 0x03
    3644:	8b 81       	ldd	r24, Y+3	; 0x03
    3646:	9c 81       	ldd	r25, Y+4	; 0x04
    3648:	01 97       	sbiw	r24, 0x01	; 1
    364a:	f1 f7       	brne	.-4      	; 0x3648 <enterPassword+0x1e6>
    364c:	9c 83       	std	Y+4, r25	; 0x04
    364e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3650:	8d 81       	ldd	r24, Y+5	; 0x05
    3652:	9e 81       	ldd	r25, Y+6	; 0x06
    3654:	01 97       	sbiw	r24, 0x01	; 1
    3656:	9e 83       	std	Y+6, r25	; 0x06
    3658:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    365a:	8d 81       	ldd	r24, Y+5	; 0x05
    365c:	9e 81       	ldd	r25, Y+6	; 0x06
    365e:	00 97       	sbiw	r24, 0x00	; 0
    3660:	69 f7       	brne	.-38     	; 0x363c <enterPassword+0x1da>
    3662:	14 c0       	rjmp	.+40     	; 0x368c <enterPassword+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3664:	6f 81       	ldd	r22, Y+7	; 0x07
    3666:	78 85       	ldd	r23, Y+8	; 0x08
    3668:	89 85       	ldd	r24, Y+9	; 0x09
    366a:	9a 85       	ldd	r25, Y+10	; 0x0a
    366c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3670:	dc 01       	movw	r26, r24
    3672:	cb 01       	movw	r24, r22
    3674:	9e 83       	std	Y+6, r25	; 0x06
    3676:	8d 83       	std	Y+5, r24	; 0x05
    3678:	8d 81       	ldd	r24, Y+5	; 0x05
    367a:	9e 81       	ldd	r25, Y+6	; 0x06
    367c:	9a 83       	std	Y+2, r25	; 0x02
    367e:	89 83       	std	Y+1, r24	; 0x01
    3680:	89 81       	ldd	r24, Y+1	; 0x01
    3682:	9a 81       	ldd	r25, Y+2	; 0x02
    3684:	01 97       	sbiw	r24, 0x01	; 1
    3686:	f1 f7       	brne	.-4      	; 0x3684 <enterPassword+0x222>
    3688:	9a 83       	std	Y+2, r25	; 0x02
    368a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms (KEYPAD_DELAY);
		LCD_displayCharacter('*');
	}

	_delay_ms (KEYPAD_DELAY);
}
    368c:	6f 96       	adiw	r28, 0x1f	; 31
    368e:	0f b6       	in	r0, 0x3f	; 63
    3690:	f8 94       	cli
    3692:	de bf       	out	0x3e, r29	; 62
    3694:	0f be       	out	0x3f, r0	; 63
    3696:	cd bf       	out	0x3d, r28	; 61
    3698:	cf 91       	pop	r28
    369a:	df 91       	pop	r29
    369c:	1f 91       	pop	r17
    369e:	0f 91       	pop	r16
    36a0:	08 95       	ret

000036a2 <sendPassword>:
/*
 * description send the password byte after byte to the Control_ECU MC to be checked
 */
void sendPassword (uint8 password[])
{
    36a2:	df 93       	push	r29
    36a4:	cf 93       	push	r28
    36a6:	cd b7       	in	r28, 0x3d	; 61
    36a8:	de b7       	in	r29, 0x3e	; 62
    36aa:	61 97       	sbiw	r28, 0x11	; 17
    36ac:	0f b6       	in	r0, 0x3f	; 63
    36ae:	f8 94       	cli
    36b0:	de bf       	out	0x3e, r29	; 62
    36b2:	0f be       	out	0x3f, r0	; 63
    36b4:	cd bf       	out	0x3d, r28	; 61
    36b6:	99 8b       	std	Y+17, r25	; 0x11
    36b8:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;

	for (i=0 ; i<5 ; ++i)
    36ba:	1f 86       	std	Y+15, r1	; 0x0f
    36bc:	0e c0       	rjmp	.+28     	; 0x36da <sendPassword+0x38>
	{
		UART_sendByte (password[i]);
    36be:	8f 85       	ldd	r24, Y+15	; 0x0f
    36c0:	28 2f       	mov	r18, r24
    36c2:	30 e0       	ldi	r19, 0x00	; 0
    36c4:	88 89       	ldd	r24, Y+16	; 0x10
    36c6:	99 89       	ldd	r25, Y+17	; 0x11
    36c8:	fc 01       	movw	r30, r24
    36ca:	e2 0f       	add	r30, r18
    36cc:	f3 1f       	adc	r31, r19
    36ce:	80 81       	ld	r24, Z
    36d0:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <UART_sendByte>
 */
void sendPassword (uint8 password[])
{
	uint8 i;

	for (i=0 ; i<5 ; ++i)
    36d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    36d6:	8f 5f       	subi	r24, 0xFF	; 255
    36d8:	8f 87       	std	Y+15, r24	; 0x0f
    36da:	8f 85       	ldd	r24, Y+15	; 0x0f
    36dc:	85 30       	cpi	r24, 0x05	; 5
    36de:	78 f3       	brcs	.-34     	; 0x36be <sendPassword+0x1c>
    36e0:	80 e0       	ldi	r24, 0x00	; 0
    36e2:	90 e0       	ldi	r25, 0x00	; 0
    36e4:	a8 e4       	ldi	r26, 0x48	; 72
    36e6:	b2 e4       	ldi	r27, 0x42	; 66
    36e8:	8b 87       	std	Y+11, r24	; 0x0b
    36ea:	9c 87       	std	Y+12, r25	; 0x0c
    36ec:	ad 87       	std	Y+13, r26	; 0x0d
    36ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    36f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    36f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    36f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    36f8:	20 e0       	ldi	r18, 0x00	; 0
    36fa:	30 e0       	ldi	r19, 0x00	; 0
    36fc:	4a ef       	ldi	r20, 0xFA	; 250
    36fe:	54 e4       	ldi	r21, 0x44	; 68
    3700:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3704:	dc 01       	movw	r26, r24
    3706:	cb 01       	movw	r24, r22
    3708:	8f 83       	std	Y+7, r24	; 0x07
    370a:	98 87       	std	Y+8, r25	; 0x08
    370c:	a9 87       	std	Y+9, r26	; 0x09
    370e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3710:	6f 81       	ldd	r22, Y+7	; 0x07
    3712:	78 85       	ldd	r23, Y+8	; 0x08
    3714:	89 85       	ldd	r24, Y+9	; 0x09
    3716:	9a 85       	ldd	r25, Y+10	; 0x0a
    3718:	20 e0       	ldi	r18, 0x00	; 0
    371a:	30 e0       	ldi	r19, 0x00	; 0
    371c:	40 e8       	ldi	r20, 0x80	; 128
    371e:	5f e3       	ldi	r21, 0x3F	; 63
    3720:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3724:	88 23       	and	r24, r24
    3726:	2c f4       	brge	.+10     	; 0x3732 <sendPassword+0x90>
		__ticks = 1;
    3728:	81 e0       	ldi	r24, 0x01	; 1
    372a:	90 e0       	ldi	r25, 0x00	; 0
    372c:	9e 83       	std	Y+6, r25	; 0x06
    372e:	8d 83       	std	Y+5, r24	; 0x05
    3730:	3f c0       	rjmp	.+126    	; 0x37b0 <sendPassword+0x10e>
	else if (__tmp > 65535)
    3732:	6f 81       	ldd	r22, Y+7	; 0x07
    3734:	78 85       	ldd	r23, Y+8	; 0x08
    3736:	89 85       	ldd	r24, Y+9	; 0x09
    3738:	9a 85       	ldd	r25, Y+10	; 0x0a
    373a:	20 e0       	ldi	r18, 0x00	; 0
    373c:	3f ef       	ldi	r19, 0xFF	; 255
    373e:	4f e7       	ldi	r20, 0x7F	; 127
    3740:	57 e4       	ldi	r21, 0x47	; 71
    3742:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3746:	18 16       	cp	r1, r24
    3748:	4c f5       	brge	.+82     	; 0x379c <sendPassword+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    374a:	6b 85       	ldd	r22, Y+11	; 0x0b
    374c:	7c 85       	ldd	r23, Y+12	; 0x0c
    374e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3750:	9e 85       	ldd	r25, Y+14	; 0x0e
    3752:	20 e0       	ldi	r18, 0x00	; 0
    3754:	30 e0       	ldi	r19, 0x00	; 0
    3756:	40 e2       	ldi	r20, 0x20	; 32
    3758:	51 e4       	ldi	r21, 0x41	; 65
    375a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    375e:	dc 01       	movw	r26, r24
    3760:	cb 01       	movw	r24, r22
    3762:	bc 01       	movw	r22, r24
    3764:	cd 01       	movw	r24, r26
    3766:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    376a:	dc 01       	movw	r26, r24
    376c:	cb 01       	movw	r24, r22
    376e:	9e 83       	std	Y+6, r25	; 0x06
    3770:	8d 83       	std	Y+5, r24	; 0x05
    3772:	0f c0       	rjmp	.+30     	; 0x3792 <sendPassword+0xf0>
    3774:	88 ec       	ldi	r24, 0xC8	; 200
    3776:	90 e0       	ldi	r25, 0x00	; 0
    3778:	9c 83       	std	Y+4, r25	; 0x04
    377a:	8b 83       	std	Y+3, r24	; 0x03
    377c:	8b 81       	ldd	r24, Y+3	; 0x03
    377e:	9c 81       	ldd	r25, Y+4	; 0x04
    3780:	01 97       	sbiw	r24, 0x01	; 1
    3782:	f1 f7       	brne	.-4      	; 0x3780 <sendPassword+0xde>
    3784:	9c 83       	std	Y+4, r25	; 0x04
    3786:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3788:	8d 81       	ldd	r24, Y+5	; 0x05
    378a:	9e 81       	ldd	r25, Y+6	; 0x06
    378c:	01 97       	sbiw	r24, 0x01	; 1
    378e:	9e 83       	std	Y+6, r25	; 0x06
    3790:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3792:	8d 81       	ldd	r24, Y+5	; 0x05
    3794:	9e 81       	ldd	r25, Y+6	; 0x06
    3796:	00 97       	sbiw	r24, 0x00	; 0
    3798:	69 f7       	brne	.-38     	; 0x3774 <sendPassword+0xd2>
    379a:	14 c0       	rjmp	.+40     	; 0x37c4 <sendPassword+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    379c:	6f 81       	ldd	r22, Y+7	; 0x07
    379e:	78 85       	ldd	r23, Y+8	; 0x08
    37a0:	89 85       	ldd	r24, Y+9	; 0x09
    37a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    37a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37a8:	dc 01       	movw	r26, r24
    37aa:	cb 01       	movw	r24, r22
    37ac:	9e 83       	std	Y+6, r25	; 0x06
    37ae:	8d 83       	std	Y+5, r24	; 0x05
    37b0:	8d 81       	ldd	r24, Y+5	; 0x05
    37b2:	9e 81       	ldd	r25, Y+6	; 0x06
    37b4:	9a 83       	std	Y+2, r25	; 0x02
    37b6:	89 83       	std	Y+1, r24	; 0x01
    37b8:	89 81       	ldd	r24, Y+1	; 0x01
    37ba:	9a 81       	ldd	r25, Y+2	; 0x02
    37bc:	01 97       	sbiw	r24, 0x01	; 1
    37be:	f1 f7       	brne	.-4      	; 0x37bc <sendPassword+0x11a>
    37c0:	9a 83       	std	Y+2, r25	; 0x02
    37c2:	89 83       	std	Y+1, r24	; 0x01
	{
		UART_sendByte (password[i]);
	}
	_delay_ms (UART_DELAY);
}
    37c4:	61 96       	adiw	r28, 0x11	; 17
    37c6:	0f b6       	in	r0, 0x3f	; 63
    37c8:	f8 94       	cli
    37ca:	de bf       	out	0x3e, r29	; 62
    37cc:	0f be       	out	0x3f, r0	; 63
    37ce:	cd bf       	out	0x3d, r28	; 61
    37d0:	cf 91       	pop	r28
    37d2:	df 91       	pop	r29
    37d4:	08 95       	ret

000037d6 <optionsDisplay>:
/*
 * this function will display the procedures in case of opening the door on the LCD
 */
void optionsDisplay (void)
{
    37d6:	df 93       	push	r29
    37d8:	cf 93       	push	r28
    37da:	cd b7       	in	r28, 0x3d	; 61
    37dc:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    37de:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "- :Change Pass");
    37e2:	2a ed       	ldi	r18, 0xDA	; 218
    37e4:	30 e0       	ldi	r19, 0x00	; 0
    37e6:	80 e0       	ldi	r24, 0x00	; 0
    37e8:	60 e0       	ldi	r22, 0x00	; 0
    37ea:	a9 01       	movw	r20, r18
    37ec:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "+ :Open Door");
    37f0:	29 ee       	ldi	r18, 0xE9	; 233
    37f2:	30 e0       	ldi	r19, 0x00	; 0
    37f4:	81 e0       	ldi	r24, 0x01	; 1
    37f6:	60 e0       	ldi	r22, 0x00	; 0
    37f8:	a9 01       	movw	r20, r18
    37fa:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <LCD_displayStringRowColumn>
}
    37fe:	cf 91       	pop	r28
    3800:	df 91       	pop	r29
    3802:	08 95       	ret

00003804 <openDoor>:

void openDoor (void)
{
    3804:	df 93       	push	r29
    3806:	cf 93       	push	r28
    3808:	cd b7       	in	r28, 0x3d	; 61
    380a:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    380c:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <LCD_clearScreen>
	LCD_displayString("Door Unlocking.");
    3810:	86 ef       	ldi	r24, 0xF6	; 246
    3812:	90 e0       	ldi	r25, 0x00	; 0
    3814:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <LCD_displayString>

	wait(15);//wait 15 seconds
    3818:	8f e0       	ldi	r24, 0x0F	; 15
    381a:	90 e0       	ldi	r25, 0x00	; 0
    381c:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <wait>

	LCD_clearScreen();
    3820:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <LCD_clearScreen>
	LCD_displayString("Door Opened");
    3824:	86 e0       	ldi	r24, 0x06	; 6
    3826:	91 e0       	ldi	r25, 0x01	; 1
    3828:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <LCD_displayString>

	wait(3);//wait 3 seconds
    382c:	83 e0       	ldi	r24, 0x03	; 3
    382e:	90 e0       	ldi	r25, 0x00	; 0
    3830:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <wait>

	LCD_clearScreen();
    3834:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <LCD_clearScreen>
	LCD_displayString("Door is Locking.");
    3838:	82 e1       	ldi	r24, 0x12	; 18
    383a:	91 e0       	ldi	r25, 0x01	; 1
    383c:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <LCD_displayString>
	wait(15);//wait 15 seconds
    3840:	8f e0       	ldi	r24, 0x0F	; 15
    3842:	90 e0       	ldi	r25, 0x00	; 0
    3844:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <wait>
}
    3848:	cf 91       	pop	r28
    384a:	df 91       	pop	r29
    384c:	08 95       	ret

0000384e <securityAlarm>:

void securityAlarm (void)
{
    384e:	df 93       	push	r29
    3850:	cf 93       	push	r28
    3852:	cd b7       	in	r28, 0x3d	; 61
    3854:	de b7       	in	r29, 0x3e	; 62

	LCD_clearScreen();
    3856:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <LCD_clearScreen>
	LCD_displayString("Security Alarm....");
    385a:	83 e2       	ldi	r24, 0x23	; 35
    385c:	91 e0       	ldi	r25, 0x01	; 1
    385e:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <LCD_displayString>
	wait(60);//wait for 1 minute
    3862:	8c e3       	ldi	r24, 0x3C	; 60
    3864:	90 e0       	ldi	r25, 0x00	; 0
    3866:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <wait>
}
    386a:	cf 91       	pop	r28
    386c:	df 91       	pop	r29
    386e:	08 95       	ret

00003870 <timer_tick>:
/* Function Description
 * call back function that increase the tick every call*/
void timer_tick(void){
    3870:	df 93       	push	r29
    3872:	cf 93       	push	r28
    3874:	cd b7       	in	r28, 0x3d	; 61
    3876:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    3878:	80 91 4c 01 	lds	r24, 0x014C
    387c:	90 91 4d 01 	lds	r25, 0x014D
    3880:	a0 91 4e 01 	lds	r26, 0x014E
    3884:	b0 91 4f 01 	lds	r27, 0x014F
    3888:	01 96       	adiw	r24, 0x01	; 1
    388a:	a1 1d       	adc	r26, r1
    388c:	b1 1d       	adc	r27, r1
    388e:	80 93 4c 01 	sts	0x014C, r24
    3892:	90 93 4d 01 	sts	0x014D, r25
    3896:	a0 93 4e 01 	sts	0x014E, r26
    389a:	b0 93 4f 01 	sts	0x014F, r27
}
    389e:	cf 91       	pop	r28
    38a0:	df 91       	pop	r29
    38a2:	08 95       	ret

000038a4 <wait>:
/* Function Description
 * wait until specified time in seconds */
void wait(uint16 seconds){
    38a4:	df 93       	push	r29
    38a6:	cf 93       	push	r28
    38a8:	cd b7       	in	r28, 0x3d	; 61
    38aa:	de b7       	in	r29, 0x3e	; 62
    38ac:	61 97       	sbiw	r28, 0x11	; 17
    38ae:	0f b6       	in	r0, 0x3f	; 63
    38b0:	f8 94       	cli
    38b2:	de bf       	out	0x3e, r29	; 62
    38b4:	0f be       	out	0x3f, r0	; 63
    38b6:	cd bf       	out	0x3d, r28	; 61
    38b8:	9c 87       	std	Y+12, r25	; 0x0c
    38ba:	8b 87       	std	Y+11, r24	; 0x0b
	g_tick=0;
    38bc:	10 92 4c 01 	sts	0x014C, r1
    38c0:	10 92 4d 01 	sts	0x014D, r1
    38c4:	10 92 4e 01 	sts	0x014E, r1
    38c8:	10 92 4f 01 	sts	0x014F, r1
	uint32 counter=seconds;/*the seconds required to be waited */
    38cc:	8b 85       	ldd	r24, Y+11	; 0x0b
    38ce:	9c 85       	ldd	r25, Y+12	; 0x0c
    38d0:	cc 01       	movw	r24, r24
    38d2:	a0 e0       	ldi	r26, 0x00	; 0
    38d4:	b0 e0       	ldi	r27, 0x00	; 0
    38d6:	89 83       	std	Y+1, r24	; 0x01
    38d8:	9a 83       	std	Y+2, r25	; 0x02
    38da:	ab 83       	std	Y+3, r26	; 0x03
    38dc:	bc 83       	std	Y+4, r27	; 0x04
	Timer1_ConfigType timerS={0,7813,F_CPU_1024,CTC};
    38de:	ce 01       	movw	r24, r28
    38e0:	05 96       	adiw	r24, 0x05	; 5
    38e2:	9e 87       	std	Y+14, r25	; 0x0e
    38e4:	8d 87       	std	Y+13, r24	; 0x0d
    38e6:	e5 e4       	ldi	r30, 0x45	; 69
    38e8:	f1 e0       	ldi	r31, 0x01	; 1
    38ea:	f8 8b       	std	Y+16, r31	; 0x10
    38ec:	ef 87       	std	Y+15, r30	; 0x0f
    38ee:	f6 e0       	ldi	r31, 0x06	; 6
    38f0:	f9 8b       	std	Y+17, r31	; 0x11
    38f2:	ef 85       	ldd	r30, Y+15	; 0x0f
    38f4:	f8 89       	ldd	r31, Y+16	; 0x10
    38f6:	00 80       	ld	r0, Z
    38f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    38fa:	98 89       	ldd	r25, Y+16	; 0x10
    38fc:	01 96       	adiw	r24, 0x01	; 1
    38fe:	98 8b       	std	Y+16, r25	; 0x10
    3900:	8f 87       	std	Y+15, r24	; 0x0f
    3902:	ed 85       	ldd	r30, Y+13	; 0x0d
    3904:	fe 85       	ldd	r31, Y+14	; 0x0e
    3906:	00 82       	st	Z, r0
    3908:	8d 85       	ldd	r24, Y+13	; 0x0d
    390a:	9e 85       	ldd	r25, Y+14	; 0x0e
    390c:	01 96       	adiw	r24, 0x01	; 1
    390e:	9e 87       	std	Y+14, r25	; 0x0e
    3910:	8d 87       	std	Y+13, r24	; 0x0d
    3912:	99 89       	ldd	r25, Y+17	; 0x11
    3914:	91 50       	subi	r25, 0x01	; 1
    3916:	99 8b       	std	Y+17, r25	; 0x11
    3918:	e9 89       	ldd	r30, Y+17	; 0x11
    391a:	ee 23       	and	r30, r30
    391c:	51 f7       	brne	.-44     	; 0x38f2 <wait+0x4e>
	Timer1_init(&timerS);
    391e:	ce 01       	movw	r24, r28
    3920:	05 96       	adiw	r24, 0x05	; 5
    3922:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <Timer1_init>
	Timer1_setCallBack(timer_tick);
    3926:	88 e3       	ldi	r24, 0x38	; 56
    3928:	9c e1       	ldi	r25, 0x1C	; 28
    392a:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <Timer1_setCallBack>
	while(g_tick<counter);
    392e:	20 91 4c 01 	lds	r18, 0x014C
    3932:	30 91 4d 01 	lds	r19, 0x014D
    3936:	40 91 4e 01 	lds	r20, 0x014E
    393a:	50 91 4f 01 	lds	r21, 0x014F
    393e:	89 81       	ldd	r24, Y+1	; 0x01
    3940:	9a 81       	ldd	r25, Y+2	; 0x02
    3942:	ab 81       	ldd	r26, Y+3	; 0x03
    3944:	bc 81       	ldd	r27, Y+4	; 0x04
    3946:	28 17       	cp	r18, r24
    3948:	39 07       	cpc	r19, r25
    394a:	4a 07       	cpc	r20, r26
    394c:	5b 07       	cpc	r21, r27
    394e:	78 f3       	brcs	.-34     	; 0x392e <wait+0x8a>
	Timer1_deInit();
    3950:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <Timer1_deInit>
}
    3954:	61 96       	adiw	r28, 0x11	; 17
    3956:	0f b6       	in	r0, 0x3f	; 63
    3958:	f8 94       	cli
    395a:	de bf       	out	0x3e, r29	; 62
    395c:	0f be       	out	0x3f, r0	; 63
    395e:	cd bf       	out	0x3d, r28	; 61
    3960:	cf 91       	pop	r28
    3962:	df 91       	pop	r29
    3964:	08 95       	ret

00003966 <main>:
/*******************************************************************************
 *                              MAIN Function                                  *
 *******************************************************************************/

int main()
{
    3966:	df 93       	push	r29
    3968:	cf 93       	push	r28
    396a:	cd b7       	in	r28, 0x3d	; 61
    396c:	de b7       	in	r29, 0x3e	; 62
	start();
    396e:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <start>
    3972:	80 e0       	ldi	r24, 0x00	; 0
    3974:	90 e0       	ldi	r25, 0x00	; 0
}
    3976:	cf 91       	pop	r28
    3978:	df 91       	pop	r29
    397a:	08 95       	ret

0000397c <__vector_9>:
static volatile void (*g_callBackPtrT1)(void) = NULL_PTR;
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
 // in case of using overflow mode
 ISR(TIMER1_OVF_vect){
    397c:	1f 92       	push	r1
    397e:	0f 92       	push	r0
    3980:	0f b6       	in	r0, 0x3f	; 63
    3982:	0f 92       	push	r0
    3984:	11 24       	eor	r1, r1
    3986:	2f 93       	push	r18
    3988:	3f 93       	push	r19
    398a:	4f 93       	push	r20
    398c:	5f 93       	push	r21
    398e:	6f 93       	push	r22
    3990:	7f 93       	push	r23
    3992:	8f 93       	push	r24
    3994:	9f 93       	push	r25
    3996:	af 93       	push	r26
    3998:	bf 93       	push	r27
    399a:	ef 93       	push	r30
    399c:	ff 93       	push	r31
    399e:	df 93       	push	r29
    39a0:	cf 93       	push	r28
    39a2:	cd b7       	in	r28, 0x3d	; 61
    39a4:	de b7       	in	r29, 0x3e	; 62
		if(g_callBackPtrT1!=NULL_PTR)
    39a6:	80 91 50 01 	lds	r24, 0x0150
    39aa:	90 91 51 01 	lds	r25, 0x0151
    39ae:	00 97       	sbiw	r24, 0x00	; 0
    39b0:	29 f0       	breq	.+10     	; 0x39bc <__vector_9+0x40>
			(*g_callBackPtrT1)();
    39b2:	e0 91 50 01 	lds	r30, 0x0150
    39b6:	f0 91 51 01 	lds	r31, 0x0151
    39ba:	09 95       	icall
 }
    39bc:	cf 91       	pop	r28
    39be:	df 91       	pop	r29
    39c0:	ff 91       	pop	r31
    39c2:	ef 91       	pop	r30
    39c4:	bf 91       	pop	r27
    39c6:	af 91       	pop	r26
    39c8:	9f 91       	pop	r25
    39ca:	8f 91       	pop	r24
    39cc:	7f 91       	pop	r23
    39ce:	6f 91       	pop	r22
    39d0:	5f 91       	pop	r21
    39d2:	4f 91       	pop	r20
    39d4:	3f 91       	pop	r19
    39d6:	2f 91       	pop	r18
    39d8:	0f 90       	pop	r0
    39da:	0f be       	out	0x3f, r0	; 63
    39dc:	0f 90       	pop	r0
    39de:	1f 90       	pop	r1
    39e0:	18 95       	reti

000039e2 <__vector_7>:
 // in case of using CTC mode
 ISR(TIMER1_COMPA_vect){
    39e2:	1f 92       	push	r1
    39e4:	0f 92       	push	r0
    39e6:	0f b6       	in	r0, 0x3f	; 63
    39e8:	0f 92       	push	r0
    39ea:	11 24       	eor	r1, r1
    39ec:	2f 93       	push	r18
    39ee:	3f 93       	push	r19
    39f0:	4f 93       	push	r20
    39f2:	5f 93       	push	r21
    39f4:	6f 93       	push	r22
    39f6:	7f 93       	push	r23
    39f8:	8f 93       	push	r24
    39fa:	9f 93       	push	r25
    39fc:	af 93       	push	r26
    39fe:	bf 93       	push	r27
    3a00:	ef 93       	push	r30
    3a02:	ff 93       	push	r31
    3a04:	df 93       	push	r29
    3a06:	cf 93       	push	r28
    3a08:	cd b7       	in	r28, 0x3d	; 61
    3a0a:	de b7       	in	r29, 0x3e	; 62
 	if(g_callBackPtrT1!=NULL_PTR)
    3a0c:	80 91 50 01 	lds	r24, 0x0150
    3a10:	90 91 51 01 	lds	r25, 0x0151
    3a14:	00 97       	sbiw	r24, 0x00	; 0
    3a16:	29 f0       	breq	.+10     	; 0x3a22 <__vector_7+0x40>
 		(*g_callBackPtrT1)();
    3a18:	e0 91 50 01 	lds	r30, 0x0150
    3a1c:	f0 91 51 01 	lds	r31, 0x0151
    3a20:	09 95       	icall
 }
    3a22:	cf 91       	pop	r28
    3a24:	df 91       	pop	r29
    3a26:	ff 91       	pop	r31
    3a28:	ef 91       	pop	r30
    3a2a:	bf 91       	pop	r27
    3a2c:	af 91       	pop	r26
    3a2e:	9f 91       	pop	r25
    3a30:	8f 91       	pop	r24
    3a32:	7f 91       	pop	r23
    3a34:	6f 91       	pop	r22
    3a36:	5f 91       	pop	r21
    3a38:	4f 91       	pop	r20
    3a3a:	3f 91       	pop	r19
    3a3c:	2f 91       	pop	r18
    3a3e:	0f 90       	pop	r0
    3a40:	0f be       	out	0x3f, r0	; 63
    3a42:	0f 90       	pop	r0
    3a44:	1f 90       	pop	r1
    3a46:	18 95       	reti

00003a48 <Timer1_init>:

 /*******************************************************************************
  *                           Function Definition                                  *
  *******************************************************************************/
 void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    3a48:	df 93       	push	r29
    3a4a:	cf 93       	push	r28
    3a4c:	00 d0       	rcall	.+0      	; 0x3a4e <Timer1_init+0x6>
    3a4e:	cd b7       	in	r28, 0x3d	; 61
    3a50:	de b7       	in	r29, 0x3e	; 62
    3a52:	9a 83       	std	Y+2, r25	; 0x02
    3a54:	89 83       	std	Y+1, r24	; 0x01
	 if(Config_Ptr->mode==OVERFLOW){
    3a56:	e9 81       	ldd	r30, Y+1	; 0x01
    3a58:	fa 81       	ldd	r31, Y+2	; 0x02
    3a5a:	85 81       	ldd	r24, Z+5	; 0x05
    3a5c:	88 23       	and	r24, r24
    3a5e:	29 f5       	brne	.+74     	; 0x3aaa <Timer1_init+0x62>
		 TCCR1A|=(1<<FOC1A);//The FOC1A/FOC1B bits are only active when the WGM13:0 bits specifies a non-PWM mode.
    3a60:	af e4       	ldi	r26, 0x4F	; 79
    3a62:	b0 e0       	ldi	r27, 0x00	; 0
    3a64:	ef e4       	ldi	r30, 0x4F	; 79
    3a66:	f0 e0       	ldi	r31, 0x00	; 0
    3a68:	80 81       	ld	r24, Z
    3a6a:	88 60       	ori	r24, 0x08	; 8
    3a6c:	8c 93       	st	X, r24
		 TCCR1B=((TCCR1B) &(0xF8))|((Config_Ptr->prescaler)&(0x07));//to set bits CS0 CS1 CS 2 to set clk
    3a6e:	ae e4       	ldi	r26, 0x4E	; 78
    3a70:	b0 e0       	ldi	r27, 0x00	; 0
    3a72:	ee e4       	ldi	r30, 0x4E	; 78
    3a74:	f0 e0       	ldi	r31, 0x00	; 0
    3a76:	80 81       	ld	r24, Z
    3a78:	98 2f       	mov	r25, r24
    3a7a:	98 7f       	andi	r25, 0xF8	; 248
    3a7c:	e9 81       	ldd	r30, Y+1	; 0x01
    3a7e:	fa 81       	ldd	r31, Y+2	; 0x02
    3a80:	84 81       	ldd	r24, Z+4	; 0x04
    3a82:	87 70       	andi	r24, 0x07	; 7
    3a84:	89 2b       	or	r24, r25
    3a86:	8c 93       	st	X, r24
		 TCNT1=Config_Ptr->initial_value;
    3a88:	ac e4       	ldi	r26, 0x4C	; 76
    3a8a:	b0 e0       	ldi	r27, 0x00	; 0
    3a8c:	e9 81       	ldd	r30, Y+1	; 0x01
    3a8e:	fa 81       	ldd	r31, Y+2	; 0x02
    3a90:	80 81       	ld	r24, Z
    3a92:	91 81       	ldd	r25, Z+1	; 0x01
    3a94:	11 96       	adiw	r26, 0x01	; 1
    3a96:	9c 93       	st	X, r25
    3a98:	8e 93       	st	-X, r24
		 TIMSK|=(1<<TOIE1);//enable interrupt for the overflow mode
    3a9a:	a9 e5       	ldi	r26, 0x59	; 89
    3a9c:	b0 e0       	ldi	r27, 0x00	; 0
    3a9e:	e9 e5       	ldi	r30, 0x59	; 89
    3aa0:	f0 e0       	ldi	r31, 0x00	; 0
    3aa2:	80 81       	ld	r24, Z
    3aa4:	84 60       	ori	r24, 0x04	; 4
    3aa6:	8c 93       	st	X, r24
    3aa8:	34 c0       	rjmp	.+104    	; 0x3b12 <Timer1_init+0xca>
		 //TOV1 is automatically cleared when the Timer/Counter1 Overflow interrupt vector is executed
	 }else{
		 TCCR1A|=(1<<FOC1A);//The FOC1A/FOC1B bits are only active when the WGM13:0 bits specifies a non-PWM mode.
    3aaa:	af e4       	ldi	r26, 0x4F	; 79
    3aac:	b0 e0       	ldi	r27, 0x00	; 0
    3aae:	ef e4       	ldi	r30, 0x4F	; 79
    3ab0:	f0 e0       	ldi	r31, 0x00	; 0
    3ab2:	80 81       	ld	r24, Z
    3ab4:	88 60       	ori	r24, 0x08	; 8
    3ab6:	8c 93       	st	X, r24
		 TCCR1B|=(1<<WGM12);//Choose mode 4 CTC
    3ab8:	ae e4       	ldi	r26, 0x4E	; 78
    3aba:	b0 e0       	ldi	r27, 0x00	; 0
    3abc:	ee e4       	ldi	r30, 0x4E	; 78
    3abe:	f0 e0       	ldi	r31, 0x00	; 0
    3ac0:	80 81       	ld	r24, Z
    3ac2:	88 60       	ori	r24, 0x08	; 8
    3ac4:	8c 93       	st	X, r24
		 TCCR1B=((TCCR1B) &(0xF8))|((Config_Ptr->prescaler)&(0x07));//to set bits CS0 CS1 CS 2 to set clk
    3ac6:	ae e4       	ldi	r26, 0x4E	; 78
    3ac8:	b0 e0       	ldi	r27, 0x00	; 0
    3aca:	ee e4       	ldi	r30, 0x4E	; 78
    3acc:	f0 e0       	ldi	r31, 0x00	; 0
    3ace:	80 81       	ld	r24, Z
    3ad0:	98 2f       	mov	r25, r24
    3ad2:	98 7f       	andi	r25, 0xF8	; 248
    3ad4:	e9 81       	ldd	r30, Y+1	; 0x01
    3ad6:	fa 81       	ldd	r31, Y+2	; 0x02
    3ad8:	84 81       	ldd	r24, Z+4	; 0x04
    3ada:	87 70       	andi	r24, 0x07	; 7
    3adc:	89 2b       	or	r24, r25
    3ade:	8c 93       	st	X, r24
		 TCNT1=Config_Ptr->initial_value;
    3ae0:	ac e4       	ldi	r26, 0x4C	; 76
    3ae2:	b0 e0       	ldi	r27, 0x00	; 0
    3ae4:	e9 81       	ldd	r30, Y+1	; 0x01
    3ae6:	fa 81       	ldd	r31, Y+2	; 0x02
    3ae8:	80 81       	ld	r24, Z
    3aea:	91 81       	ldd	r25, Z+1	; 0x01
    3aec:	11 96       	adiw	r26, 0x01	; 1
    3aee:	9c 93       	st	X, r25
    3af0:	8e 93       	st	-X, r24
		 OCR1A=Config_Ptr->compare_value;
    3af2:	aa e4       	ldi	r26, 0x4A	; 74
    3af4:	b0 e0       	ldi	r27, 0x00	; 0
    3af6:	e9 81       	ldd	r30, Y+1	; 0x01
    3af8:	fa 81       	ldd	r31, Y+2	; 0x02
    3afa:	82 81       	ldd	r24, Z+2	; 0x02
    3afc:	93 81       	ldd	r25, Z+3	; 0x03
    3afe:	11 96       	adiw	r26, 0x01	; 1
    3b00:	9c 93       	st	X, r25
    3b02:	8e 93       	st	-X, r24
		 TIMSK|=(1<<OCIE1A);//enable interrupt for CTC module
    3b04:	a9 e5       	ldi	r26, 0x59	; 89
    3b06:	b0 e0       	ldi	r27, 0x00	; 0
    3b08:	e9 e5       	ldi	r30, 0x59	; 89
    3b0a:	f0 e0       	ldi	r31, 0x00	; 0
    3b0c:	80 81       	ld	r24, Z
    3b0e:	80 61       	ori	r24, 0x10	; 16
    3b10:	8c 93       	st	X, r24
		 	When this bit is written to one, and the I-flag in the Status Register
		 	is set (interrupts globally enabled), the Timer/Counter1 Output Compare A match interrupt is enable
		 	*/
		 //OCF1A is automatically cleared when the Output Compare Match A Interrupt Vector is executed.
	 }
 }
    3b12:	0f 90       	pop	r0
    3b14:	0f 90       	pop	r0
    3b16:	cf 91       	pop	r28
    3b18:	df 91       	pop	r29
    3b1a:	08 95       	ret

00003b1c <Timer1_setCallBack>:
 void Timer1_setCallBack(void(*a_ptr)(void)){
    3b1c:	df 93       	push	r29
    3b1e:	cf 93       	push	r28
    3b20:	00 d0       	rcall	.+0      	; 0x3b22 <Timer1_setCallBack+0x6>
    3b22:	cd b7       	in	r28, 0x3d	; 61
    3b24:	de b7       	in	r29, 0x3e	; 62
    3b26:	9a 83       	std	Y+2, r25	; 0x02
    3b28:	89 83       	std	Y+1, r24	; 0x01
	 g_callBackPtrT1=a_ptr;
    3b2a:	89 81       	ldd	r24, Y+1	; 0x01
    3b2c:	9a 81       	ldd	r25, Y+2	; 0x02
    3b2e:	90 93 51 01 	sts	0x0151, r25
    3b32:	80 93 50 01 	sts	0x0150, r24
 }
    3b36:	0f 90       	pop	r0
    3b38:	0f 90       	pop	r0
    3b3a:	cf 91       	pop	r28
    3b3c:	df 91       	pop	r29
    3b3e:	08 95       	ret

00003b40 <Timer1_deInit>:
 void Timer1_deInit(void){
    3b40:	df 93       	push	r29
    3b42:	cf 93       	push	r28
    3b44:	cd b7       	in	r28, 0x3d	; 61
    3b46:	de b7       	in	r29, 0x3e	; 62
		TCCR1A=0;
    3b48:	ef e4       	ldi	r30, 0x4F	; 79
    3b4a:	f0 e0       	ldi	r31, 0x00	; 0
    3b4c:	10 82       	st	Z, r1
		TCCR1B= 0; //stop the clock
    3b4e:	ee e4       	ldi	r30, 0x4E	; 78
    3b50:	f0 e0       	ldi	r31, 0x00	; 0
    3b52:	10 82       	st	Z, r1
		TCNT1=0;
    3b54:	ec e4       	ldi	r30, 0x4C	; 76
    3b56:	f0 e0       	ldi	r31, 0x00	; 0
    3b58:	11 82       	std	Z+1, r1	; 0x01
    3b5a:	10 82       	st	Z, r1
		OCR1A=0;
    3b5c:	ea e4       	ldi	r30, 0x4A	; 74
    3b5e:	f0 e0       	ldi	r31, 0x00	; 0
    3b60:	11 82       	std	Z+1, r1	; 0x01
    3b62:	10 82       	st	Z, r1
 }
    3b64:	cf 91       	pop	r28
    3b66:	df 91       	pop	r29
    3b68:	08 95       	ret

00003b6a <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    3b6a:	df 93       	push	r29
    3b6c:	cf 93       	push	r28
    3b6e:	cd b7       	in	r28, 0x3d	; 61
    3b70:	de b7       	in	r29, 0x3e	; 62
    3b72:	28 97       	sbiw	r28, 0x08	; 8
    3b74:	0f b6       	in	r0, 0x3f	; 63
    3b76:	f8 94       	cli
    3b78:	de bf       	out	0x3e, r29	; 62
    3b7a:	0f be       	out	0x3f, r0	; 63
    3b7c:	cd bf       	out	0x3d, r28	; 61
    3b7e:	98 87       	std	Y+8, r25	; 0x08
    3b80:	8f 83       	std	Y+7, r24	; 0x07
	uint16 ubrr_value = 0;
    3b82:	1e 82       	std	Y+6, r1	; 0x06
    3b84:	1d 82       	std	Y+5, r1	; 0x05

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    3b86:	eb e2       	ldi	r30, 0x2B	; 43
    3b88:	f0 e0       	ldi	r31, 0x00	; 0
    3b8a:	82 e0       	ldi	r24, 0x02	; 2
    3b8c:	80 83       	st	Z, r24
	//set baud rate
	uint32 baud_rate=Config_Ptr->baud_rate;
    3b8e:	ef 81       	ldd	r30, Y+7	; 0x07
    3b90:	f8 85       	ldd	r31, Y+8	; 0x08
    3b92:	83 81       	ldd	r24, Z+3	; 0x03
    3b94:	94 81       	ldd	r25, Z+4	; 0x04
    3b96:	a5 81       	ldd	r26, Z+5	; 0x05
    3b98:	b6 81       	ldd	r27, Z+6	; 0x06
    3b9a:	89 83       	std	Y+1, r24	; 0x01
    3b9c:	9a 83       	std	Y+2, r25	; 0x02
    3b9e:	ab 83       	std	Y+3, r26	; 0x03
    3ba0:	bc 83       	std	Y+4, r27	; 0x04
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3ba2:	ea e2       	ldi	r30, 0x2A	; 42
    3ba4:	f0 e0       	ldi	r31, 0x00	; 0
    3ba6:	88 e1       	ldi	r24, 0x18	; 24
    3ba8:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    3baa:	e0 e4       	ldi	r30, 0x40	; 64
    3bac:	f0 e0       	ldi	r31, 0x00	; 0
    3bae:	80 e8       	ldi	r24, 0x80	; 128
    3bb0:	80 83       	st	Z, r24
	UCSRC = (UCSRC & 0XF9) | ((Config_Ptr->bit_data) << 1);
    3bb2:	a0 e4       	ldi	r26, 0x40	; 64
    3bb4:	b0 e0       	ldi	r27, 0x00	; 0
    3bb6:	e0 e4       	ldi	r30, 0x40	; 64
    3bb8:	f0 e0       	ldi	r31, 0x00	; 0
    3bba:	80 81       	ld	r24, Z
    3bbc:	28 2f       	mov	r18, r24
    3bbe:	29 7f       	andi	r18, 0xF9	; 249
    3bc0:	ef 81       	ldd	r30, Y+7	; 0x07
    3bc2:	f8 85       	ldd	r31, Y+8	; 0x08
    3bc4:	80 81       	ld	r24, Z
    3bc6:	88 2f       	mov	r24, r24
    3bc8:	90 e0       	ldi	r25, 0x00	; 0
    3bca:	88 0f       	add	r24, r24
    3bcc:	99 1f       	adc	r25, r25
    3bce:	82 2b       	or	r24, r18
    3bd0:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0XF7) | ((Config_Ptr->stop_bit) << 3);
    3bd2:	a0 e4       	ldi	r26, 0x40	; 64
    3bd4:	b0 e0       	ldi	r27, 0x00	; 0
    3bd6:	e0 e4       	ldi	r30, 0x40	; 64
    3bd8:	f0 e0       	ldi	r31, 0x00	; 0
    3bda:	80 81       	ld	r24, Z
    3bdc:	28 2f       	mov	r18, r24
    3bde:	27 7f       	andi	r18, 0xF7	; 247
    3be0:	ef 81       	ldd	r30, Y+7	; 0x07
    3be2:	f8 85       	ldd	r31, Y+8	; 0x08
    3be4:	82 81       	ldd	r24, Z+2	; 0x02
    3be6:	88 2f       	mov	r24, r24
    3be8:	90 e0       	ldi	r25, 0x00	; 0
    3bea:	88 0f       	add	r24, r24
    3bec:	99 1f       	adc	r25, r25
    3bee:	88 0f       	add	r24, r24
    3bf0:	99 1f       	adc	r25, r25
    3bf2:	88 0f       	add	r24, r24
    3bf4:	99 1f       	adc	r25, r25
    3bf6:	82 2b       	or	r24, r18
    3bf8:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0XCF) | ((Config_Ptr->parity) << 4);
    3bfa:	a0 e4       	ldi	r26, 0x40	; 64
    3bfc:	b0 e0       	ldi	r27, 0x00	; 0
    3bfe:	e0 e4       	ldi	r30, 0x40	; 64
    3c00:	f0 e0       	ldi	r31, 0x00	; 0
    3c02:	80 81       	ld	r24, Z
    3c04:	28 2f       	mov	r18, r24
    3c06:	2f 7c       	andi	r18, 0xCF	; 207
    3c08:	ef 81       	ldd	r30, Y+7	; 0x07
    3c0a:	f8 85       	ldd	r31, Y+8	; 0x08
    3c0c:	81 81       	ldd	r24, Z+1	; 0x01
    3c0e:	88 2f       	mov	r24, r24
    3c10:	90 e0       	ldi	r25, 0x00	; 0
    3c12:	82 95       	swap	r24
    3c14:	92 95       	swap	r25
    3c16:	90 7f       	andi	r25, 0xF0	; 240
    3c18:	98 27       	eor	r25, r24
    3c1a:	80 7f       	andi	r24, 0xF0	; 240
    3c1c:	98 27       	eor	r25, r24
    3c1e:	82 2b       	or	r24, r18
    3c20:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((baud_rate) * 8UL))) - 1);
    3c22:	89 81       	ldd	r24, Y+1	; 0x01
    3c24:	9a 81       	ldd	r25, Y+2	; 0x02
    3c26:	ab 81       	ldd	r26, Y+3	; 0x03
    3c28:	bc 81       	ldd	r27, Y+4	; 0x04
    3c2a:	88 0f       	add	r24, r24
    3c2c:	99 1f       	adc	r25, r25
    3c2e:	aa 1f       	adc	r26, r26
    3c30:	bb 1f       	adc	r27, r27
    3c32:	88 0f       	add	r24, r24
    3c34:	99 1f       	adc	r25, r25
    3c36:	aa 1f       	adc	r26, r26
    3c38:	bb 1f       	adc	r27, r27
    3c3a:	88 0f       	add	r24, r24
    3c3c:	99 1f       	adc	r25, r25
    3c3e:	aa 1f       	adc	r26, r26
    3c40:	bb 1f       	adc	r27, r27
    3c42:	9c 01       	movw	r18, r24
    3c44:	ad 01       	movw	r20, r26
    3c46:	80 e0       	ldi	r24, 0x00	; 0
    3c48:	92 e1       	ldi	r25, 0x12	; 18
    3c4a:	aa e7       	ldi	r26, 0x7A	; 122
    3c4c:	b0 e0       	ldi	r27, 0x00	; 0
    3c4e:	bc 01       	movw	r22, r24
    3c50:	cd 01       	movw	r24, r26
    3c52:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <__udivmodsi4>
    3c56:	da 01       	movw	r26, r20
    3c58:	c9 01       	movw	r24, r18
    3c5a:	01 97       	sbiw	r24, 0x01	; 1
    3c5c:	9e 83       	std	Y+6, r25	; 0x06
    3c5e:	8d 83       	std	Y+5, r24	; 0x05

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3c60:	e0 e4       	ldi	r30, 0x40	; 64
    3c62:	f0 e0       	ldi	r31, 0x00	; 0
    3c64:	8d 81       	ldd	r24, Y+5	; 0x05
    3c66:	9e 81       	ldd	r25, Y+6	; 0x06
    3c68:	89 2f       	mov	r24, r25
    3c6a:	99 27       	eor	r25, r25
    3c6c:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3c6e:	e9 e2       	ldi	r30, 0x29	; 41
    3c70:	f0 e0       	ldi	r31, 0x00	; 0
    3c72:	8d 81       	ldd	r24, Y+5	; 0x05
    3c74:	80 83       	st	Z, r24
}
    3c76:	28 96       	adiw	r28, 0x08	; 8
    3c78:	0f b6       	in	r0, 0x3f	; 63
    3c7a:	f8 94       	cli
    3c7c:	de bf       	out	0x3e, r29	; 62
    3c7e:	0f be       	out	0x3f, r0	; 63
    3c80:	cd bf       	out	0x3d, r28	; 61
    3c82:	cf 91       	pop	r28
    3c84:	df 91       	pop	r29
    3c86:	08 95       	ret

00003c88 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3c88:	df 93       	push	r29
    3c8a:	cf 93       	push	r28
    3c8c:	0f 92       	push	r0
    3c8e:	cd b7       	in	r28, 0x3d	; 61
    3c90:	de b7       	in	r29, 0x3e	; 62
    3c92:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3c94:	eb e2       	ldi	r30, 0x2B	; 43
    3c96:	f0 e0       	ldi	r31, 0x00	; 0
    3c98:	80 81       	ld	r24, Z
    3c9a:	88 2f       	mov	r24, r24
    3c9c:	90 e0       	ldi	r25, 0x00	; 0
    3c9e:	80 72       	andi	r24, 0x20	; 32
    3ca0:	90 70       	andi	r25, 0x00	; 0
    3ca2:	00 97       	sbiw	r24, 0x00	; 0
    3ca4:	b9 f3       	breq	.-18     	; 0x3c94 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3ca6:	ec e2       	ldi	r30, 0x2C	; 44
    3ca8:	f0 e0       	ldi	r31, 0x00	; 0
    3caa:	89 81       	ldd	r24, Y+1	; 0x01
    3cac:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    3cae:	0f 90       	pop	r0
    3cb0:	cf 91       	pop	r28
    3cb2:	df 91       	pop	r29
    3cb4:	08 95       	ret

00003cb6 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3cb6:	df 93       	push	r29
    3cb8:	cf 93       	push	r28
    3cba:	cd b7       	in	r28, 0x3d	; 61
    3cbc:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3cbe:	eb e2       	ldi	r30, 0x2B	; 43
    3cc0:	f0 e0       	ldi	r31, 0x00	; 0
    3cc2:	80 81       	ld	r24, Z
    3cc4:	88 23       	and	r24, r24
    3cc6:	dc f7       	brge	.-10     	; 0x3cbe <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    3cc8:	ec e2       	ldi	r30, 0x2C	; 44
    3cca:	f0 e0       	ldi	r31, 0x00	; 0
    3ccc:	80 81       	ld	r24, Z
}
    3cce:	cf 91       	pop	r28
    3cd0:	df 91       	pop	r29
    3cd2:	08 95       	ret

00003cd4 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3cd4:	df 93       	push	r29
    3cd6:	cf 93       	push	r28
    3cd8:	00 d0       	rcall	.+0      	; 0x3cda <UART_sendString+0x6>
    3cda:	0f 92       	push	r0
    3cdc:	cd b7       	in	r28, 0x3d	; 61
    3cde:	de b7       	in	r29, 0x3e	; 62
    3ce0:	9b 83       	std	Y+3, r25	; 0x03
    3ce2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3ce4:	19 82       	std	Y+1, r1	; 0x01
    3ce6:	0e c0       	rjmp	.+28     	; 0x3d04 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3ce8:	89 81       	ldd	r24, Y+1	; 0x01
    3cea:	28 2f       	mov	r18, r24
    3cec:	30 e0       	ldi	r19, 0x00	; 0
    3cee:	8a 81       	ldd	r24, Y+2	; 0x02
    3cf0:	9b 81       	ldd	r25, Y+3	; 0x03
    3cf2:	fc 01       	movw	r30, r24
    3cf4:	e2 0f       	add	r30, r18
    3cf6:	f3 1f       	adc	r31, r19
    3cf8:	80 81       	ld	r24, Z
    3cfa:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <UART_sendByte>
		i++;
    3cfe:	89 81       	ldd	r24, Y+1	; 0x01
    3d00:	8f 5f       	subi	r24, 0xFF	; 255
    3d02:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3d04:	89 81       	ldd	r24, Y+1	; 0x01
    3d06:	28 2f       	mov	r18, r24
    3d08:	30 e0       	ldi	r19, 0x00	; 0
    3d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d0c:	9b 81       	ldd	r25, Y+3	; 0x03
    3d0e:	fc 01       	movw	r30, r24
    3d10:	e2 0f       	add	r30, r18
    3d12:	f3 1f       	adc	r31, r19
    3d14:	80 81       	ld	r24, Z
    3d16:	88 23       	and	r24, r24
    3d18:	39 f7       	brne	.-50     	; 0x3ce8 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    3d1a:	0f 90       	pop	r0
    3d1c:	0f 90       	pop	r0
    3d1e:	0f 90       	pop	r0
    3d20:	cf 91       	pop	r28
    3d22:	df 91       	pop	r29
    3d24:	08 95       	ret

00003d26 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3d26:	0f 93       	push	r16
    3d28:	1f 93       	push	r17
    3d2a:	df 93       	push	r29
    3d2c:	cf 93       	push	r28
    3d2e:	00 d0       	rcall	.+0      	; 0x3d30 <UART_receiveString+0xa>
    3d30:	0f 92       	push	r0
    3d32:	cd b7       	in	r28, 0x3d	; 61
    3d34:	de b7       	in	r29, 0x3e	; 62
    3d36:	9b 83       	std	Y+3, r25	; 0x03
    3d38:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3d3a:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3d3c:	89 81       	ldd	r24, Y+1	; 0x01
    3d3e:	28 2f       	mov	r18, r24
    3d40:	30 e0       	ldi	r19, 0x00	; 0
    3d42:	8a 81       	ldd	r24, Y+2	; 0x02
    3d44:	9b 81       	ldd	r25, Y+3	; 0x03
    3d46:	8c 01       	movw	r16, r24
    3d48:	02 0f       	add	r16, r18
    3d4a:	13 1f       	adc	r17, r19
    3d4c:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <UART_recieveByte>
    3d50:	f8 01       	movw	r30, r16
    3d52:	80 83       	st	Z, r24
    3d54:	0f c0       	rjmp	.+30     	; 0x3d74 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3d56:	89 81       	ldd	r24, Y+1	; 0x01
    3d58:	8f 5f       	subi	r24, 0xFF	; 255
    3d5a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3d5c:	89 81       	ldd	r24, Y+1	; 0x01
    3d5e:	28 2f       	mov	r18, r24
    3d60:	30 e0       	ldi	r19, 0x00	; 0
    3d62:	8a 81       	ldd	r24, Y+2	; 0x02
    3d64:	9b 81       	ldd	r25, Y+3	; 0x03
    3d66:	8c 01       	movw	r16, r24
    3d68:	02 0f       	add	r16, r18
    3d6a:	13 1f       	adc	r17, r19
    3d6c:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <UART_recieveByte>
    3d70:	f8 01       	movw	r30, r16
    3d72:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3d74:	89 81       	ldd	r24, Y+1	; 0x01
    3d76:	28 2f       	mov	r18, r24
    3d78:	30 e0       	ldi	r19, 0x00	; 0
    3d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d7c:	9b 81       	ldd	r25, Y+3	; 0x03
    3d7e:	fc 01       	movw	r30, r24
    3d80:	e2 0f       	add	r30, r18
    3d82:	f3 1f       	adc	r31, r19
    3d84:	80 81       	ld	r24, Z
    3d86:	83 32       	cpi	r24, 0x23	; 35
    3d88:	31 f7       	brne	.-52     	; 0x3d56 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3d8a:	89 81       	ldd	r24, Y+1	; 0x01
    3d8c:	28 2f       	mov	r18, r24
    3d8e:	30 e0       	ldi	r19, 0x00	; 0
    3d90:	8a 81       	ldd	r24, Y+2	; 0x02
    3d92:	9b 81       	ldd	r25, Y+3	; 0x03
    3d94:	fc 01       	movw	r30, r24
    3d96:	e2 0f       	add	r30, r18
    3d98:	f3 1f       	adc	r31, r19
    3d9a:	10 82       	st	Z, r1
}
    3d9c:	0f 90       	pop	r0
    3d9e:	0f 90       	pop	r0
    3da0:	0f 90       	pop	r0
    3da2:	cf 91       	pop	r28
    3da4:	df 91       	pop	r29
    3da6:	1f 91       	pop	r17
    3da8:	0f 91       	pop	r16
    3daa:	08 95       	ret

00003dac <__udivmodsi4>:
    3dac:	a1 e2       	ldi	r26, 0x21	; 33
    3dae:	1a 2e       	mov	r1, r26
    3db0:	aa 1b       	sub	r26, r26
    3db2:	bb 1b       	sub	r27, r27
    3db4:	fd 01       	movw	r30, r26
    3db6:	0d c0       	rjmp	.+26     	; 0x3dd2 <__udivmodsi4_ep>

00003db8 <__udivmodsi4_loop>:
    3db8:	aa 1f       	adc	r26, r26
    3dba:	bb 1f       	adc	r27, r27
    3dbc:	ee 1f       	adc	r30, r30
    3dbe:	ff 1f       	adc	r31, r31
    3dc0:	a2 17       	cp	r26, r18
    3dc2:	b3 07       	cpc	r27, r19
    3dc4:	e4 07       	cpc	r30, r20
    3dc6:	f5 07       	cpc	r31, r21
    3dc8:	20 f0       	brcs	.+8      	; 0x3dd2 <__udivmodsi4_ep>
    3dca:	a2 1b       	sub	r26, r18
    3dcc:	b3 0b       	sbc	r27, r19
    3dce:	e4 0b       	sbc	r30, r20
    3dd0:	f5 0b       	sbc	r31, r21

00003dd2 <__udivmodsi4_ep>:
    3dd2:	66 1f       	adc	r22, r22
    3dd4:	77 1f       	adc	r23, r23
    3dd6:	88 1f       	adc	r24, r24
    3dd8:	99 1f       	adc	r25, r25
    3dda:	1a 94       	dec	r1
    3ddc:	69 f7       	brne	.-38     	; 0x3db8 <__udivmodsi4_loop>
    3dde:	60 95       	com	r22
    3de0:	70 95       	com	r23
    3de2:	80 95       	com	r24
    3de4:	90 95       	com	r25
    3de6:	9b 01       	movw	r18, r22
    3de8:	ac 01       	movw	r20, r24
    3dea:	bd 01       	movw	r22, r26
    3dec:	cf 01       	movw	r24, r30
    3dee:	08 95       	ret

00003df0 <__prologue_saves__>:
    3df0:	2f 92       	push	r2
    3df2:	3f 92       	push	r3
    3df4:	4f 92       	push	r4
    3df6:	5f 92       	push	r5
    3df8:	6f 92       	push	r6
    3dfa:	7f 92       	push	r7
    3dfc:	8f 92       	push	r8
    3dfe:	9f 92       	push	r9
    3e00:	af 92       	push	r10
    3e02:	bf 92       	push	r11
    3e04:	cf 92       	push	r12
    3e06:	df 92       	push	r13
    3e08:	ef 92       	push	r14
    3e0a:	ff 92       	push	r15
    3e0c:	0f 93       	push	r16
    3e0e:	1f 93       	push	r17
    3e10:	cf 93       	push	r28
    3e12:	df 93       	push	r29
    3e14:	cd b7       	in	r28, 0x3d	; 61
    3e16:	de b7       	in	r29, 0x3e	; 62
    3e18:	ca 1b       	sub	r28, r26
    3e1a:	db 0b       	sbc	r29, r27
    3e1c:	0f b6       	in	r0, 0x3f	; 63
    3e1e:	f8 94       	cli
    3e20:	de bf       	out	0x3e, r29	; 62
    3e22:	0f be       	out	0x3f, r0	; 63
    3e24:	cd bf       	out	0x3d, r28	; 61
    3e26:	09 94       	ijmp

00003e28 <__epilogue_restores__>:
    3e28:	2a 88       	ldd	r2, Y+18	; 0x12
    3e2a:	39 88       	ldd	r3, Y+17	; 0x11
    3e2c:	48 88       	ldd	r4, Y+16	; 0x10
    3e2e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3e30:	6e 84       	ldd	r6, Y+14	; 0x0e
    3e32:	7d 84       	ldd	r7, Y+13	; 0x0d
    3e34:	8c 84       	ldd	r8, Y+12	; 0x0c
    3e36:	9b 84       	ldd	r9, Y+11	; 0x0b
    3e38:	aa 84       	ldd	r10, Y+10	; 0x0a
    3e3a:	b9 84       	ldd	r11, Y+9	; 0x09
    3e3c:	c8 84       	ldd	r12, Y+8	; 0x08
    3e3e:	df 80       	ldd	r13, Y+7	; 0x07
    3e40:	ee 80       	ldd	r14, Y+6	; 0x06
    3e42:	fd 80       	ldd	r15, Y+5	; 0x05
    3e44:	0c 81       	ldd	r16, Y+4	; 0x04
    3e46:	1b 81       	ldd	r17, Y+3	; 0x03
    3e48:	aa 81       	ldd	r26, Y+2	; 0x02
    3e4a:	b9 81       	ldd	r27, Y+1	; 0x01
    3e4c:	ce 0f       	add	r28, r30
    3e4e:	d1 1d       	adc	r29, r1
    3e50:	0f b6       	in	r0, 0x3f	; 63
    3e52:	f8 94       	cli
    3e54:	de bf       	out	0x3e, r29	; 62
    3e56:	0f be       	out	0x3f, r0	; 63
    3e58:	cd bf       	out	0x3d, r28	; 61
    3e5a:	ed 01       	movw	r28, r26
    3e5c:	08 95       	ret

00003e5e <itoa>:
    3e5e:	fb 01       	movw	r30, r22
    3e60:	9f 01       	movw	r18, r30
    3e62:	e8 94       	clt
    3e64:	42 30       	cpi	r20, 0x02	; 2
    3e66:	c4 f0       	brlt	.+48     	; 0x3e98 <itoa+0x3a>
    3e68:	45 32       	cpi	r20, 0x25	; 37
    3e6a:	b4 f4       	brge	.+44     	; 0x3e98 <itoa+0x3a>
    3e6c:	4a 30       	cpi	r20, 0x0A	; 10
    3e6e:	29 f4       	brne	.+10     	; 0x3e7a <itoa+0x1c>
    3e70:	97 fb       	bst	r25, 7
    3e72:	1e f4       	brtc	.+6      	; 0x3e7a <itoa+0x1c>
    3e74:	90 95       	com	r25
    3e76:	81 95       	neg	r24
    3e78:	9f 4f       	sbci	r25, 0xFF	; 255
    3e7a:	64 2f       	mov	r22, r20
    3e7c:	77 27       	eor	r23, r23
    3e7e:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__udivmodhi4>
    3e82:	80 5d       	subi	r24, 0xD0	; 208
    3e84:	8a 33       	cpi	r24, 0x3A	; 58
    3e86:	0c f0       	brlt	.+2      	; 0x3e8a <itoa+0x2c>
    3e88:	89 5d       	subi	r24, 0xD9	; 217
    3e8a:	81 93       	st	Z+, r24
    3e8c:	cb 01       	movw	r24, r22
    3e8e:	00 97       	sbiw	r24, 0x00	; 0
    3e90:	a1 f7       	brne	.-24     	; 0x3e7a <itoa+0x1c>
    3e92:	16 f4       	brtc	.+4      	; 0x3e98 <itoa+0x3a>
    3e94:	5d e2       	ldi	r21, 0x2D	; 45
    3e96:	51 93       	st	Z+, r21
    3e98:	10 82       	st	Z, r1
    3e9a:	c9 01       	movw	r24, r18
    3e9c:	0c 94 50 1f 	jmp	0x3ea0	; 0x3ea0 <strrev>

00003ea0 <strrev>:
    3ea0:	dc 01       	movw	r26, r24
    3ea2:	fc 01       	movw	r30, r24
    3ea4:	67 2f       	mov	r22, r23
    3ea6:	71 91       	ld	r23, Z+
    3ea8:	77 23       	and	r23, r23
    3eaa:	e1 f7       	brne	.-8      	; 0x3ea4 <strrev+0x4>
    3eac:	32 97       	sbiw	r30, 0x02	; 2
    3eae:	04 c0       	rjmp	.+8      	; 0x3eb8 <strrev+0x18>
    3eb0:	7c 91       	ld	r23, X
    3eb2:	6d 93       	st	X+, r22
    3eb4:	70 83       	st	Z, r23
    3eb6:	62 91       	ld	r22, -Z
    3eb8:	ae 17       	cp	r26, r30
    3eba:	bf 07       	cpc	r27, r31
    3ebc:	c8 f3       	brcs	.-14     	; 0x3eb0 <strrev+0x10>
    3ebe:	08 95       	ret

00003ec0 <__udivmodhi4>:
    3ec0:	aa 1b       	sub	r26, r26
    3ec2:	bb 1b       	sub	r27, r27
    3ec4:	51 e1       	ldi	r21, 0x11	; 17
    3ec6:	07 c0       	rjmp	.+14     	; 0x3ed6 <__udivmodhi4_ep>

00003ec8 <__udivmodhi4_loop>:
    3ec8:	aa 1f       	adc	r26, r26
    3eca:	bb 1f       	adc	r27, r27
    3ecc:	a6 17       	cp	r26, r22
    3ece:	b7 07       	cpc	r27, r23
    3ed0:	10 f0       	brcs	.+4      	; 0x3ed6 <__udivmodhi4_ep>
    3ed2:	a6 1b       	sub	r26, r22
    3ed4:	b7 0b       	sbc	r27, r23

00003ed6 <__udivmodhi4_ep>:
    3ed6:	88 1f       	adc	r24, r24
    3ed8:	99 1f       	adc	r25, r25
    3eda:	5a 95       	dec	r21
    3edc:	a9 f7       	brne	.-22     	; 0x3ec8 <__udivmodhi4_loop>
    3ede:	80 95       	com	r24
    3ee0:	90 95       	com	r25
    3ee2:	bc 01       	movw	r22, r24
    3ee4:	cd 01       	movw	r24, r26
    3ee6:	08 95       	ret

00003ee8 <_exit>:
    3ee8:	f8 94       	cli

00003eea <__stop_program>:
    3eea:	ff cf       	rjmp	.-2      	; 0x3eea <__stop_program>
